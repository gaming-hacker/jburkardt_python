Tue Oct 19 11:25:04 2021

calpak_test:
  Python version: 3.6.9
  Test calpak().

ch_cap_test
  Python version: 3.6.9
  ch_cap uppercases a character.

  C  ch_cap(C)

  F      F
  f      F
  1      1
  b      B
  &      &

ch_cap_test:
  Normal end of execution.

datenum_to_jed_test
  datenum_to_jed: Matlab DATENUM -> JED.

  JED (in)    DATENUM             JED (out)

   1721058.50          0.00   1721058.50
   1721422.50        364.00   1721422.50
   1721423.50        365.00   1721423.50
   1721425.50        367.00   1721425.50
   1721425.50        367.00   1721425.50
   1724220.50       3162.00   1724220.50
   1741959.50      20901.00   1741959.50
   1749994.50      28936.00   1749994.50
   1825029.50     103971.00   1825029.50
   1862836.50     141778.00   1862836.50
   1922867.50     201809.00   1922867.50
   1936747.50     215689.00   1936747.50
   1940351.50     219293.00   1940351.50
   1948320.50     227262.00   1948320.50
   1948438.50     227380.00   1948438.50
   1948439.50     227381.00   1948439.50
   1952062.50     231004.00   1952062.50
   1952067.50     231009.00   1952067.50
   2110700.50     389642.00   2110700.50
   2114872.50     393814.00   2114872.50
   2289425.50     568367.00   2289425.50
   2299160.00     578101.50   2299160.00
   2299161.00     578102.50   2299161.00
   2333269.50     612211.00   2333269.50
   2361221.00     640162.50   2361221.00
   2361222.00     640163.50   2361222.00
   2372547.50     651489.00   2372547.50
   2375839.50     654781.00   2375839.50
   2394646.50     673588.00   2394646.50
   2394710.50     673652.00   2394710.50
   2397383.50     676325.00   2397383.50
   2400000.50     678942.00   2400000.50
   2409702.50     688644.00   2409702.50
   2415020.31     693961.81   2415020.31
   2429702.50     708644.00   2429702.50
   2439702.50     718644.00   2439702.50
   2440587.50     719529.00   2440587.50
   2443817.50     722759.00   2443817.50
   2443818.50     722760.00   2443818.50
   2444244.50     723186.00   2444244.50
   2449790.50     728732.00   2449790.50
   2450138.50     729080.00   2450138.50
   2451544.50     730486.00   2451544.50
   2459506.98     738448.48   2459506.98
   2456282.50     735224.00   2456282.50
   2913943.00    1192884.50   2913943.00

datenum_values_test:
  Python version: 3.6.9
  datenum_values stores values of
  the MATLAB datenum for a given Y/M/D date

       Y       M       D   DateNum

       0       1       1         1
       1       1       1       367
     100       1       1     36526
    1000       1       1    365244
    1939       8      17    708434
    1944       9       9    710284
    1952       3      10    713023
    1966       5      12    718199
    1980       1       6    723186
    1996       2      25    729080
    2000       1       1    730486

datenum_values_test:
  Normal end of execution.

day_list_common_test
  day_list_common prints a list of days between
  two given YMD dates in the common calendar.

  Initial date: CE 2012/9/1
  Final date:   CE 2012/12/31


Sat, Sep 01 2012 -
Sun, Sep 02 2012 -
Mon, Sep 03 2012 -
Tue, Sep 04 2012 -
Wed, Sep 05 2012 -
Thu, Sep 06 2012 -
Fri, Sep 07 2012 -
Sat, Sep 08 2012 -
Sun, Sep 09 2012 -
Mon, Sep 10 2012 -
Tue, Sep 11 2012 -
Wed, Sep 12 2012 -
Thu, Sep 13 2012 -
Fri, Sep 14 2012 -
Sat, Sep 15 2012 -
Sun, Sep 16 2012 -
Mon, Sep 17 2012 -
Tue, Sep 18 2012 -
Wed, Sep 19 2012 -
Thu, Sep 20 2012 -
Fri, Sep 21 2012 -
Sat, Sep 22 2012 -
Sun, Sep 23 2012 -
Mon, Sep 24 2012 -
Tue, Sep 25 2012 -
Wed, Sep 26 2012 -
Thu, Sep 27 2012 -
Fri, Sep 28 2012 -
Sat, Sep 29 2012 -
Sun, Sep 30 2012 -
Mon, Oct 01 2012 -
Tue, Oct 02 2012 -
Wed, Oct 03 2012 -
Thu, Oct 04 2012 -
Fri, Oct 05 2012 -
Sat, Oct 06 2012 -
Sun, Oct 07 2012 -
Mon, Oct 08 2012 -
Tue, Oct 09 2012 -
Wed, Oct 10 2012 -
Thu, Oct 11 2012 -
Fri, Oct 12 2012 -
Sat, Oct 13 2012 -
Sun, Oct 14 2012 -
Mon, Oct 15 2012 -
Tue, Oct 16 2012 -
Wed, Oct 17 2012 -
Thu, Oct 18 2012 -
Fri, Oct 19 2012 -
Sat, Oct 20 2012 -
Sun, Oct 21 2012 -
Mon, Oct 22 2012 -
Tue, Oct 23 2012 -
Wed, Oct 24 2012 -
Thu, Oct 25 2012 -
Fri, Oct 26 2012 -
Sat, Oct 27 2012 -
Sun, Oct 28 2012 -
Mon, Oct 29 2012 -
Tue, Oct 30 2012 -
Wed, Oct 31 2012 -
Thu, Nov 01 2012 -
Fri, Nov 02 2012 -
Sat, Nov 03 2012 -
Sun, Nov 04 2012 -
Mon, Nov 05 2012 -
Tue, Nov 06 2012 -
Wed, Nov 07 2012 -
Thu, Nov 08 2012 -
Fri, Nov 09 2012 -
Sat, Nov 10 2012 -
Sun, Nov 11 2012 -
Mon, Nov 12 2012 -
Tue, Nov 13 2012 -
Wed, Nov 14 2012 -
Thu, Nov 15 2012 -
Fri, Nov 16 2012 -
Sat, Nov 17 2012 -
Sun, Nov 18 2012 -
Mon, Nov 19 2012 -
Tue, Nov 20 2012 -
Wed, Nov 21 2012 -
Thu, Nov 22 2012 -
Fri, Nov 23 2012 -
Sat, Nov 24 2012 -
Sun, Nov 25 2012 -
Mon, Nov 26 2012 -
Tue, Nov 27 2012 -
Wed, Nov 28 2012 -
Thu, Nov 29 2012 -
Fri, Nov 30 2012 -
Sat, Dec 01 2012 -
Sun, Dec 02 2012 -
Mon, Dec 03 2012 -
Tue, Dec 04 2012 -
Wed, Dec 05 2012 -
Thu, Dec 06 2012 -
Fri, Dec 07 2012 -
Sat, Dec 08 2012 -
Sun, Dec 09 2012 -
Mon, Dec 10 2012 -
Tue, Dec 11 2012 -
Wed, Dec 12 2012 -
Thu, Dec 13 2012 -
Fri, Dec 14 2012 -
Sat, Dec 15 2012 -
Sun, Dec 16 2012 -
Mon, Dec 17 2012 -
Tue, Dec 18 2012 -
Wed, Dec 19 2012 -
Thu, Dec 20 2012 -
Fri, Dec 21 2012 -
Sat, Dec 22 2012 -
Sun, Dec 23 2012 -
Mon, Dec 24 2012 -
Tue, Dec 25 2012 -
Wed, Dec 26 2012 -
Thu, Dec 27 2012 -
Fri, Dec 28 2012 -
Sat, Dec 29 2012 -
Sun, Dec 30 2012 -
Mon, Dec 31 2012 -

easter_gregorian_ds_test
  For the Gregorian calendar,
  for a given year, compute the day and month of Easter.
  easter_gregorian_ds uses Duffett-Smith's algorithm.

  CORRECT:  AD 1997/3/30
  COMPUTED: AD 1997/3/30

  CORRECT:  AD 1998/4/12
  COMPUTED: AD 1998/4/12

  CORRECT:  AD 1999/4/4
  COMPUTED: AD 1999/4/4

  CORRECT:  AD 2000/4/23
  COMPUTED: AD 2000/4/23

  CORRECT:  AD 2001/4/15
  COMPUTED: AD 2001/4/15

  CORRECT:  AD 2002/3/31
  COMPUTED: AD 2002/3/31

  CORRECT:  AD 2003/4/20
  COMPUTED: AD 2003/4/20

  CORRECT:  AD 2004/4/11
  COMPUTED: AD 2004/4/11

  CORRECT:  AD 2005/3/27
  COMPUTED: AD 2005/3/27

  CORRECT:  AD 2006/4/16
  COMPUTED: AD 2006/4/16

easter_gregorian_egr_test
  For the Gregorian calendar,
  for a given year, compute the day and month of Easter.
  easter_gregorian_egr uses Richards's algorithm #1.

  CORRECT:  AD 1997/3/30
  COMPUTED: AD 1997/3/30

  CORRECT:  AD 1998/4/12
  COMPUTED: AD 1998/4/12

  CORRECT:  AD 1999/4/4
  COMPUTED: AD 1999/4/4

  CORRECT:  AD 2000/4/23
  COMPUTED: AD 2000/4/23

  CORRECT:  AD 2001/4/15
  COMPUTED: AD 2001/4/15

  CORRECT:  AD 2002/3/31
  COMPUTED: AD 2002/3/31

  CORRECT:  AD 2003/4/20
  COMPUTED: AD 2003/4/20

  CORRECT:  AD 2004/4/11
  COMPUTED: AD 2004/4/11

  CORRECT:  AD 2005/3/27
  COMPUTED: AD 2005/3/27

  CORRECT:  AD 2006/4/16
  COMPUTED: AD 2006/4/16

easter_gregorian_egr2_test
  For the Gregorian calendar,
  for a given year, compute the day and month of Easter.
  easter_gregorian_egr2 uses Richards's algorithm #2.

  CORRECT:  AD 1997/3/30
  COMPUTED: AD 1997/3/30

  CORRECT:  AD 1998/4/12
  COMPUTED: AD 1998/4/12

  CORRECT:  AD 1999/4/4
  COMPUTED: AD 1999/4/4

  CORRECT:  AD 2000/4/23
  COMPUTED: AD 2000/4/23

  CORRECT:  AD 2001/4/15
  COMPUTED: AD 2001/4/15

  CORRECT:  AD 2002/3/31
  COMPUTED: AD 2002/3/31

  CORRECT:  AD 2003/4/20
  COMPUTED: AD 2003/4/20

  CORRECT:  AD 2004/4/11
  COMPUTED: AD 2004/4/11

  CORRECT:  AD 2005/3/27
  COMPUTED: AD 2005/3/27

  CORRECT:  AD 2006/4/16
  COMPUTED: AD 2006/4/16

easter_gregorian_knuth_test
  For the Gregorian calendar,
  for a given year, compute the day and month of Easter.
  easter_gregorian_knuth uses Knuth's algorithm.

  CORRECT:  AD 1997/3/30
  COMPUTED: AD 1997/3/30

  CORRECT:  AD 1998/4/12
  COMPUTED: AD 1998/4/12

  CORRECT:  AD 1999/4/4
  COMPUTED: AD 1999/4/4

  CORRECT:  AD 2000/4/23
  COMPUTED: AD 2000/4/23

  CORRECT:  AD 2001/4/15
  COMPUTED: AD 2001/4/15

  CORRECT:  AD 2002/3/31
  COMPUTED: AD 2002/3/31

  CORRECT:  AD 2003/4/20
  COMPUTED: AD 2003/4/20

  CORRECT:  AD 2004/4/11
  COMPUTED: AD 2004/4/11

  CORRECT:  AD 2005/3/27
  COMPUTED: AD 2005/3/27

  CORRECT:  AD 2006/4/16
  COMPUTED: AD 2006/4/16

easter_gregorian_stewart_test
  For the Gregorian calendar,
  for a given year, compute the day and month of Easter.
  easter_gregorian_stewart uses Stewart's algorithm.

  CORRECT:  AD 1997/3/30
  COMPUTED: AD 1997/3/30

  CORRECT:  AD 1998/4/12
  COMPUTED: AD 1998/4/12

  CORRECT:  AD 1999/4/4
  COMPUTED: AD 1999/4/4

  CORRECT:  AD 2000/4/23
  COMPUTED: AD 2000/4/23

  CORRECT:  AD 2001/4/15
  COMPUTED: AD 2001/4/15

  CORRECT:  AD 2002/3/31
  COMPUTED: AD 2002/3/31

  CORRECT:  AD 2003/4/20
  COMPUTED: AD 2003/4/20

  CORRECT:  AD 2004/4/11
  COMPUTED: AD 2004/4/11

  CORRECT:  AD 2005/3/27
  COMPUTED: AD 2005/3/27

  CORRECT:  AD 2006/4/16
  COMPUTED: AD 2006/4/16

easter_julian_egr_test
  For the Julian calendar,
  for a given year, compute the day and month of Easter.
  easter_julian_egr uses Richardss algorithm #1.

  CORRECT (Gregorian): AD 1997/4/27
  CORRECT (Julian):    AD 1997.0/4.0/14.0
  COMPUTED             AD 1997.0/4.0/14.0

  CORRECT (Gregorian): AD 1998/4/19
  CORRECT (Julian):    AD 1998.0/4.0/6.0
  COMPUTED             AD 1998.0/4.0/6.0

  CORRECT (Gregorian): AD 1999/4/11
  CORRECT (Julian):    AD 1999.0/3.0/29.0
  COMPUTED             AD 1999.0/3.0/29.0

  CORRECT (Gregorian): AD 2000/4/30
  CORRECT (Julian):    AD 2000.0/4.0/17.0
  COMPUTED             AD 2000.0/4.0/17.0

  CORRECT (Gregorian): AD 2001/4/15
  CORRECT (Julian):    AD 2001.0/4.0/2.0
  COMPUTED             AD 2001.0/4.0/2.0

  CORRECT (Gregorian): AD 2002/5/5
  CORRECT (Julian):    AD 2002.0/4.0/22.0
  COMPUTED             AD 2002.0/4.0/22.0

  CORRECT (Gregorian): AD 2003/4/27
  CORRECT (Julian):    AD 2003.0/4.0/14.0
  COMPUTED             AD 2003.0/4.0/14.0

  CORRECT (Gregorian): AD 2004/4/11
  CORRECT (Julian):    AD 2004.0/3.0/29.0
  COMPUTED             AD 2004.0/3.0/29.0

  CORRECT (Gregorian): AD 2005/5/1
  CORRECT (Julian):    AD 2005.0/4.0/18.0
  COMPUTED             AD 2005.0/4.0/18.0

  CORRECT (Gregorian): AD 2006/4/23
  CORRECT (Julian):    AD 2006.0/4.0/10.0
  COMPUTED             AD 2006.0/4.0/10.0

easter_julian_egr2_test
  For the Julian calendar,
  for a given year, compute the day and month of Easter.
  easter_julian_egr2 uses Richardss algorithm #2.

  CORRECT (Gregorian): AD 1997/4/27
  CORRECT (Julian):    AD 1997.0/4.0/14.0
  COMPUTED             AD 1997.0/4.0/14.0

  CORRECT (Gregorian): AD 1998/4/19
  CORRECT (Julian):    AD 1998.0/4.0/6.0
  COMPUTED             AD 1998.0/4.0/6.0

  CORRECT (Gregorian): AD 1999/4/11
  CORRECT (Julian):    AD 1999.0/3.0/29.0
  COMPUTED             AD 1999.0/3.0/29.0

  CORRECT (Gregorian): AD 2000/4/30
  CORRECT (Julian):    AD 2000.0/4.0/17.0
  COMPUTED             AD 2000.0/4.0/17.0

  CORRECT (Gregorian): AD 2001/4/15
  CORRECT (Julian):    AD 2001.0/4.0/2.0
  COMPUTED             AD 2001.0/4.0/2.0

  CORRECT (Gregorian): AD 2002/5/5
  CORRECT (Julian):    AD 2002.0/4.0/22.0
  COMPUTED             AD 2002.0/4.0/22.0

  CORRECT (Gregorian): AD 2003/4/27
  CORRECT (Julian):    AD 2003.0/4.0/14.0
  COMPUTED             AD 2003.0/4.0/14.0

  CORRECT (Gregorian): AD 2004/4/11
  CORRECT (Julian):    AD 2004.0/3.0/29.0
  COMPUTED             AD 2004.0/3.0/29.0

  CORRECT (Gregorian): AD 2005/5/1
  CORRECT (Julian):    AD 2005.0/4.0/18.0
  COMPUTED             AD 2005.0/4.0/18.0

  CORRECT (Gregorian): AD 2006/4/23
  CORRECT (Julian):    AD 2006.0/4.0/10.0
  COMPUTED             AD 2006.0/4.0/10.0

gps_to_jed_test
  gps_to_jed: GPS => JED

   JED (in)       GPS (C/W/S)                   JED (out)

   2444244.50  0/0/     0.00 GPS   2444244.50
   2449790.50  0/792/172800.00 GPS   2449790.50
   2450138.50  0/842/     0.00 GPS   2450138.50
   2451544.50  1/18/518400.00 GPS   2451544.50
   2459506.98  2/132/213904.00 GPS   2459506.98
   2456282.50  1/695/432000.00 GPS   2456282.50
   2913943.00  65/539/475200.00 GPS   2913943.00

i4_modp_test
  Python version: 3.6.9
  i4_modp factors a number
  into a multiple M and a positive remainder R.

    Number   Divisor  Multiple Remainder

       107        50         2         7
       107       -50        -2         7
      -107        50        -3        43
      -107       -50         3        43

  Repeat using Python % Operator:

       107        50         2         7
       107       -50        -3       -43
      -107        50        -3        43
      -107       -50         2        -7

i4_modp_test
  Normal end of execution.

i4_normal_ab_test
  Python version: 3.6.9
  i4_normal_ab computes integer pseudonormal values with
  mean MU and standard deviation SIGMA.

  MU = 10
  SIGMA = 2

   0             9
   1            11
   2             9
   3             7
   4             9
   5             9
   6             9
   7             7
   8             9
   9             9

i4_normal_ab_test
  Normal end of execution.

i4_wrap_test
  Python version: 3.6.9
  i4_wrap forces an integer to lie within given limits.

  ILO = 4
  IHI = 8

     I  i4_wrap(I)

     -10       5
      -9       6
      -8       7
      -7       8
      -6       4
      -5       5
      -4       6
      -3       7
      -2       8
      -1       4
       0       5
       1       6
       2       7
       3       8
       4       4
       5       5
       6       6
       7       7
       8       8
       9       4
      10       5
      11       6
      12       7
      13       8
      14       4
      15       5
      16       6
      17       7
      18       8
      19       4
      20       5

i4_wrap_test
  Normal end of execution.

jed_ce_values_test:
  Python version: 3.6.9
  jed_ce_values stores of the YMDF CE calendar date for a given JED

         JED         Y       M       D           F

           0.0   -4713       1       1           0.5
           1.0   -4713       1       2           0.5
      259261.0   -4004      10      26           0.5
      347998.5   -3761      10       8             0
      584282.5   -3114       9       6             0
      588465.8   -3102       2      18          0.25
      758325.5   -2637       3       8             0
     1438178.5    -776       7       9             0
     1446389.5    -753       1       1             0
     1448637.5    -747       2      26             0
     1448637.5    -747       2      26             0
     1607708.5    -312       9       1             0
     1607738.5    -312      10       1             0
     1713262.5     -23       8      29             0
     1721422.5      -1      12      31             0
     1721423.5       1       1       1             0
     1721425.5       1       1       3             0
     1721425.5       1       1       3             0
     1724220.5       8       8      29             0
     1741959.5      57       3      24             0
     1749994.5      79       3      24             0
     1825029.5     284       8      29             0
     1862836.5     388       3       3             0
     1922867.5     552       7      11             0
     1936747.5     590       7      12             0
     1940351.5     600       5      24             0
     1948320.5     622       3      19             0
     1948438.5     622       7      15             0
     1948439.5     622       7      16             0
     1952062.5     632       6      16             0
     1952067.5     632       6      21             0
     2114872.5    1078       3      17             0
     2289425.5    1556       2       9             0
     2299160.0    1582      10       4           0.5
     2299161.0    1582      10      15           0.5
     2333269.5    1676       3       4             0
     2361221.0    1752       9      13           0.5
     2361222.0    1752       9      14           0.5
     2372547.5    1783       9      18             0
     2375839.5    1792       9      22             0
     2394646.5    1844       3      21             0
     2394710.5    1844       5      24             0
     2400000.5    1858      11      17             0
     2415020.3    1899      12      31          0.81
     2440587.5    1970       1       1             0
     2444244.5    1980       1       6             0
     2450138.5    1996       2      25             0
     2451544.5    2000       1       1             0
     2453073.8    2004       3       9          0.33
     2456284.5    2012      12      23             0
     2913943.0    3266       1       1           0.5

jed_ce_values_test:
  Normal end of execution.

jed_is_legal_test:
  Python version: 3.6.9
  jed_is_legal returns TRUE if JED is a legal JED value

         JED    jed_is_legal

        -100.0  False
          -1.0  False
           0.0  True
           1.0  True
           1.5  True
         100.0  True
       50000.0  True

jed_is_legal_test:
  Normal end of execution.

jed_mjd_values_test:
  Python version: 3.6.9
  jed_mjd_values stores values of the Modified Julian Date.

    JED         MJD(JED)

  1507231.500000  -892769.0000000000000000
  1660037.500000  -739963.0000000000000000
  1746893.500000  -653107.0000000000000000
  1770641.500000  -629359.0000000000000000
  1892731.500000  -507269.0000000000000000
  1931579.500000  -468421.0000000000000000
  1974851.500000  -425149.0000000000000000
  2091164.500000  -308836.0000000000000000
  2121509.500000  -278491.0000000000000000
  2155779.500000  -244221.0000000000000000
  2174029.500000  -225971.0000000000000000
  2191584.500000  -208416.0000000000000000
  2195261.500000  -204739.0000000000000000
  2229274.500000  -170726.0000000000000000
  2245580.500000  -154420.0000000000000000
  2266100.500000  -133900.0000000000000000
  2288542.500000  -111458.0000000000000000
  2290901.500000  -109099.0000000000000000
  2323140.500000   -76860.0000000000000000
  2334848.500000   -65152.0000000000000000
  2348020.500000   -51980.0000000000000000
  2366978.500000   -33022.0000000000000000
  2385648.500000   -14352.0000000000000000
  2392825.500000    -7175.0000000000000000
  2416223.500000    16223.0000000000000000
  2425848.500000    25848.0000000000000000
  2430266.500000    30266.0000000000000000
  2430833.500000    30833.0000000000000000
  2431004.500000    31004.0000000000000000
  2448698.500000    48698.0000000000000000
  2450138.500000    50138.0000000000000000
  2465737.500000    65737.0000000000000000
  2486076.500000    86076.0000000000000000

jed_mjd_values_test:
  Normal end of execution.

jed_rd_values_test:
  Python version: 3.6.9
  jed_rd_values stores values of the Reingold Dershowitz Date.

    JED         RD(JED)

  1507231.500000  -214193.0000000000000000
  1660037.500000   -61387.0000000000000000
  1746893.500000    25469.0000000000000000
  1770641.500000    49217.0000000000000000
  1892731.500000   171307.0000000000000000
  1931579.500000   210155.0000000000000000
  1974851.500000   253427.0000000000000000
  2091164.500000   369740.0000000000000000
  2121509.500000   400085.0000000000000000
  2155779.500000   434355.0000000000000000
  2174029.500000   452605.0000000000000000
  2191584.500000   470160.0000000000000000
  2195261.500000   473837.0000000000000000
  2229274.500000   507850.0000000000000000
  2245580.500000   524156.0000000000000000
  2266100.500000   544676.0000000000000000
  2288542.500000   567118.0000000000000000
  2290901.500000   569477.0000000000000000
  2323140.500000   601716.0000000000000000
  2334848.500000   613424.0000000000000000
  2348020.500000   626596.0000000000000000
  2366978.500000   645554.0000000000000000
  2385648.500000   664224.0000000000000000
  2392825.500000   671401.0000000000000000
  2416223.500000   694799.0000000000000000
  2425848.500000   704424.0000000000000000
  2430266.500000   708842.0000000000000000
  2430833.500000   709409.0000000000000000
  2431004.500000   709580.0000000000000000
  2448698.500000   727274.0000000000000000
  2450138.500000   728714.0000000000000000
  2465737.500000   744313.0000000000000000
  2486076.500000   764652.0000000000000000

jed_rd_values_test:
  Normal end of execution.

jed_to_datenum_test
  jed_to_datenum: JED => Matlab DATENUM.

  JED (in)    DATENUM             JED (out)

   1721058.50          0.00   1721058.50
   1721422.50        364.00   1721422.50
   1721423.50        365.00   1721423.50
   1721425.50        367.00   1721425.50
   1721425.50        367.00   1721425.50
   1724220.50       3162.00   1724220.50
   1741959.50      20901.00   1741959.50
   1749994.50      28936.00   1749994.50
   1825029.50     103971.00   1825029.50
   1862836.50     141778.00   1862836.50
   1922867.50     201809.00   1922867.50
   1936747.50     215689.00   1936747.50
   1940351.50     219293.00   1940351.50
   1948320.50     227262.00   1948320.50
   1948438.50     227380.00   1948438.50
   1948439.50     227381.00   1948439.50
   1952062.50     231004.00   1952062.50
   1952067.50     231009.00   1952067.50
   2110700.50     389642.00   2110700.50
   2114872.50     393814.00   2114872.50
   2289425.50     568367.00   2289425.50
   2299160.00     578101.50   2299160.00
   2299161.00     578102.50   2299161.00
   2333269.50     612211.00   2333269.50
   2361221.00     640162.50   2361221.00
   2361222.00     640163.50   2361222.00
   2372547.50     651489.00   2372547.50
   2375839.50     654781.00   2375839.50
   2394646.50     673588.00   2394646.50
   2394710.50     673652.00   2394710.50
   2397383.50     676325.00   2397383.50
   2400000.50     678942.00   2400000.50
   2409702.50     688644.00   2409702.50
   2415020.31     693961.81   2415020.31
   2429702.50     708644.00   2429702.50
   2439702.50     718644.00   2439702.50
   2440587.50     719529.00   2440587.50
   2443817.50     722759.00   2443817.50
   2443818.50     722760.00   2443818.50
   2444244.50     723186.00   2444244.50
   2449790.50     728732.00   2449790.50
   2450138.50     729080.00   2450138.50
   2451544.50     730486.00   2451544.50
   2459506.98     738448.48   2459506.98
   2456282.50     735224.00   2456282.50
   2913943.00    1192884.50   2913943.00

jed_to_gps_test
  jed_to_gps: JED -> GPS.

   JED (in)       GPS (C/W/S)                   JED (out)

   2444244.50  0/0/0.00 GPS   2444244.50
   2449790.50  0/792/172800.00 GPS   2449790.50
   2450138.50  0/842/0.00 GPS   2450138.50
   2451544.50  1/18/518400.00 GPS   2451544.50
   2459506.98  2/132/213904.00 GPS   2459506.98
   2456282.50  1/695/432000.00 GPS   2456282.50
   2913943.00  65/539/475200.00 GPS   2913943.00

jed_to_noon_nearest_test
  jed_to_noon_nearest: JED => JED of nearest noon.

      JED          JED(noon nearest)

       0.00  BCE 4713/1/10.50         0.00  BCE 4713/1/10.50
       1.00  BCE 4713/1/20.50         1.00  BCE 4713/1/20.50
  259258.00  BCE 4004/10/230.50    259258.00  BCE 4004/10/230.50
  347998.50  BCE 3761/10/80.00    347998.00  BCE 3761/10/70.50
  584282.50  BCE 3114/9/60.00    584282.00  BCE 3114/9/50.50
  588465.75  BCE 3102/2/180.25    588466.00  BCE 3102/2/180.50
  758325.50  BCE 2637/3/80.00    758326.00  BCE 2637/3/80.50
 1438178.50  BCE 776/7/90.00   1438178.00  BCE 776/7/80.50
 1446389.50  BCE 753/1/10.00   1446390.00  BCE 753/1/10.50
 1448637.50  BCE 747/2/260.00   1448638.00  BCE 747/2/260.50
 1448637.50  BCE 747/2/260.00   1448638.00  BCE 747/2/260.50
 1607708.50  BCE 312/9/10.00   1607708.00  BCE 312/8/310.50
 1607738.50  BCE 312/10/10.00   1607738.00  BCE 312/9/300.50
 1713262.50  BCE 23/8/290.00   1713262.00  BCE 23/8/280.50
 1721058.50  BCE 1/1/20.00   1721058.00  BCE 1/1/10.50
 1721422.50  BCE 1/12/310.00   1721422.00  BCE 1/12/300.50
 1721423.50  CE 1/1/10.00   1721424.00  CE 1/1/10.50
 1721425.50  CE 1/1/30.00   1721426.00  CE 1/1/30.50
 1721425.50  CE 1/1/30.00   1721426.00  CE 1/1/30.50
 1724220.50  CE 8/8/290.00   1724220.00  CE 8/8/280.50
 1741959.50  CE 57/3/240.00   1741960.00  CE 57/3/240.50
 1749994.50  CE 79/3/240.00   1749994.00  CE 79/3/230.50
 1825029.50  CE 284/8/290.00   1825030.00  CE 284/8/290.50
 1862836.50  CE 388/3/30.00   1862836.00  CE 388/3/20.50
 1922867.50  CE 552/7/110.00   1922868.00  CE 552/7/110.50
 1936747.50  CE 590/7/120.00   1936748.00  CE 590/7/120.50
 1940351.50  CE 600/5/240.00   1940352.00  CE 600/5/240.50
 1948320.50  CE 622/3/190.00   1948320.00  CE 622/3/180.50
 1948438.50  CE 622/7/150.00   1948438.00  CE 622/7/140.50
 1948439.50  CE 622/7/160.00   1948440.00  CE 622/7/160.50
 1952062.50  CE 632/6/160.00   1952062.00  CE 632/6/150.50
 1952067.50  CE 632/6/210.00   1952068.00  CE 632/6/210.50
 2110700.50  CE 1066/10/140.00   2110700.00  CE 1066/10/130.50
 2114872.50  CE 1078/3/170.00   2114872.00  CE 1078/3/160.50
 2289425.50  CE 1556/2/90.00   2289426.00  CE 1556/2/90.50
 2299160.00  CE 1582/10/40.50   2299160.00  CE 1582/10/40.50
 2299161.00  CE 1582/10/150.50   2299161.00  CE 1582/10/150.50
 2333269.50  CE 1676/3/40.00   2333270.00  CE 1676/3/40.50
 2361221.00  CE 1752/9/130.50   2361221.00  CE 1752/9/130.50
 2361222.00  CE 1752/9/140.50   2361222.00  CE 1752/9/140.50
 2372547.50  CE 1783/9/180.00   2372548.00  CE 1783/9/180.50
 2375839.50  CE 1792/9/220.00   2375840.00  CE 1792/9/220.50
 2394646.50  CE 1844/3/210.00   2394646.00  CE 1844/3/200.50
 2394710.50  CE 1844/5/240.00   2394710.00  CE 1844/5/230.50
 2397383.50  CE 1851/9/180.00   2397384.00  CE 1851/9/180.50
 2400000.50  CE 1858/11/170.00   2400000.00  CE 1858/11/160.50
 2409702.50  CE 1885/6/100.00   2409702.00  CE 1885/6/90.50
 2415020.31  CE 1899/12/310.81   2415020.00  CE 1899/12/310.50
 2429702.50  CE 1940/3/140.00   2429702.00  CE 1940/3/130.50
 2439702.50  CE 1967/7/310.00   2439702.00  CE 1967/7/300.50
 2440587.50  CE 1970/1/10.00   2440588.00  CE 1970/1/10.50
 2443817.50  CE 1978/11/50.00   2443818.00  CE 1978/11/50.50
 2443818.50  CE 1978/11/60.00   2443818.00  CE 1978/11/50.50
 2444244.50  CE 1980/1/60.00   2444244.00  CE 1980/1/50.50
 2449790.50  CE 1995/3/140.00   2449790.00  CE 1995/3/130.50
 2450138.50  CE 1996/2/250.00   2450138.00  CE 1996/2/240.50
 2451544.50  CE 2000/1/10.00   2451544.00  CE 1999/12/310.50
 2459506.98  CE 2021/10/190.48   2459507.00  CE 2021/10/190.50
 2456282.50  CE 2012/12/210.00   2456282.00  CE 2012/12/200.50
 2913943.00  CE 3266/1/10.50   2913943.00  CE 3266/1/10.50

jed_to_noon_next_test
  jed_to_noon_next: JED => JED of following noon time.

      JED          JED(noon next)

       0.00  BCE 4713/1/10.50         0.00  BCE 4713/1/10.50
       1.00  BCE 4713/1/20.50         1.00  BCE 4713/1/20.50
  259258.00  BCE 4004/10/230.50    259258.00  BCE 4004/10/230.50
  347998.50  BCE 3761/10/80.00    347999.00  BCE 3761/10/80.50
  584282.50  BCE 3114/9/60.00    584283.00  BCE 3114/9/60.50
  588465.75  BCE 3102/2/180.25    588466.00  BCE 3102/2/180.50
  758325.50  BCE 2637/3/80.00    758326.00  BCE 2637/3/80.50
 1438178.50  BCE 776/7/90.00   1438179.00  BCE 776/7/90.50
 1446389.50  BCE 753/1/10.00   1446390.00  BCE 753/1/10.50
 1448637.50  BCE 747/2/260.00   1448638.00  BCE 747/2/260.50
 1448637.50  BCE 747/2/260.00   1448638.00  BCE 747/2/260.50
 1607708.50  BCE 312/9/10.00   1607709.00  BCE 312/9/10.50
 1607738.50  BCE 312/10/10.00   1607739.00  BCE 312/10/10.50
 1713262.50  BCE 23/8/290.00   1713263.00  BCE 23/8/290.50
 1721058.50  BCE 1/1/20.00   1721059.00  BCE 1/1/20.50
 1721422.50  BCE 1/12/310.00   1721423.00  BCE 1/12/310.50
 1721423.50  CE 1/1/10.00   1721424.00  CE 1/1/10.50
 1721425.50  CE 1/1/30.00   1721426.00  CE 1/1/30.50
 1721425.50  CE 1/1/30.00   1721426.00  CE 1/1/30.50
 1724220.50  CE 8/8/290.00   1724221.00  CE 8/8/290.50
 1741959.50  CE 57/3/240.00   1741960.00  CE 57/3/240.50
 1749994.50  CE 79/3/240.00   1749995.00  CE 79/3/240.50
 1825029.50  CE 284/8/290.00   1825030.00  CE 284/8/290.50
 1862836.50  CE 388/3/30.00   1862837.00  CE 388/3/30.50
 1922867.50  CE 552/7/110.00   1922868.00  CE 552/7/110.50
 1936747.50  CE 590/7/120.00   1936748.00  CE 590/7/120.50
 1940351.50  CE 600/5/240.00   1940352.00  CE 600/5/240.50
 1948320.50  CE 622/3/190.00   1948321.00  CE 622/3/190.50
 1948438.50  CE 622/7/150.00   1948439.00  CE 622/7/150.50
 1948439.50  CE 622/7/160.00   1948440.00  CE 622/7/160.50
 1952062.50  CE 632/6/160.00   1952063.00  CE 632/6/160.50
 1952067.50  CE 632/6/210.00   1952068.00  CE 632/6/210.50
 2110700.50  CE 1066/10/140.00   2110701.00  CE 1066/10/140.50
 2114872.50  CE 1078/3/170.00   2114873.00  CE 1078/3/170.50
 2289425.50  CE 1556/2/90.00   2289426.00  CE 1556/2/90.50
 2299160.00  CE 1582/10/40.50   2299160.00  CE 1582/10/40.50
 2299161.00  CE 1582/10/150.50   2299161.00  CE 1582/10/150.50
 2333269.50  CE 1676/3/40.00   2333270.00  CE 1676/3/40.50
 2361221.00  CE 1752/9/130.50   2361221.00  CE 1752/9/130.50
 2361222.00  CE 1752/9/140.50   2361222.00  CE 1752/9/140.50
 2372547.50  CE 1783/9/180.00   2372548.00  CE 1783/9/180.50
 2375839.50  CE 1792/9/220.00   2375840.00  CE 1792/9/220.50
 2394646.50  CE 1844/3/210.00   2394647.00  CE 1844/3/210.50
 2394710.50  CE 1844/5/240.00   2394711.00  CE 1844/5/240.50
 2397383.50  CE 1851/9/180.00   2397384.00  CE 1851/9/180.50
 2400000.50  CE 1858/11/170.00   2400001.00  CE 1858/11/170.50
 2409702.50  CE 1885/6/100.00   2409703.00  CE 1885/6/100.50
 2415020.31  CE 1899/12/310.81   2415021.00  CE 1900/1/10.50
 2429702.50  CE 1940/3/140.00   2429703.00  CE 1940/3/140.50
 2439702.50  CE 1967/7/310.00   2439703.00  CE 1967/7/310.50
 2440587.50  CE 1970/1/10.00   2440588.00  CE 1970/1/10.50
 2443817.50  CE 1978/11/50.00   2443818.00  CE 1978/11/50.50
 2443818.50  CE 1978/11/60.00   2443819.00  CE 1978/11/60.50
 2444244.50  CE 1980/1/60.00   2444245.00  CE 1980/1/60.50
 2449790.50  CE 1995/3/140.00   2449791.00  CE 1995/3/140.50
 2450138.50  CE 1996/2/250.00   2450139.00  CE 1996/2/250.50
 2451544.50  CE 2000/1/10.00   2451545.00  CE 2000/1/10.50
 2459506.98  CE 2021/10/190.48   2459507.00  CE 2021/10/190.50
 2456282.50  CE 2012/12/210.00   2456283.00  CE 2012/12/210.50
 2913943.00  CE 3266/1/10.50   2913943.00  CE 3266/1/10.50

jed_to_weekday_test:
  Python version: 3.6.9
  jed_to_weekday determines the weekday corresponding to a JED.

             JED  W     W
                  True  Computed

  1507231.500000     1         1
  1660037.500000     4         4
  1746893.500000     4         4
  1770641.500000     1         1
  1892731.500000     4         4
  1931579.500000     2         2
  1974851.500000     7         7
  2091164.500000     1         1
  2121509.500000     1         1
  2155779.500000     6         6
  2174029.500000     7         7
  2191584.500000     6         6
  2195261.500000     1         1
  2229274.500000     1         1
  2245580.500000     4         4
  2266100.500000     7         7
  2288542.500000     7         7
  2290901.500000     7         7
  2323140.500000     4         4
  2334848.500000     1         1
  2348020.500000     6         6
  2366978.500000     1         1
  2385648.500000     2         2
  2392825.500000     4         4
  2416223.500000     1         1
  2425848.500000     1         1
  2430266.500000     2         2
  2430833.500000     2         2
  2431004.500000     5         5
  2448698.500000     3         3
  2450138.500000     1         1
  2465737.500000     4         4
  2486076.500000     1         1

jed_to_weekday_test:
  Normal end of execution.

jed_weekday_values_test:
  Python version: 3.6.9
  jed_weekday_values stores values of the weekday for a given JED.

    JED         weekday(JED)

  1507231.500000  1
  1660037.500000  4
  1746893.500000  4
  1770641.500000  1
  1892731.500000  4
  1931579.500000  2
  1974851.500000  7
  2091164.500000  1
  2121509.500000  1
  2155779.500000  6
  2174029.500000  7
  2191584.500000  6
  2195261.500000  1
  2229274.500000  1
  2245580.500000  4
  2266100.500000  7
  2288542.500000  7
  2290901.500000  7
  2323140.500000  4
  2334848.500000  1
  2348020.500000  6
  2366978.500000  1
  2385648.500000  2
  2392825.500000  4
  2416223.500000  1
  2425848.500000  1
  2430266.500000  2
  2430833.500000  2
  2431004.500000  5
  2448698.500000  3
  2450138.500000  1
  2465737.500000  4
  2486076.500000  1

jed_weekday_values_test:
  Normal end of execution.

month_to_month_name_common_test
  Python version: 3.6.9
  month_to_month_name_common names the months.

   1  January
   2  February
   3  March
   4  April
   5  May
   6  June
   7  July
   8  August
   9  September
  10  October
  11  November
  12  December

month_to_month_name_common3_test
  Python version: 3.6.9
  month_to_month_name_common3 names the months.

   1  Jan
   2  Feb
   3  Mar
   4  Apr
   5  May
   6  Jun
   7  Jul
   8  Aug
   9  Sep
  10  Oct
  11  Nov
  12  Dec

r8_mod_test
  Python version: 3.6.9
  r8_mod returns the remainder after division.

        X             Y             (X%Y)    r8_mod(X,Y)

      7.649006     -7.535814     -7.422623      0.113192
     -7.848175     -0.884526     -0.771966     -0.771966
      7.643297      7.450060      0.193237      0.193237
      9.361576      6.636070      2.725505      2.725505
     -7.034517      1.289652      0.703393     -0.586258
      1.763581     -6.254231     -4.490650      1.763581
     -0.976215      2.239401      1.263187     -0.976215
      0.022229     -6.125193     -6.102964      0.022229
      1.169075      2.823188      1.169075      1.169075
      1.337434     -7.196783     -5.859348      1.337434

r8_mod_test
  Normal end of execution.

weekday_to_name_common_test:
  Python version: 3.6.9
  weekday_to_name_common is given a weekday index between 1 and 7
  and returns the corresponding name of the weekday.

  Index    Name

      1  Sunday
      2  Monday
      3  Tuesday
      4  Wednesday
      5  Thursday
      6  Friday
      7  Saturday

weekday_to_name_common2_test:
  Python version: 3.6.9
  weekday_to_name_common2 is given a weekday index between 1 and 7
  and returns the corresponding name of the weekday.

  Index    Name

      1  Su
      2  M 
      3  Tu
      4  W 
      5  Th
      6  F 
      7  Sa

weekday_to_name_common3_test:
  Python version: 3.6.9
  weekday_to_name_common3 is given a weekday index between 1 and 7
  and returns the corresponding name of the weekday.

  Index    Name

      1  Sun
      2  Mon
      3  Tue
      4  Wed
      5  Thu
      6  Fri
      7  Sat

weekday_values_test:
  Python version: 3.6.9
  weekday_values stores values of
  the weekday for a given Y/M/D date

         Y       M       D           W

    -587       7      30       1
    -169      12       8       4
      70       9      26       4
     135      10       3       1
     470       1       7       4
     576       5      18       2
     694      11       7       7
    1013       4      19       1
    1066      10      14       7
    1096       5      18       1
    1190       3      16       6
    1240       3       3       7
    1288       3      26       6
    1298       4      20       1
    1391       6       4       1
    1436       1      25       4
    1492       3      31       7
    1553       9       9       7
    1560       2      24       7
    1648       6      10       4
    1680       6      30       1
    1716       7      24       6
    1768       6      19       1
    1819       8       2       2
    1839       3      27       4
    1903       4      19       1
    1929       8      25       1
    1941       9      29       2
    1943       4      19       2
    1943      10       7       5
    1992       3      17       3
    1996       2      25       1
    2038      11      10       4
    2094       7      18       1

weekday_values_test:
  Normal end of execution.

y_common_to_astronomical_test:
  Python version: 3.6.9
  y_common_to_astronomical converts a common year to an
  "astronomical" year.

  y_common  y_astronomical

       -10              -9
        -9              -8
        -8              -7
        -7              -6
        -6              -5
        -5              -4
        -4              -3
        -3              -2
        -2              -1
        -1               0
         1               1
         2               2
         3               3
         4               4
         5               5
         6               6
         7               7
         8               8
         9               9
        10              10

y_to_s_common_test:
  Python version: 3.6.9
  y_to_s_common converts a year Y to a string S.

      Y  "S"

     563  "CE 563"
    -728  "BCE 728"
   -1711  "BCE 1711"
    -159  "BCE 159"
     212  "CE 212"
    -498  "BCE 498"
     244  "CE 244"
   -2599  "BCE 2599"
     633  "CE 633"
   -1358  "BCE 1358"

year_is_leap_gregorian_test
  Report leap years in the Gregorian calendar.

  Year  Leap?

   774  False
  1054  False
  1638  False
    73  False
   585  False
  1274  False
   386  False
  1501  False
  1246  False
   429  False
  1281  False
   175  False
  1628  True
  1548  True
   875  False
   787  False
  1793  False
   991  False
  2021  False
  1784  True

year_is_leap_gregorian_test
  Normal end of execution.

year_length_days_common_test
  Python version: 3.6.9
  For the Common calendar:
  year_length_days_common determines the length of a year.

  Year  Length

     CE 1580  366
     CE 1581  365
     CE 1582  355
     CE 1583  365
     CE 1584  366
     CE 1585  365
     CE 1750  365
     CE 1751  365
     CE 1752  366
     CE 1753  365
     CE 1754  365
     CE 1000  366
     CE 1100  366
     CE 1200  366
     CE 1300  366
     CE 1400  366
     CE 1500  366
     CE 1600  366
     CE 1700  365
     CE 1800  365
     CE 1900  365
     CE 2000  366

year_to_golden_number_test
  year_to_golden_number determines the golden
  number of a year.

  Year  Golden Number

       BCE 2  19
       BCE 1  1
        CE 1  2
        CE 2  3
        CE 3  4
        CE 4  5
        CE 5  6
        CE 6  7
        CE 7  8
        CE 8  9
        CE 9  10
       CE 10  11
       CE 11  12
       CE 12  13
       CE 13  14
       CE 14  15
       CE 15  16
       CE 16  17
       CE 17  18
       CE 18  19
       CE 19  1
       CE 20  2

ymd_to_weekday_common_test
  ymd_to_weekday_common returns the day of the week
  for Y/M/D dates in the Common calendar.

  YMD                   weekday    weekday
                        Tabulated  Computed

          BCE 587/7/30     Sunday     Sunday
          BCE 169/12/8  Wednesday  Wednesday
            CE 70/9/26  Wednesday  Wednesday
           CE 135/10/3     Sunday     Sunday
            CE 470/1/7  Wednesday  Wednesday
           CE 576/5/18     Monday     Monday
           CE 694/11/7   Saturday   Saturday
          CE 1013/4/19     Sunday     Sunday
         CE 1066/10/14   Saturday   Saturday
          CE 1096/5/18     Sunday     Sunday
          CE 1190/3/16     Friday     Friday
           CE 1240/3/3   Saturday   Saturday
          CE 1288/3/26     Friday     Friday
          CE 1298/4/20     Sunday     Sunday
           CE 1391/6/4     Sunday     Sunday
          CE 1436/1/25  Wednesday  Wednesday
          CE 1492/3/31   Saturday   Saturday
           CE 1553/9/9   Saturday   Saturday
          CE 1560/2/24   Saturday   Saturday
          CE 1648/6/10  Wednesday  Wednesday
          CE 1680/6/30     Sunday     Sunday
          CE 1716/7/24     Friday     Friday
          CE 1768/6/19     Sunday     Sunday
           CE 1819/8/2     Monday     Monday
          CE 1839/3/27  Wednesday  Wednesday
          CE 1903/4/19     Sunday     Sunday
          CE 1929/8/25     Sunday     Sunday
          CE 1941/9/29     Monday     Monday
          CE 1943/4/19     Monday     Monday
          CE 1943/10/7   Thursday   Thursday
          CE 1992/3/17    Tuesday    Tuesday
          CE 1996/2/25     Sunday     Sunday
         CE 2038/11/10  Wednesday  Wednesday
          CE 2094/7/18     Sunday     Sunday

calpak_test:
  Normal end of execution.
Tue Oct 19 11:25:04 2021
