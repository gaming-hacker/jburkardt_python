Tue Oct 19 11:33:43 2021

ellipse_monte_carlo_test():
  Python version: 3.6.9
  Test ellipse_monte_carlo().

ellipse_area1_test
  Python version: 3.6.9
  ellipse_area1 computes the area of an ellipse.

  R = 10

  Matrix A in ellipse definition x*A*x=r^2

  Col:       0             1       
  Row
      0 :           5             1  
      1 :           1             2  
  Area = 104.72

ellipse_area1_test
  Normal end of execution.

ellipse_area2_test
  Python version: 3.6.9
  ellipse_area2 computes the area of an ellipse.

  Ellipse: 5 * x^2 + 2 * xy + 2 * y^2 = 10
  Area = 104.72

ellipse_area2_test
  Normal end of execution.

ellipse_sample_test
  Python version: 3.6.9
  ellipse_sample computes points uniformly distributed
  inside an ellipse x'*A*x=r^2.

  Random points inside ellipse

  Row:       0             1       
  Col
      0 :     1.28299      -1.33197  
      1 :     1.17531      -1.58573  
      2 :   -0.516635      -2.03479  
      3 :   -0.779696      -2.54365  
      4 :    0.731638      -1.40956  
      5 :     1.06716     -0.637445  
      6 :  0.00669391      -3.53896  
      7 :   -0.131582      -3.75443  
      8 :     2.06492      -4.82182  
      9 :    -1.72947       3.04776  

ellipse_sample_test
  Normal end of execution.

ellipse_sample2_test
  Use ellipse_sample to estimate integrals
  in the ellipse x * A * x <= r^2.

         N        1              X               Y               X^2               XY             Y^2             X^3

         1          2.1241      -0.0627402       -0.739181      0.00185317       0.0218334        0.257233    -5.47377e-05
         2          2.1241       0.0561549         0.49728       0.0130331      -0.0275234        0.259646     0.000955173
         4          2.1241        0.146513       0.0894116       0.0690486      0.00455314       0.0221588      0.00197754
         8          2.1241       0.0410411        0.102358       0.0306516      -0.0507093        0.168562      0.00209112
        16          2.1241      0.00142034      -0.0260806       0.0400184      -0.0160585       0.0717242      0.00203818
        32          2.1241      0.00149008      -0.0854268       0.0354443      -0.0274628        0.161799    -0.000854005
        64          2.1241       0.0399975       -0.125319       0.0288053      -0.0232495        0.147996      0.00128309
       128          2.1241       0.0134336      -0.0145283        0.032769      -0.0205504        0.153086     0.000462069
       256          2.1241      -0.0173721       0.0245298       0.0315963      -0.0275271        0.137842    -0.000414788
       512          2.1241      0.00798588      -0.0190177       0.0287919        -0.02068         0.14733     0.000184411
      1024          2.1241      0.00844082      0.00677976       0.0294218      -0.0232018        0.136969     0.000209816
      2048          2.1241      0.00390163      0.00845041       0.0299009      -0.0236992        0.141995      0.00017774
      4096          2.1241      -0.0059939      -0.0027995       0.0295358      -0.0223838        0.141677    -0.000261415
      8192          2.1241      0.00184005     0.000956073       0.0293581      -0.0218289         0.14043     0.000112679
     16384          2.1241     0.000694125    -0.000626313       0.0295017      -0.0224108        0.143884     1.36177e-08
     32768          2.1241     0.000418805    -0.000332089       0.0293872      -0.0223632        0.141438     2.01265e-07
     65536          2.1241     0.000767348     0.000745469       0.0295547       -0.022678        0.142417     5.94353e-05

ellipse_sample2_test:
  Normal end of execution.

r8po_fa_test
  Python version: 3.6.9
  r8po_fa factors a positive definite symmetric
  linear system,

  Matrix order N = 5

  The matrix A:

  Col:       0             1             2             3             4       
  Row
      0 :           1             1             1             1             1  
      1 :           1             2             2             2             2  
      2 :           1             2             3             3             3  
      3 :           1             2             3             4             4  
      4 :           1             2             3             4             5  

  The factor R (a R8UT matrix):

  Col:       0             1             2             3             4       
  Row
      0 :           1             1             1             1             1  
      1 :           0             1             1             1             1  
      2 :           0             0             1             1             1  
      3 :           0             0             0             1             1  
      4 :           0             0             0             0             1  

  The product R' * R:

  Col:       0             1             2             3             4       
  Row
      0 :           1             1             1             1             1  
      1 :           1             2             2             2             2  
      2 :           1             2             3             3             3  
      3 :           1             2             3             4             4  
      4 :           1             2             3             4             5  

r8po_fa_test:
  Normal end of execution.

r8po_sl_test
  Python version: 3.6.9
  r8po_sl solves a linear system with an R8PO matrix
  after it has been factored by r8po_fa.

  Matrix order N = 5

  Matrix A:

  Col:       0             1             2             3             4       
  Row
      0 :           2            -1             0             0             0  
      1 :           0             2            -1             0             0  
      2 :           0             0             2            -1             0  
      3 :           0             0             0             2            -1  
      4 :           0             0             0             0             2  

  Right hand side b:

     0:             0
     1:             0
     2:             0
     3:             0
     4:             6

  Solution x:

     0:             1
     1:             2
     2:             3
     3:             4
     4:             5

r8po_sl_test
  Normal end of execution.

uniform_in_sphere01_map_test
  Python version: 3.6.9
  uniform_in_sphere01_map computes points uniformly distributed
  inside the M-dimensional unit sphere.

  Random points inside unit 3-sphere

  Row:       0             1             2       
  Col
      0 :     0.22431      0.520622      0.168713  
      1 :   -0.332604     -0.179675     -0.368818  
      2 :     0.22165      0.881071     -0.146716  
      3 :  -0.0387888      0.291416      0.727108  
      4 :    0.949945     -0.117379    -0.0114209  
      5 :   -0.518698     -0.198806      0.118375  
      6 :   0.0229162     -0.813562      0.102834  
      7 :    -0.47922     -0.540437      0.189967  
      8 : -0.00200091     0.0293269     -0.198176  
      9 :   -0.342779     -0.019025     -0.543797  

uniform_in_sphere01_map_test
  Normal end of execution.

ellipse_monte_carlo_test():
  Normal end of execution.
Tue Oct 19 11:33:46 2021
