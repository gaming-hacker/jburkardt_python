Tue Oct 19 17:05:31 2021

prob_test():
  Python version: 3.6.9
  Test prob().

angle_cdf_test
  Python version: 3.6.9
  angle_cdf evaluates the Angle CDF

  PDF parameter N =      5
  PDF argument X =             0.5
  CDF value =            0.0107809

angle_cdf_test
  Normal end of execution.

angle_mean_test
  Python version: 3.6.9
  angle_mean computes the Angle mean

  PDF parameter N =      5
  PDF mean =                1.5708

angle_mean_test
  Normal end of execution.

angle_pdf_test
  Python version: 3.6.9
  angle_pdf evaluates the Angle PDF

  PDF parameter N =      5
  PDF argument X =             0.5
  PDF value =            0.0826466

angle_pdf_test
  Normal end of execution.

anglit_cdf_test
  Python version: 3.6.9
  anglit_cdf evaluates the Anglit CDF
  anglit_cdf_inv inverts the Anglit CDF.
  anglit_pdf evaluates the Anglit PDF

       X            PDF           CDF            CDf_inv

        0.17571          0.9073        0.672116         0.17571
         0.5973        0.917438        0.965035          0.5973
       0.434174        0.996562        0.881631        0.434174
       0.206908        0.931754        0.701054        0.206908
      -0.103892        0.546026        0.396854       -0.103892
       0.340192        0.994491        0.814546        0.340192
      -0.587133       -0.379141       0.0387968       -0.587133
       0.381318        0.999741        0.845415        0.381318
       0.177029        0.908407        0.673354        0.177029
      -0.621355       -0.441538       0.0266696       -0.621355

anglit_cdf_test
  Normal end of execution.

anglit_sample_test
  Python version: 3.6.9
  anglit_mean computes the Anglit mean
  anglit_sample samples the Anglit distribution
  anglit_variance computes the Anglit variance.

  PDF mean =                  0
  PDF variance =        0.11685

  Sample size =       1000
  Sample mean =        -0.00010186
  Sample variance =       0.114613
  Sample maximum =        0.765892
  Sample minimum =       -0.742185

anglit_sample_test
  Normal end of execution.

arcsin_cdf_test
  Python version: 3.6.9
  arcsin_cdf evaluates the Arcsin CDF
  arcsin_cdf_inv inverts the Arcsin CDF.
  arcsin_pdf evaluates the Arcsin PDF

  PDF parameter A =              1

       X            PDF           CDF            CDf_inv

       0.204089        0.325154        0.565423        0.204089
       0.183988        0.323838        0.558901        0.183988
       0.954332         1.06547         0.90343        0.954332
      -0.974852         1.42835       0.0715365       -0.974852
      -0.978193         1.53258       0.0665965       -0.978193
      -0.230445        0.327114        0.425982       -0.230445
      -0.619612        0.405538         0.28729       -0.619612
       0.071995        0.319138        0.522937       0.0719951
      -0.945451        0.977113        0.105622       -0.945451
       0.090884        0.319633        0.528969       0.0908844

arcsin_cdf_test
  Normal end of execution.

arcsin_sample_test
  Python version: 3.6.9
  arcsin_mean computes the Arcsin mean
  arcsin_sample samples the Arcsin distribution
  arcsin_variance computes the Arcsin variance.

  PDF parameter A =              1
  PDF mean =                     0
  PDF variance =               0.5

  Sample size =       1000
  Sample mean =         0.00856987
  Sample variance =       0.511929
  Sample maximum =               1
  Sample minimum =       -0.999983

  PDF parameter A =             16
  PDF mean =                     0
  PDF variance =               128

  Sample size =       1000
  Sample mean =           0.711161
  Sample variance =        127.362
  Sample maximum =              16
  Sample minimum =        -15.9996

arcsin_sample_test
  Normal end of execution.

benford_cdf_test
  Python version: 3.6.9
  benford_cdf evaluates the Benford CDF.

       N          CDF(N)     CDF(N) by summing

       1         0.30103         0.30103
       2        0.477121        0.477121
       3         0.60206         0.60206
       4         0.69897         0.69897
       5        0.778151        0.778151
       6        0.845098        0.845098
       7         0.90309         0.90309
       8        0.954243        0.954243
       9               1               1

       N          CDF(N)     CDF(N) by summing

      10       0.0413927       0.0413927
      11       0.0791812       0.0791812
      12        0.113943        0.113943
      13        0.146128        0.146128
      14        0.176091        0.176091
      15         0.20412         0.20412
      16        0.230449        0.230449
      17        0.255273        0.255273
      18        0.278754        0.278754
      19         0.30103         0.30103
      20        0.322219        0.322219
      21        0.342423        0.342423
      22        0.361728        0.361728
      23        0.380211        0.380211
      24         0.39794         0.39794
      25        0.414973        0.414973
      26        0.431364        0.431364
      27        0.447158        0.447158
      28        0.462398        0.462398
      29        0.477121        0.477121
      30        0.491362        0.491362
      31         0.50515         0.50515
      32        0.518514        0.518514
      33        0.531479        0.531479
      34        0.544068        0.544068
      35        0.556303        0.556303
      36        0.568202        0.568202
      37        0.579784        0.579784
      38        0.591065        0.591065
      39         0.60206         0.60206
      40        0.612784        0.612784
      41        0.623249        0.623249
      42        0.633468        0.633468
      43        0.643453        0.643453
      44        0.653213        0.653213
      45        0.662758        0.662758
      46        0.672098        0.672098
      47        0.681241        0.681241
      48        0.690196        0.690196
      49         0.69897         0.69897
      50         0.70757         0.70757
      51        0.716003        0.716003
      52        0.724276        0.724276
      53        0.732394        0.732394
      54        0.740363        0.740363
      55        0.748188        0.748188
      56        0.755875        0.755875
      57        0.763428        0.763428
      58        0.770852        0.770852
      59        0.778151        0.778151
      60         0.78533         0.78533
      61        0.792392        0.792392
      62        0.799341        0.799341
      63         0.80618         0.80618
      64        0.812913        0.812913
      65        0.819544        0.819544
      66        0.826075        0.826075
      67        0.832509        0.832509
      68        0.838849        0.838849
      69        0.845098        0.845098
      70        0.851258        0.851258
      71        0.857332        0.857332
      72        0.863323        0.863323
      73        0.869232        0.869232
      74        0.875061        0.875061
      75        0.880814        0.880814
      76        0.886491        0.886491
      77        0.892095        0.892095
      78        0.897627        0.897627
      79         0.90309         0.90309
      80        0.908485        0.908485
      81        0.913814        0.913814
      82        0.919078        0.919078
      83        0.924279        0.924279
      84        0.929419        0.929419
      85        0.934498        0.934498
      86        0.939519        0.939519
      87        0.944483        0.944483
      88         0.94939         0.94939
      89        0.954243        0.954243
      90        0.959041        0.959041
      91        0.963788        0.963788
      92        0.968483        0.968483
      93        0.973128        0.973128
      94        0.977724        0.977724
      95        0.982271        0.982271
      96        0.986772        0.986772
      97        0.991226        0.991226
      98        0.995635        0.995635
      99               1               1

benford_cdf_test
  Normal end of execution.

benford_pdf_test
  Python version: 3.6.9
  benford_pdf evaluates the Benford PDF.

       N          PDF(N)

       1         0.30103
       2        0.176091
       3        0.124939
       4         0.09691
       5       0.0791812
       6       0.0669468
       7       0.0579919
       8       0.0511525
       9       0.0457575

       N          PDF(N)

      10       0.0413927
      11       0.0377886
      12       0.0347621
      13       0.0321847
      14       0.0299632
      15       0.0280287
      16       0.0263289
      17       0.0248236
      18       0.0234811
      19       0.0222764
      20       0.0211893
      21       0.0202034
      22       0.0193052
      23       0.0184834
      24       0.0177288
      25       0.0170333
      26       0.0163904
      27       0.0157943
      28         0.01524
      29       0.0147233
      30       0.0142404
      31       0.0137883
      32        0.013364
      33        0.012965
      34       0.0125891
      35       0.0122345
      36       0.0118992
      37       0.0115819
      38        0.011281
      39       0.0109954
      40       0.0107239
      41       0.0104654
      42       0.0102192
      43      0.00998422
      44      0.00975984
      45      0.00954532
      46      0.00934003
      47      0.00914338
      48      0.00895484
      49      0.00877392
      50      0.00860017
      51      0.00843317
      52      0.00827253
      53      0.00811789
      54      0.00796893
      55      0.00782534
      56      0.00768683
      57      0.00755314
      58      0.00742402
      59      0.00729924
      60      0.00717858
      61      0.00706185
      62      0.00694886
      63      0.00683942
      64      0.00673338
      65      0.00663058
      66      0.00653087
      67      0.00643411
      68      0.00634018
      69      0.00624895
      70      0.00616031
      71      0.00607415
      72      0.00599036
      73      0.00590886
      74      0.00582954
      75      0.00575233
      76      0.00567713
      77      0.00560388
      78      0.00553249
      79       0.0054629
      80      0.00539503
      81      0.00532883
      82      0.00526424
      83      0.00520119
      84      0.00513964
      85      0.00507953
      86       0.0050208
      87      0.00496342
      88      0.00490733
      89       0.0048525
      90      0.00479888
      91      0.00474644
      92      0.00469512
      93      0.00464491
      94      0.00459575
      95      0.00454763
      96       0.0045005
      97      0.00445434
      98      0.00440912
      99      0.00436481

benford_pdf_test
  Normal end of execution.

bernoulli_cdf_test
  Python version: 3.6.9
  bernoulli_cdf evaluates the Bernoulli CDF
  bernoulli_cdf_inv inverts the Bernoulli CDF.
  bernoulli_pdf evaluates the Bernoulli PDF

  PDF parameter A =           0.75

       X            PDF           CDF            CDf_inv

               1            0.75               1               1
               1            0.75               1               1
               1            0.75               1               1
               0            0.25            0.25               0
               0            0.25            0.25               0
               0            0.25            0.25               0
               1            0.75               1               1
               1            0.75               1               1
               1            0.75               1               1
               1            0.75               1               1

bernoulli_cdf_test
  Normal end of execution.

bernoulli_sample_test
  Python version: 3.6.9
  bernoulli_mean computes the Bernoulli mean
  bernoulli_sample samples the Bernoulli distribution
  bernoulli_variance computes the Bernoulli variance.

  PDF parameter A =           0.75
  PDF mean =                  0.75
  PDF variance =            0.1875

  Sample size =       1000
  Sample mean =              0.745
  Sample variance =       0.189975
  Sample maximum =       1
  Sample minimum =       0

bernoulli_sample_test
  Normal end of execution.

bessel_i0_test:
  Python version: 3.6.9
  bessel_i0 evaluates the Bessel function I0(X)

       X                 Exact F                 I0(X)

         0                         1                         1
       0.2         1.010025027795146         1.010025027795146
       0.4         1.040401782229341         1.040401782229341
       0.6          1.09204536431734         1.092045364317339
       0.8         1.166514922869803         1.166514922869803
         1         1.266065877752008         1.266065877752008
       1.2         1.393725584134064         1.393725584134064
       1.4         1.553395099731217         1.553395099731216
       1.6         1.749980639738909         1.749980639738909
       1.8         1.989559356618051         1.989559356618051
         2         2.279585302336067         2.279585302336067
       2.5         3.289839144050123         3.289839144050123
         3         4.880792585865024         4.880792585865024
       3.5          7.37820343222548          7.37820343222548
         4         11.30192195213633         11.30192195213633
       4.5         17.48117185560928         17.48117185560928
         5         27.23987182360445         27.23987182360445
         6         67.23440697647798         67.23440697647796
         8         427.5641157218048         427.5641157218047
        10         2815.716628466254         2815.716628466254

bessel_i0_test
  Normal end of execution.

bessel_i0_values_test:
  Python version: 3.6.9
  bessel_i0_values stores values of the Bessel I function. of order 0.

      X           I(0,X)

      0.000000                         1
      0.200000         1.010025027795146
      0.400000         1.040401782229341
      0.600000          1.09204536431734
      0.800000         1.166514922869803
      1.000000         1.266065877752008
      1.200000         1.393725584134064
      1.400000         1.553395099731217
      1.600000         1.749980639738909
      1.800000         1.989559356618051
      2.000000         2.279585302336067
      2.500000         3.289839144050123
      3.000000         4.880792585865024
      3.500000          7.37820343222548
      4.000000         11.30192195213633
      4.500000         17.48117185560928
      5.000000         27.23987182360445
      6.000000         67.23440697647798
      8.000000         427.5641157218048
     10.000000         2815.716628466254

bessel_i0_values_test:
  Normal end of execution.

bessel_i1_test:
  Python version: 3.6.9
  bessel_i1 evaluates the Bessel function I1(X)

       X                 Exact F                 I1(X)

  0.000000                         0                         0
  0.200000        0.1005008340281251        0.1005008340281251
  0.400000        0.2040267557335706        0.2040267557335706
  0.600000        0.3137040256049221        0.3137040256049221
  0.800000        0.4328648026206398        0.4328648026206398
  1.000000         0.565159103992485        0.5651591039924849
  1.200000        0.7146779415526431        0.7146779415526432
  1.400000        0.8860919814143274        0.8860919814143273
  1.600000          1.08481063512988          1.08481063512988
  1.800000         1.317167230391899         1.317167230391899
  2.000000         1.590636854637329         1.590636854637329
  2.500000         2.516716245288698         2.516716245288698
  3.000000         3.953370217402609         3.953370217402608
  3.500000         6.205834922258365         6.205834922258364
  4.000000         9.759465153704451         9.759465153704447
  4.500000         15.38922275373592         15.38922275373592
  5.000000         24.33564214245053         24.33564214245052
  6.000000         61.34193677764024         61.34193677764024
  8.000000         399.8731367825601         399.8731367825602
  10.000000         2670.988303701255         2670.988303701254

bessel_i1_test
  Normal end of execution.

bessel_i1_values_test:
  Python version: 3.6.9
  bessel_i1_values stores values of the Bessel I function. of order 1.

      X           I(1,X)

      0.000000                         0
      0.200000        0.1005008340281251
      0.400000        0.2040267557335706
      0.600000        0.3137040256049221
      0.800000        0.4328648026206398
      1.000000         0.565159103992485
      1.200000        0.7146779415526431
      1.400000        0.8860919814143274
      1.600000          1.08481063512988
      1.800000         1.317167230391899
      2.000000         1.590636854637329
      2.500000         2.516716245288698
      3.000000         3.953370217402609
      3.500000         6.205834922258365
      4.000000         9.759465153704451
      4.500000         15.38922275373592
      5.000000         24.33564214245053
      6.000000         61.34193677764024
      8.000000         399.8731367825601
     10.000000         2670.988303701255

bessel_i1_values_test:
  Normal end of execution.

beta_binomial_cdf_test
  Python version: 3.6.9
  beta_binomial_cdf evaluates the Beta Binomial CDF
  beta_binomial_cdf_inv inverts the Beta Binomial CDF.
  beta_binomial_pdf evaluates the Beta Binomial PDF

  PDF parameter A =              2
  PDF parameter B =              3
  PDF parameter C =      4

       X            PDF           CDF            CDf_inv

               1        0.285714             0.5               1
               1        0.285714             0.5               1
               2        0.257143        0.757143               2
               3        0.171429        0.928571               3
               1        0.285714             0.5               1
               3        0.171429        0.928571               3
               1        0.285714             0.5               1
               0        0.214286        0.214286               0
               0        0.214286        0.214286               0
               1        0.285714             0.5               1

beta_binomial_cdf_test
  Normal end of execution.

beta_binomial_sample_test
  Python version: 3.6.9
  beta_binomial_mean computes the Beta Binomial mean
  beta_binomial_sample samples the Beta Binomial distribution
  beta_binomial_variance computes the Beta Binomial variance.

  PDF parameter A =              2
  PDF parameter B =              3
  PDF parameter C =      4
  PDF mean =                   1.6
  PDF variance =              1.44

  Sample size =       1000
  Sample mean =              1.689
  Sample variance =        1.52028
  Sample maximum =       4
  Sample minimum =       0

beta_binomial_sample_test
  Normal end of execution.

beta_cdf_test
  Python version: 3.6.9
  beta_cdf evaluates the Beta CDF
  beta_cdf_inv inverts the Beta CDF.
  beta_pdf evaluates the Beta PDF

  PDF parameter A =             12
  PDF parameter B =             12

        A               B               X               
PDF             CDF             CDf_inv

            12              12        0.547248         3.50487        0.676945        0.547248
            12              12         0.58916         2.71113        0.808274         0.58916
            12              12        0.409271         2.67654        0.187498        0.409271
            12              12        0.264407        0.244456      0.00755495        0.264407
            12              12        0.374713         1.89557        0.108478        0.374713
            12              12        0.417876         2.86337        0.211341        0.417876
            12              12         0.41191         2.73457        0.194638         0.41191
            12              12        0.539247         3.61408        0.648454        0.539247
            12              12        0.606755          2.3154        0.852516        0.606755
            12              12        0.336835         1.12101       0.0518662        0.336835

beta_cdf_test
  Normal end of execution.

beta_cdf_values_test:
  Python version: 3.6.9
  beta_cdf_values stores values of the BETA function.

      A         B         X        beta_cdf(A,B,X)

      0.500000      0.500000      0.010000       0.06376856085851985
      0.500000      0.500000      0.100000        0.2048327646991335
      0.500000      0.500000      1.000000                         1
      1.000000      0.500000      0.000000                         0
      1.000000      0.500000      0.010000      0.005012562893380045
      1.000000      0.500000      0.100000        0.0513167019494862
      1.000000      0.500000      0.500000        0.2928932188134525
      1.000000      1.000000      0.500000                       0.5
      2.000000      2.000000      0.100000                     0.028
      2.000000      2.000000      0.200000                     0.104
      2.000000      2.000000      0.300000                     0.216
      2.000000      2.000000      0.400000                     0.352
      2.000000      2.000000      0.500000                       0.5
      2.000000      2.000000      0.600000                     0.648
      2.000000      2.000000      0.700000                     0.784
      2.000000      2.000000      0.800000                     0.896
      2.000000      2.000000      0.900000                     0.972
      5.500000      5.000000      0.500000        0.4361908850559777
     10.000000      0.500000      0.900000        0.1516409096347099
     10.000000      5.000000      0.500000          0.08978271484375
     10.000000      5.000000      1.000000                         1
     10.000000     10.000000      0.500000                       0.5
     20.000000      5.000000      0.800000        0.4598773297575791
     20.000000     10.000000      0.600000        0.2146816102371739
     20.000000     10.000000      0.800000        0.9507364826957875
     20.000000     20.000000      0.500000                       0.5
     20.000000     20.000000      0.600000        0.8979413687105918
     30.000000     10.000000      0.700000        0.2241297491808366
     30.000000     10.000000      0.800000        0.7586405487192086
     40.000000     20.000000      0.700000        0.7001783247477069
      1.000000      0.500000      0.100000        0.0513167019494862
      1.000000      0.500000      0.200000        0.1055728090000841
      1.000000      0.500000      0.300000        0.1633399734659245
      1.000000      0.500000      0.400000        0.2254033307585166
      1.000000      2.000000      0.200000                      0.36
      1.000000      3.000000      0.200000                     0.488
      1.000000      4.000000      0.200000                    0.5904
      1.000000      5.000000      0.200000                   0.67232
      2.000000      2.000000      0.300000                     0.216
      3.000000      2.000000      0.300000                    0.0837
      4.000000      2.000000      0.300000                   0.03078
      5.000000      2.000000      0.300000                  0.010935
      1.306250     11.756200      0.225609         0.918884684620518
      1.306250     11.756200      0.033557          0.21052977489419
      1.306250     11.756200      0.029522        0.1824130512500673

beta_cdf_values_test:
  Normal end of execution.

beta_inc_test:
  Python version: 3.6.9
  beta_inc evaluates the normalized incomplete Beta
  function beta_inc(A,B,X).

      A           B           X               Exact F     beta_inc(A,B,X)

         0.5         0.5        0.01       0.0637686       0.0637686
         0.5         0.5         0.1        0.204833        0.204833
         0.5         0.5           1               1               1
           1         0.5           0               0               0
           1         0.5        0.01      0.00501256      0.00501256
           1         0.5         0.1       0.0513167       0.0513167
           1         0.5         0.5        0.292893        0.292893
           1           1         0.5             0.5             0.5
           2           2         0.1           0.028           0.028
           2           2         0.2           0.104           0.104
           2           2         0.3           0.216           0.216
           2           2         0.4           0.352           0.352
           2           2         0.5             0.5             0.5
           2           2         0.6           0.648           0.648
           2           2         0.7           0.784           0.784
           2           2         0.8           0.896           0.896
           2           2         0.9           0.972           0.972
         5.5           5         0.5        0.436191        0.436191
          10         0.5         0.9        0.151641        0.151641
          10           5         0.5       0.0897827       0.0897827
          10           5           1               1               1
          10          10         0.5             0.5             0.5
          20           5         0.8        0.459877        0.459877
          20          10         0.6        0.214682        0.214682
          20          10         0.8        0.950736        0.950736
          20          20         0.5             0.5             0.5
          20          20         0.6        0.897941        0.897941
          30          10         0.7         0.22413         0.22413
          30          10         0.8        0.758641        0.758641
          40          20         0.7        0.700178        0.700178
           1         0.5         0.1       0.0513167       0.0513167
           1         0.5         0.2        0.105573        0.105573
           1         0.5         0.3         0.16334         0.16334
           1         0.5         0.4        0.225403        0.225403
           1           2         0.2            0.36            0.36
           1           3         0.2           0.488           0.488
           1           4         0.2          0.5904          0.5904
           1           5         0.2         0.67232         0.67232
           2           2         0.3           0.216           0.216
           3           2         0.3          0.0837          0.0837
           4           2         0.3         0.03078         0.03078
           5           2         0.3        0.010935        0.010935
     1.30625     11.7562    0.225609        0.918885        0.918885
     1.30625     11.7562   0.0335568         0.21053         0.21053
     1.30625     11.7562   0.0295222        0.182413        0.182413

beta_inc_test
  Normal end of execution.

beta_inc_values_test:
  Python version: 3.6.9
  beta_inc_values stores values of the BETA function.

      A         B         X        beta_inc(A,B,X)

      0.500000      0.500000      0.010000       0.06376856085851985
      0.500000      0.500000      0.100000        0.2048327646991335
      0.500000      0.500000      1.000000                         1
      1.000000      0.500000      0.000000                         0
      1.000000      0.500000      0.010000      0.005012562893380045
      1.000000      0.500000      0.100000        0.0513167019494862
      1.000000      0.500000      0.500000        0.2928932188134525
      1.000000      1.000000      0.500000                       0.5
      2.000000      2.000000      0.100000                     0.028
      2.000000      2.000000      0.200000                     0.104
      2.000000      2.000000      0.300000                     0.216
      2.000000      2.000000      0.400000                     0.352
      2.000000      2.000000      0.500000                       0.5
      2.000000      2.000000      0.600000                     0.648
      2.000000      2.000000      0.700000                     0.784
      2.000000      2.000000      0.800000                     0.896
      2.000000      2.000000      0.900000                     0.972
      5.500000      5.000000      0.500000        0.4361908850559777
     10.000000      0.500000      0.900000        0.1516409096347099
     10.000000      5.000000      0.500000          0.08978271484375
     10.000000      5.000000      1.000000                         1
     10.000000     10.000000      0.500000                       0.5
     20.000000      5.000000      0.800000        0.4598773297575791
     20.000000     10.000000      0.600000        0.2146816102371739
     20.000000     10.000000      0.800000        0.9507364826957875
     20.000000     20.000000      0.500000                       0.5
     20.000000     20.000000      0.600000        0.8979413687105918
     30.000000     10.000000      0.700000        0.2241297491808366
     30.000000     10.000000      0.800000        0.7586405487192086
     40.000000     20.000000      0.700000        0.7001783247477069
      1.000000      0.500000      0.100000        0.0513167019494862
      1.000000      0.500000      0.200000        0.1055728090000841
      1.000000      0.500000      0.300000        0.1633399734659245
      1.000000      0.500000      0.400000        0.2254033307585166
      1.000000      2.000000      0.200000                      0.36
      1.000000      3.000000      0.200000                     0.488
      1.000000      4.000000      0.200000                    0.5904
      1.000000      5.000000      0.200000                   0.67232
      2.000000      2.000000      0.300000                     0.216
      3.000000      2.000000      0.300000                    0.0837
      4.000000      2.000000      0.300000                   0.03078
      5.000000      2.000000      0.300000                  0.010935
      1.306250     11.756200      0.225609         0.918884684620518
      1.306250     11.756200      0.033557          0.21052977489419
      1.306250     11.756200      0.029522        0.1824130512500673

beta_inc_values_test:
  Normal end of execution.

beta_sample_test
  Python version: 3.6.9
  beta_mean computes the Beta mean
  beta_sample samples the Beta distribution
  beta_variance computes the Beta variance.

  PDF parameter A =              2
  PDF parameter B =              3
  PDF mean =                   0.4
  PDF variance =              0.04

  Sample size =       1000
  Sample mean =           0.402433
  Sample variance =      0.0412829
  Sample maximum =        0.920221
  Sample minimum =       0.0135483

beta_sample_test
  Normal end of execution.

beta_values_test:
  Python version: 3.6.9
  beta_values stores values of the BETA function.

      X         Y         BETA(X,Y)

      0.200000      1.000000                         5
      0.400000      1.000000                       2.5
      0.600000      1.000000         1.666666666666667
      0.800000      1.000000                      1.25
      1.000000      0.200000                         5
      1.000000      0.400000                       2.5
      1.000000      1.000000                         1
      2.000000      2.000000        0.1666666666666667
      3.000000      3.000000       0.03333333333333333
      4.000000      4.000000      0.007142857142857143
      5.000000      5.000000      0.001587301587301587
      6.000000      2.000000       0.02380952380952381
      6.000000      3.000000      0.005952380952380952
      6.000000      4.000000      0.001984126984126984
      6.000000      5.000000     0.0007936507936507937
      6.000000      6.000000     0.0003607503607503608
      7.000000      7.000000     8.325008325008325e-05

beta_values_test:
  Normal end of execution.

binomial_cdf_test
  Python version: 3.6.9
  binomial_cdf evaluates the Binomial CDF
  binomial_cdf_inv inverts the Binomial CDF.
  binomial_pdf evaluates the Binomial PDF

  PDF parameter A =              5
  PDF parameter B =           0.65

       X            PDF           CDF            CDf_inv

               2        0.181147        0.235169               2
               4        0.312386        0.883971               4
               3        0.336416        0.571585               3
               3        0.336416        0.571585               3
               2        0.181147        0.235169               2
               3        0.336416        0.571585               3
               5        0.116029               1               5
               5        0.116029               1               5
               4        0.312386        0.883971               4
               3        0.336416        0.571585               3

binomial_cdf_test
  Normal end of execution.

binomial_sample_test
  Python version: 3.6.9
  binomial_mean computes the Binomial mean
  binomial_sample samples the Binomial distribution
  binomial_variance computes the Binomial variance.

  PDF parameter A =      5
  PDF parameter B =            0.3
  PDF mean =                   1.5
  PDF variance =              1.05

  Sample size =       1000
  Sample mean =              1.521
  Sample variance =        1.08156
  Sample maximum =       5
  Sample minimum =       0

binomial_sample_test
  Normal end of execution.

birthday_cdf_test
  Python version: 3.6.9
  birthday_cdf evaluates the Birthday CDF
  birthday_cdf_inv inverts the Birthday CDF.
  birthday_pdf evaluates the Birthday PDF

       N            PDF           CDF            CDf_inv

         1               0               0         1
         2      0.00273973      0.00273973         2
         3      0.00546444      0.00820417         3
         4      0.00815175       0.0163559         4
         5       0.0107797       0.0271356         5
         6       0.0133269       0.0404625         6
         7       0.0157732       0.0562357         7
         8       0.0180996       0.0743353         8
         9       0.0202885       0.0946238         9
        10       0.0223243        0.116948        10
        11       0.0241932        0.141141        11
        12       0.0258834        0.167025        12
        13       0.0273855         0.19441        13
        14       0.0286922        0.223103        14
        15       0.0297988        0.252901        15
        16       0.0307027        0.283604        16
        17       0.0314037        0.315008        17
        18       0.0319038        0.346911        18
        19       0.0322071        0.379119        19
        20       0.0323199        0.411438        20
        21         0.03225        0.443688        21
        22        0.032007        0.475695        22
        23       0.0316019        0.507297        23
        24        0.031047        0.538344        24
        25       0.0303554          0.5687        25
        26       0.0295411        0.598241        26
        27       0.0286185        0.626859        27
        28       0.0276022        0.654461        28
        29       0.0265071        0.680969        29
        30       0.0253477        0.706316        30

birthday_cdf_test
  Normal end of execution.

birthday_sample_test
  Python version: 3.6.9
  birthday_sample samples the Birthday distribution.

   N            Mean           PDF

  10            0.02       0.0223243
  11           0.025       0.0241932
  12           0.027       0.0258834
  13           0.031       0.0273855
  14           0.033       0.0286922
  15           0.036       0.0297988
  16           0.037       0.0307027
  17           0.035       0.0314037
  18           0.025       0.0319038
  19           0.039       0.0322071
  20           0.036       0.0323199
  21           0.037         0.03225
  22           0.032        0.032007
  23           0.031       0.0316019
  24           0.029        0.031047
  25           0.026       0.0303554
  26            0.03       0.0295411
  27           0.027       0.0286185
  28           0.032       0.0276022
  29           0.029       0.0265071
  30           0.022       0.0253477
  31           0.022       0.0241384
  32           0.024       0.0228929
  33           0.017       0.0216243
  34           0.019        0.020345
  35           0.019       0.0190664
  36           0.021       0.0177989
  37           0.014       0.0165519
  38           0.021       0.0153338
  39           0.012       0.0141518
  40           0.013       0.0130121

birthday_sample_test
  Normal end of execution.

bradford_cdf_test
  Python version: 3.6.9
  bradford_cdf evaluates the Bradford CDF
  bradford_cdf_inv inverts the Bradford CDF.
  bradford_pdf evaluates the Bradford PDF

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3

       X            PDF           CDF            CDf_inv

        1.08987         1.70448          0.1722         1.08987
        1.37374         1.02019        0.542445         1.37374
        1.34839         1.05813        0.516107         1.34839
        1.20788         1.33283         0.34962         1.20788
        1.50072        0.864871        0.661586         1.50072
        1.16099         1.45927         0.28424         1.16099
        1.00594         2.12614       0.0127446         1.00594
        1.14817         1.49811        0.265292         1.14817
        1.75499        0.662809        0.853532         1.75499
        1.29583         1.14652        0.458234         1.29583

bradford_cdf_test
  Normal end of execution.

bradford_sample_test
  Python version: 3.6.9
  bradford_mean computes the Bradford mean
  bradford_sample samples the Bradford distribution
  bradford_variance computes the Bradford variance.

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3
  PDF mean =               1.38801
  PDF variance =         0.0807807

  Sample size =       1000
  Sample mean =            1.39136
  Sample variance =       0.081761
  Sample maximum =         1.99993
  Sample minimum =         1.00004

bradford_sample_test
  Normal end of execution.

buffon_box_pdf_test
  Python version: 3.6.9
  buffon_box_pdf evaluates the Buffon-Laplace PDF,
  the probability that, on a grid of cells of width A
  and height B, a needle of length L, dropped at random,
  will cross at least one grid line.

      A         B         L        PDF

         1         1         0               0
         1         1       0.2        0.241916
         1         1       0.4        0.458366
         1         1       0.6        0.649352
         1         1       0.8        0.814873
         1         1         1         0.95493

         1         2         0               0
         1         2       0.2         0.18462
         1         2       0.4        0.356507
         1         2       0.6        0.515662
         1         2       0.8        0.662085
         1         2         1        0.795775

         1         3         0               0
         1         3       0.2        0.165521
         1         3       0.4        0.322554
         1         3       0.6        0.471099
         1         3       0.8        0.611155
         1         3         1        0.742723

         1         4         0               0
         1         4       0.2        0.155972
         1         4       0.4        0.305577
         1         4       0.6        0.448817
         1         4       0.8         0.58569
         1         4         1        0.716197

         1         5         0               0
         1         5       0.2        0.150242
         1         5       0.4        0.295392
         1         5       0.6        0.435448
         1         5       0.8        0.570411
         1         5         1        0.700282

         2         1         0               0
         2         1       0.2         0.18462
         2         1       0.4        0.356507
         2         1       0.6        0.515662
         2         1       0.8        0.662085
         2         1         1        0.795775

         2         2         0               0
         2         2       0.4        0.241916
         2         2       0.8        0.458366
         2         2       1.2        0.649352
         2         2       1.6        0.814873
         2         2         2         0.95493

         2         3         0               0
         2         3       0.4        0.203718
         2         3       0.8         0.39046
         2         3       1.2        0.560225
         2         3       1.6        0.713014
         2         3         2        0.848826

         2         4         0               0
         2         4       0.4         0.18462
         2         4       0.8        0.356507
         2         4       1.2        0.515662
         2         4       1.6        0.662085
         2         4         2        0.795775

         2         5         0               0
         2         5       0.4        0.173161
         2         5       0.8        0.336135
         2         5       1.2        0.488924
         2         5       1.6        0.631527
         2         5         2        0.763944

         3         1         0               0
         3         1       0.2        0.165521
         3         1       0.4        0.322554
         3         1       0.6        0.471099
         3         1       0.8        0.611155
         3         1         1        0.742723

         3         2         0               0
         3         2       0.4        0.203718
         3         2       0.8         0.39046
         3         2       1.2        0.560225
         3         2       1.6        0.713014
         3         2         2        0.848826

         3         3         0               0
         3         3       0.6        0.241916
         3         3       1.2        0.458366
         3         3       1.8        0.649352
         3         3       2.4        0.814873
         3         3         3         0.95493

         3         4         0               0
         3         4       0.6        0.213268
         3         4       1.2        0.407437
         3         4       1.8        0.582507
         3         4       2.4        0.738479
         3         4         3        0.875352

         3         5         0               0
         3         5       0.6        0.196079
         3         5       1.2        0.376879
         3         5       1.8          0.5424
         3         5       2.4        0.692642
         3         5         3        0.827606

         4         1         0               0
         4         1       0.2        0.155972
         4         1       0.4        0.305577
         4         1       0.6        0.448817
         4         1       0.8         0.58569
         4         1         1        0.716197

         4         2         0               0
         4         2       0.4         0.18462
         4         2       0.8        0.356507
         4         2       1.2        0.515662
         4         2       1.6        0.662085
         4         2         2        0.795775

         4         3         0               0
         4         3       0.6        0.213268
         4         3       1.2        0.407437
         4         3       1.8        0.582507
         4         3       2.4        0.738479
         4         3         3        0.875352

         4         4         0               0
         4         4       0.8        0.241916
         4         4       1.6        0.458366
         4         4       2.4        0.649352
         4         4       3.2        0.814873
         4         4         4         0.95493

         4         5         0               0
         4         5       0.8        0.218997
         4         5       1.6        0.417623
         4         5       2.4        0.595876
         4         5       3.2        0.753758
         4         5         4        0.891268

         5         1         0               0
         5         1       0.2        0.150242
         5         1       0.4        0.295392
         5         1       0.6        0.435448
         5         1       0.8        0.570411
         5         1         1        0.700282

         5         2         0               0
         5         2       0.4        0.173161
         5         2       0.8        0.336135
         5         2       1.2        0.488924
         5         2       1.6        0.631527
         5         2         2        0.763944

         5         3         0               0
         5         3       0.6        0.196079
         5         3       1.2        0.376879
         5         3       1.8          0.5424
         5         3       2.4        0.692642
         5         3         3        0.827606

         5         4         0               0
         5         4       0.8        0.218997
         5         4       1.6        0.417623
         5         4       2.4        0.595876
         5         4       3.2        0.753758
         5         4         4        0.891268

         5         5         0               0
         5         5         1        0.241916
         5         5         2        0.458366
         5         5         3        0.649352
         5         5         4        0.814873
         5         5         5         0.95493


buffon_box_pdf_test
  Normal end of execution.

buffon_box_sample_test
  Python version: 3.6.9
  buffon_box_sample simulates a Buffon-Laplace needle dropping
  experiment.  On a grid of cells of width A and height B
  a needle of length L is dropped at random.  We count
  the number of times it crosses at least one grid line,
  and use this to estimate the value of PI.

  Cell width A =    1
  Cell height B =   1
  Needle length L = 1

    Trials      Hits          Est(Pi)         Err

        10         8            3.75        0.608407
       100        99          3.0303         0.11129
     10000      9554         3.14005       0.0015466
   1000000    954670         3.14245     0.000854475

buffon_box_sample_test
  Normal end of execution.

buffon_pdf_test
  Python version: 3.6.9
  buffon_pdf evaluates the Buffon PDF,
  the probability that, on a grid of cells of width A,
  a needle of length L, dropped at random,
  will cross at least one grid line.

      A         L        PDF

         1         0               0
         1       0.2        0.127324
         1       0.4        0.254648
         1       0.6        0.381972
         1       0.8        0.509296
         1         1         0.63662

         2         0               0
         2       0.4        0.127324
         2       0.8        0.254648
         2       1.2        0.381972
         2       1.6        0.509296
         2         2         0.63662

         3         0               0
         3       0.6        0.127324
         3       1.2        0.254648
         3       1.8        0.381972
         3       2.4        0.509296
         3         3         0.63662

         4         0               0
         4       0.8        0.127324
         4       1.6        0.254648
         4       2.4        0.381972
         4       3.2        0.509296
         4         4         0.63662

         5         0               0
         5         1        0.127324
         5         2        0.254648
         5         3        0.381972
         5         4        0.509296
         5         5         0.63662


buffon_pdf_test
  Normal end of execution.

buffon_sample_test
  Python version: 3.6.9
  buffon_sample simulates a Buffon-Laplace
  needle dropping experiment.  On a grid of cells of 
  width A, a needle of length L is dropped
  at random.  We count the number of times it crosses
  at least one grid line, and use this to estimate 
  the value of PI.

  Cell width A =    1
  Needle length L = 1

    Trials      Hits          Est(Pi)     Err

        10         8             2.5        0.641593
       100        68         2.94118        0.200416
     10000      6344         3.15259       0.0109925
   1000000    636800          3.1407     0.000889136

buffon_sample_test
  Normal end of execution.

burr_cdf_test
  Python version: 3.6.9
  burr_cdf evaluates the Burr CDF
  burr_cdf_inv inverts the Burr CDF.
  burr_pdf evaluates the Burr PDF

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3
  PDF parameter D =              2

       X            PDF           CDF            CDf_inv

        3.65529          0.1419        0.910368         3.65529
        3.01545        0.367782        0.755737         3.01545
        3.36445        0.224716        0.857852         3.36445
        1.98659        0.519562        0.202862         1.98659
        2.76667        0.485613        0.649562         2.76667
        3.33478        0.235065        0.851033         3.33478
          1.706        0.328539       0.0824927           1.706
        3.58693        0.158455        0.900111         3.58693
        1.63565        0.275627       0.0612429         1.63565
        3.18083        0.294511        0.810388         3.18083

burr_Df_test
  Normal end of execution.

burr_sample_test
  Python version: 3.6.9
  burr_mean computes the Burr mean
  burr_variance computes the Burr variance
  burr_sample Burr samples the distribution

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3
  PDF parameter D =              2
  PDF mean =               2.61227
  PDF variance =           0.62513

  Sample size =       1000
  Sample mean =           2.636699
  Sample variance =       0.687808
  Sample maximum =       10.990195
  Sample minimum =        1.169004

burr_sample_test
  Normal end of execution.

cardioid_cdf_test
  Python version: 3.6.9
  cardioid_cdf evaluates the Cardioid CDF
  cardioid_cdf_inv inverts the Cardioid CDF.
  cardioid_pdf evaluates the Cardioid PDF

  PDF parameter A = 0
  PDF parameter B = 0.25

       X            PDF           CDF            CDf_inv

      -2.47798     0.0964661     0.0566003      -2.47798
       2.41764      0.099536      0.937488       2.41764
      -1.47129       0.16706      0.186653      -1.47129
      -1.82748      0.138952      0.132177      -1.82748
      0.130815      0.238052        0.5312      0.130815
       1.65775      0.152244      0.843116       1.65775
     -0.634773      0.223231      0.351784     -0.634773
       -1.6454      0.153224       0.15877       -1.6454
     -0.188905      0.237317      0.454992     -0.188905
       2.61613     0.0903132      0.956287       2.61612

cardioid_cdf_test
  Normal end of execution.

cardioid_sample_test
  Python version: 3.6.9
  cardioid_mean computes the Cardioid mean
  cardioid_sample samples the Cardioid distribution
  cardioid_variance computes the Cardioid variance.

  PDF parameter A = 0
  PDF parameter B = 0.25

  PDF mean =                    0
  PDF variance =                0

  Sample size =       1000
  Sample mean =          -0.108424
  Sample variance =        2.13705
  Sample maximum =         3.14094
  Sample minimum =        -3.13799

cardioid_sample_test
  Normal end of execution.

cauchy_cdf_test
  Python version: 3.6.9
  cauchy_cdf evaluates the Cauchy CDF
  cauchy_cdf_inv inverts the Cauchy CDF.
  cauchy_pdf evaluates the Cauchy PDF

  PDF parameter A =              2
  PDF parameter B =              3

       X            PDF           CDF            CDf_inv

        1.59214        0.104178        0.456989         1.59214
        52.6629     0.000370741        0.981173         52.6629
        3.73532       0.0795025        0.666926         3.73532
        2.91935       0.0969945        0.594653         2.91935
       -11.7677       0.0048095       0.0682924        -11.7677
       -12.6368      0.00427766       0.0643504        -12.6368
       0.100412       0.0757374        0.320323        0.100412
        3.14165       0.0926814        0.615746         3.14165
         2.5378          0.1028        0.556462          2.5378
        2.67833        0.100943        0.570783         2.67833

cauchy_cdf_test
  Normal end of execution.

cauchy_sample_test
  Python version: 3.6.9
  cauchy_mean computes the Cauchy mean
  cauchy_variance computes the Cauchy variance
  cauchy_sample samples the Cauchy distribution.

  PDF parameter A =              2
  PDF parameter B =              3
  PDF mean =                     2
  PDF variance =      1.79769e+308

  Sample size =       1000
  Sample mean =            3.97206
  Sample variance =        4849.32
  Sample maximum =         1684.62
  Sample minimum =        -798.367

cauchy_sample_test
  Normal end of execution.

chebyshev1_cdf_test
  Python version: 3.6.9
  chebyshev1_cdf evaluates the Chebyshev1 CDF
  chebyshev1_cdf_inv inverts the Chebyshev1 CDF.
  chebyshev1_pdf evaluates the Chebyshev1 PDF

       X            PDF           CDF            CDf_inv

      -0.916677        0.796515        0.130861       -0.916677
       0.886009        0.686505        0.846533        0.886009
       0.765213        0.494441        0.777367        0.765213
       0.360207        0.341215        0.617294        0.360207
      -0.435257        0.353557        0.356658       -0.435257
       0.165998        0.322788        0.553085        0.165998
      -0.441859        0.354827        0.354319       -0.441859
      -0.937635        0.915677        0.113011       -0.937635
       0.912572        0.778422        0.865907        0.912572
      -0.936893        0.910457        0.113688       -0.936893

chebyshev1_cdf_test
  Normal end of execution.

chebyshev1_sample_test
  Python version: 3.6.9
  chebyshev1_mean computes the Chebyshev1 mean
  chebyshev1_sample samples the Chebyshev1 distribution
  chebyshev1_variance computes the Chebyshev1 variance.

  PDF mean =                         0
  PDF variance =                   0.5

  Sample size =       1000
  Sample mean =         -0.0109385
  Sample variance =       0.518737
  Sample maximum =        0.999985
  Sample minimum =       -0.999933

chebyshev1_sample_test
  Normal end of execution.

chi_cdf_test
  Python version: 3.6.9
  chi_cdf evaluates the Chi CDF.
  chi_cdf_inv inverts the Chi CDF.
  chi_pdf evaluates the Chi PDF.

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3

       X            PDF           CDF            CDf_inv

        3.37177        0.277725        0.295946         3.37207
        4.76979        0.239882        0.686026         4.76953
        3.87295        0.293381        0.440659         3.87305
        2.91878        0.231757        0.179505         2.91895
        2.04434       0.0949134       0.0349149         2.04492
         5.0435        0.211243        0.747828         5.04395
         4.0513        0.289992        0.492747         4.05127
        6.55725       0.0648679         0.94785         6.55859
        2.99473        0.241332        0.197475         2.99512
        4.26169        0.280672        0.552873         4.26172

chi_cdf_test
  Normal end of execution.

chi_sample_test
  Python version: 3.6.9
  chi_mean computes the Chi mean
  chi_variance computes the Chi variance
  chi_sample samples the Chi distribution.

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3
  PDF mean =               4.19154
  PDF variance =           1.81408

  Sample size =       1000
  Sample mean =            4.22295
  Sample variance =         1.7682
  Sample maximum =         9.64062
  Sample minimum =         1.29266

chi_sample_test
  Normal end of execution.

chi_square_cdf_test
  Python version: 3.6.9
  chi_square_cdf evaluates the Chi Square CDF
  chi_square_cdf_inv inverts the Chi Square CDF.
  chi_square_pdf evaluates the Chi Square PDF

  PDF parameter A =              4

       X            PDF           CDF            CDf_inv

         2.8205        0.172109        0.588299         3.95814
        2.88487        0.170461        0.577273          3.8783
        1.46662        0.176111        0.832537         6.45789
        6.55365       0.0618466        0.161441         1.43232
        1.14812        0.161665        0.886564         7.46113
        4.32222        0.124477        0.364151         2.54919
        4.04703        0.133744        0.399678         2.75099
         3.3974        0.155364        0.493649         3.31632
         2.1403        0.183508        0.709972         4.97349
        8.03795       0.0361132       0.0901978        0.999959

chi_square_cdf_test
  Normal end of execution.

chi_square_sample_test
  Python version: 3.6.9
  chi_square_mean computes the Chi Square mean
  chi_square_sample samples the Chi Square distribution
  chi_square_variance computes the Chi Square variance.

  PDF parameter A =             10
  PDF mean =                    10
  PDF variance =                20

  Sample size =       1000
  Sample mean =            10.0783
  Sample variance =        19.5461
  Sample maximum =         30.6549
  Sample minimum =         1.37813

chi_square_sample_test
  Normal end of execution.

chi_square_noncentral_sample_test
  Python version: 3.6.9
  chi_square_noncentral_mean computes the Chi Square Noncentral mean.
  chi_square_noncentral_sample samples the Chi Square Noncentral PDF.
  chi_square_noncentral_variance computes the Chi Square Noncentral variance.

  PDF parameter A =              3
  PDF parameter B =              2
  PDF mean =                     5
  PDF variance =                14
  Sample size =       1000
  Sample mean =            4.83109
  Sample variance =        12.3753
  Sample maximum =         23.8931
  Sample minimum =       0.0809717

chi_square_noncentral_sample_test
  Normal end of execution.

circular_normal_sample_test
  Python version: 3.6.9
  circular_normal_mean computes the Circular Normal mean
  circular_normal_sample samples the Circular Normal distribution
  circular_normal_variance computes the Circular Normal variance.

  PDF means =                            1               5
  PDF variances =                   0.5625          0.5625

  Sample size =       1000
  Sample mean =            1.00808          4.9792
  Sample variance =       0.514381        0.555243
  Sample maximum =         3.16289         7.18403
  Sample minimum =        -1.55877         2.31459

circular_normal_sample_test
  Normal end of execution.

circular_normal_01_sample_test
  Python version: 3.6.9
  circular_normal_01_mean computes the Circular Normal 01 mean
  circular_normal_01_sample samples the Circular Normal 01 distribution
  circular_normal_01_variance computes the Circular Normal 01 variance.

  PDF means =                            0               0
  PDF variances =                        1               1

  Sample size =       1000
  Sample mean =         -0.0061213      -0.0311657
  Sample variance =        1.01282         0.93777
  Sample maximum =         3.07582         3.28451
  Sample minimum =        -3.61977         -3.4246

circular_normal_01_sample_test
  Normal end of execution.

cosine_cdf_test
  Python version: 3.6.9
  cosine_cdf evaluates the Cosine CDF.
  cosine_cdf_inv inverts the Cosine CDF.
  cosine_pdf evaluates the Cosine PDF.

  PDF parameter A = 2
  PDF parameter B = 1

       X            PDF           CDF            CDf_inv

        2.60439        0.130961        0.686633  2.60439
       0.709922       0.0440933        0.141753  0.709922
        2.46403        0.142325        0.645083  2.46403
        2.11505        0.158103        0.536581  2.11505
        1.71698        0.152823        0.410511  1.71698
        1.61842        0.147708        0.380003  1.61842
        2.96411       0.0907423        0.784195  2.96411
        1.64949        0.149478        0.389563  1.64949
        2.11505        0.158103        0.536581  2.11505
         3.7426      -0.0272094        0.934156  3.7426

cosine_cdf_test
  Normal end of execution.

cosine_sample_test
  Python version: 3.6.9
  cosine_mean computes the Cosine mean
  cosine_sample samples the Cosine distribution
  cosine_variance computes the Cosine variance.

  PDF parameter A = 2
  PDF parameter B = 1
  PDF mean =        2
  PDF variance =    1.28987

  Sample size =       1000
  Sample mean =     2.01969
  Sample variance = 1.27971
  Sample maximum =  4.84707
  Sample minimum =  -0.699806

cosine_sample_test
  Normal end of execution.

coupon_sample_test
  Python version: 3.6.9
  coupon_sample samples the coupon PDF.


  Number of coupon types is 5
  Expected wait is about 8.04719

       0      12
       1       6
       2      10
       3      16
       4      10
       5       9
       6      23
       7       7
       8      21
       9      11

  Average wait was 12.5

  Number of coupon types is 10
  Expected wait is about 23.0259

       0      16
       1      29
       2      35
       3      25
       4      46
       5      16
       6      46
       7      34
       8      38
       9      19

  Average wait was 30.4

  Number of coupon types is 15
  Expected wait is about 40.6208

       0      68
       1      58
       2      63
       3      40
       4      41
       5      54
       6      39
       7      38
       8      31
       9      74

  Average wait was 50.6

  Number of coupon types is 20
  Expected wait is about 59.9146

       0      42
       1      56
       2      77
       3      74
       4      73
       5      93
       6      35
       7      70
       8      68
       9      57

  Average wait was 64.5

  Number of coupon types is 25
  Expected wait is about 80.4719

       0     124
       1      81
       2      91
       3     128
       4      96
       5      75
       6     119
       7     143
       8      79
       9     118

  Average wait was 105.4

coupon_sample_test
  Normal end of execution.

coupon_complete_pdf_test
  Python version: 3.6.9
  coupon_complete_pdf evaluates the Coupon Complete PDF.


  Number of coupon types is 2

   BOX_NUM      PDF             CDF

         1               0               0
         2             0.5             0.5
         3            0.25            0.75
         4           0.125           0.875
         5          0.0625          0.9375
         6         0.03125         0.96875
         7        0.015625        0.984375
         8       0.0078125        0.992188
         9      0.00390625        0.996094
        10      0.00195312        0.998047
        11     0.000976562        0.999023
        12     0.000488281        0.999512
        13     0.000244141        0.999756
        14      0.00012207        0.999878
        15     6.10352e-05        0.999939
        16     3.05176e-05        0.999969
        17     1.52588e-05        0.999985
        18     7.62939e-06        0.999992
        19      3.8147e-06        0.999996
        20     1.90735e-06        0.999998

  Number of coupon types is 3

   BOX_NUM      PDF             CDF

         1               0               0
         2               0               0
         3        0.222222        0.222222
         4        0.222222        0.444444
         5         0.17284        0.617284
         6        0.123457        0.740741
         7        0.085048        0.825789
         8       0.0576132        0.883402
         9       0.0387136        0.922116
        10       0.0259107        0.948026
        11       0.0173077        0.965334
        12       0.0115497        0.976884
        13      0.00770358        0.984587
        14      0.00513698        0.989724
        15      0.00342507        0.993149
        16      0.00228352        0.995433
        17      0.00152239        0.996955
        18      0.00101494         0.99797
        19     0.000676634        0.998647
        20     0.000451091        0.999098

  Number of coupon types is 4

   BOX_NUM      PDF             CDF

         1               0               0
         2               0               0
         3               0               0
         4         0.09375         0.09375
         5        0.140625        0.234375
         6        0.146484        0.380859
         7        0.131836        0.512695
         8        0.110229        0.622925
         9       0.0884399        0.711365
        10       0.0692368        0.780602
        11       0.0533867        0.833988
        12        0.040771        0.874759
        13       0.0309441        0.905703
        14       0.0233911        0.929094
        15       0.0176349        0.946729
        16       0.0132719        0.960001
        17      0.00997682        0.969978
        18      0.00749406        0.977472
        19      0.00562627        0.983098
        20      0.00422256        0.987321

coupon_complete_pdf_test:
  Normal end of execution.

deranged_cdf_test
  Python version: 3.6.9
  deranged_cdf evaluates the Deranged CDF
  deranged_cdf_inv inverts the Deranged CDF.
  deranged_pdf evaluates the Deranged PDF

  PDF parameter A =              7

       X            PDF           CDF            CDf_inv

               0        0.367857        0.367857               0
               1        0.368056        0.735913               1
               2        0.183333        0.919246               2
               3          0.0625        0.981746               3
               4       0.0138889        0.995635               4
               5      0.00416667        0.999802               5
               6               0        0.999802               5
               7     0.000198413               1               7

deranged_cdf_test
  Normal end of execution.

deranged_sample_test
  Python version: 3.6.9
  deranged_mean computes the Deranged mean.
  deranged_variance computes the Deranged variance.
  deranged_sample samples the Deranged distribution.

  PDF parameter A =              7
  PDF mean =                     1
  PDF variance =                 1

  Sample size =       1000
  Sample mean =              0.945
  Sample variance =        1.01198
  Sample maximum =       7
  Sample minimum =       0

deranged_sample_test
  Normal end of execution.

digamma_test:
  Python version: 3.6.9
  digamma() computes the Digamma or Psi function.
  Compare the result to tabulated values.

          X         
FX                        FX2
                    
(Tabulated)               (DIGAMMA)               DIFF

           0.1        -10.42375494041108        -10.42375494041114   5.862e-14
           0.2        -5.289039896592188        -5.289039896592243   5.507e-14
           0.3        -3.502524222200133        -3.502524222200181   4.796e-14
           0.4        -2.561384544585116        -2.561384544585158   4.174e-14
           0.5        -1.963510026021423        -1.963510026021564   1.406e-13
           0.6         -1.54061921389319        -1.540619213893313   1.232e-13
           0.7        -1.220023553697935        -1.220023553698041   1.064e-13
           0.8       -0.9650085667061385       -0.9650085667062314   9.281e-14
           0.9       -0.7549269499470515       -0.7549269499471327   8.127e-14
             1       -0.5772156649015329       -0.5772156649016036   7.072e-14
           1.1       -0.4237549404110768       -0.4237549404111393   6.251e-14
           1.2       -0.2890398965921883       -0.2890398965922431   5.479e-14
           1.3       -0.1691908888667997       -0.1691908888668481   4.841e-14
           1.4      -0.06138454458511615      -0.06138454458515841   4.226e-14
           1.5       0.03648997397857652       0.03648997397843547   1.411e-13
           1.6        0.1260474527734763        0.1260474527733536   1.227e-13
           1.7         0.208547874873494        0.2085478748733869   1.071e-13
           1.8        0.2849914332938615        0.2849914332937686   9.293e-14
           1.9        0.3561841611640597        0.3561841611639783   8.143e-14
             2        0.4227843350984671        0.4227843350983961   7.094e-14

digamma_test:
  Normal end of execution.

dipole_cdf_test
  Python version: 3.6.9
  dipole_cdf evaluates the Dipole CDF.
  dipole_cdf_inv inverts the Dipole CDF.
  dipole_pdf evaluates the Dipole PDF.

  PDF parameter A =              0
  PDF parameter B =              1

       X            PDF           CDF            CDf_inv

         0.7616        0.448995        0.860613        0.761719
      -0.740659        0.461306        0.144836       -0.740723
       0.337943        0.621215         0.70028        0.337891
        1.96061      -0.0102651        0.978705         1.95898
       -0.80474          0.4231        0.128833       -0.804688
      -0.475606        0.587349        0.235226       -0.475586
       0.472808        0.588274        0.763587        0.472656
       0.762422        0.448508        0.860822        0.762695
      0.0378105        0.636617        0.524048       0.0378418
      -0.230446        0.632865        0.358251       -0.230469

  PDF parameter A =       0.785398
  PDF parameter B =            0.5

       X            PDF           CDF            CDf_inv

       0.321984        0.313667        0.527052        0.322266
       -4.89721       0.0122901       0.0609314        -4.88867
        2.39608       0.0388537        0.862344           2.396
      -0.497049         0.29789        0.289357        -0.49707
         1.7199       0.0752873        0.812256         1.72021
        5.56859      0.00908799        0.940955         5.57422
       -2.37452       0.0393801        0.114889        -2.37402
       0.587738        0.284274        0.609989        0.587891
       0.562935        0.288345        0.602776        0.562988
     -0.0514179        0.318306         0.40428      -0.0512695

  PDF parameter A =         1.5708
  PDF parameter B =              0

       X            PDF           CDF            CDf_inv

      -0.668595        0.219976        0.312408       -0.668945
       0.324785        0.287937        0.599961        0.324707
       -3.91088       0.0195342       0.0796835        -3.91211
    -0.00843563        0.318287        0.497315     -0.00830078
       0.380381        0.278075        0.615699        0.380371
       -5.77813      0.00925676       0.0545484        -5.78516
        1.54821       0.0937045        0.817452         1.54883
       -1.03758        0.153286         0.24413         -1.0376
     -0.0446691        0.317676        0.485791      -0.0449219
       -5.68878      0.00954104       0.0553881        -5.67969

dipole_cdf_test
  Normal end of execution.

dipole_sample_test
  Python version: 3.6.9
  dipole_sample samples the Dipole distribution.

  PDF parameter A =              0
  PDF parameter B =              1

  Sample size =       1000
  Sample mean =         -0.0325717
  Sample variance =       0.889366
  Sample maximum =         7.40972
  Sample minimum =        -5.24609

  PDF parameter A =       0.785398
  PDF parameter B =            0.5

  Sample size =       1000
  Sample mean =           -1.96369
  Sample variance =         8957.6
  Sample maximum =         497.657
  Sample minimum =        -2670.53

  PDF parameter A =         1.5708
  PDF parameter B =              0

  Sample size =       1000
  Sample mean =            1.06488
  Sample variance =        335.776
  Sample maximum =         449.563
  Sample minimum =        -73.4956

dipole_sample_test
  Normal end of execution.

dirichlet_pdf_test
  Python version: 3.6.9
  dirichlet_pdf evaluates the Dirichlet PDF.

  Number of components N =      3

  PDF parameters A:

     0:          0.25
     1:           0.5
     2:          1.25

  PDF arguments X:

     0:           0.5
     1:         0.125
     2:         0.375

  PDF value =        0.63907

dirichlet_pdf_test
  Normal end of execution.

dirichlet_sample_test
  Python version: 3.6.9
  dirichlet_sample samples the Dirichlet distribution
  dirichlet_mean computes the Dirichlet mean
  dirichlet_variance computes the Dirichlet variance.

  Number of components N =      3

  PDF parameters A:

     0:          0.25
     1:           0.5
     2:          1.25

  PDF mean, variance:

       0           0.125       0.0364583
       1            0.25          0.0625
       2           0.625        0.078125

  Second moment matrix:

  Col:       0             1             2       
  Row
      0 :   0.0520833     0.0208333     0.0520833  
      1 :   0.0208333         0.125      0.104167  
      2 :   0.0520833      0.104167       0.46875  

  Sample size = 1000

  Observed Min, Max, Mean, Variance:

       0     3.89417e-15        0.952133        0.128793       0.0360128
       1     2.10338e-07        0.990679        0.251725       0.0596567
       2      0.00150382        0.999923        0.619482       0.0768777

dirichlet_sample_test
  Normal end of execution.

dirichlet_mix_pdf_test
  Python version: 3.6.9
  dirichlet_mix_pdf evaluates the Dirichlet Mix PDF.
  Number of elements ELEM_NUM =        3
  Number of components COMP_NUM =      2

  PDF parameters A(ELEM,COMP):

  Col:       0             1       
  Row
      0 :        0.25           1.5  
      1 :         0.5           0.5  
      2 :        1.25             2  

  Component weights:

     0:             1
     1:             2

  PDF value =                  2.12288

dirichlet_mix_pdf_test
  Normal end of execution.

dirichlet_mix_sample_test
  Python version: 3.6.9
  dirichlet_mix_sample samples the Dirichlet Mix distribution
  dirichlet_mix_mean computes the Dirichlet Mix mean

  Number of elements ELEM_NUM =        3
  Number of components COMP_NUM =      2

  PDF parameters A(ELEM,COMP):

  Col:       0             1       
  Row
      0 :        0.25           1.5  
      1 :         0.5           0.5  
      2 :        1.25             2  

  Component weights:

     0:             1
     1:             2

  PDF mean:

     0:      0.291667
     1:      0.166667
     2:      0.541667

  Sample size =   1000

  Observed Min, Max, Mean, Variance:

       0     1.80071e-09        0.959098        0.292045       0.0577883
       1     3.61811e-08        0.977618        0.162588       0.0374133
       2        0.010339        0.999969        0.545368       0.0617329

dirichlet_mix_sample_test
  Normal end of execution.

discrete_cdf_test
  discrete_cdf evaluates the Discrete CDF
  discrete_cdf_inv inverts the Discrete CDF.
  discrete_pdf evaluates the Discrete PDF

  PDF parameter A =      6

  PDF parameters B:

     0:             1
     1:             2
     2:             6
     3:             2
     4:             4
     5:             1

       X            PDF           CDF            CDf_inv

               3           0.375          0.5625               3
               3           0.375          0.5625               3
               3           0.375          0.5625               3
               5            0.25          0.9375               5
               2           0.125          0.1875               2
               1          0.0625          0.0625               1
               4           0.125          0.6875               4
               3           0.375          0.5625               3
               3           0.375          0.5625               3
               5            0.25          0.9375               5

discrete_cdf_test
  Normal end of execution.

discrete_sample_test
  discrete_mean computes the Discrete mean
  discrete_sample samples the Discrete distribution
  discrete_variance computes the Discrete variance.

  PDF parameter A =                          6

  PDF parameters B:

     0:             1
     1:             2
     2:             6
     3:             2
     4:             4
     5:             1
  PDF mean =                            3.5625
  PDF variance =                       1.74609

  Sample size =       1000
  Sample mean =              3.627
  Sample variance =        1.77187
  Sample maximum =       6
  Sample minimum =       1

discrete_sample_test
  Normal end of execution.

disk_sample_test
  disk_mean returns the Disk mean.
  disk_sample samples the Disk distribution.
  disk_variance returns the Disk variance.

  X coordinate of center is A =             10
  Y coordinate of center is B =              4
  Radius is C =                              5

  Disk mean =                 10               4
  Disk variance =           12.5

  Sample size =       1000
  Sample mean =            10.0259          4.0353
  Sample variance =        12.7705
  Sample maximum =         14.9429         8.89788
  Sample minimum =         5.06986       -0.939182

disk_sample_test
  Normal end of execution.

empirical_discrete_cdf_test
  Python version: 3.6.9
  empirical_discrete_cdf evaluates the Empirical Discrete CDF
  empirical_discrete_cdf_inv inverts the Empirical Discrete CDF.
  empirical_discrete_pdf evaluates the Empirical Discrete PDF

  PDF parameter A =      6

  PDF parameter B:

     0:             1
     1:             1
     2:             3
     3:             2
     4:             1
     5:             2

  PDF parameter C:

     0:             0
     1:             1
     2:             2
     3:           4.5
     4:             6
     5:            10

       X            PDF           CDF            CDf_inv

            4.5             0.2             0.7             4.5
              2             0.3             0.5               2
            4.5             0.2             0.7             4.5
              2             0.3             0.5               2
              6             0.1             0.8               6
             10             0.2               1              10
              1             0.1             0.2               1
            4.5             0.2             0.7             4.5
            4.5             0.2             0.7             4.5
              2             0.3             0.5               2

empirical_discrete_cdf_test
  Normal end of execution.

empirical_discrete_sample_test
  Python version: 3.6.9
  empirical_discrete_mean computes the Empirical Discrete mean
  empirical_discrete_sample samples the Empirical Discrete distribution
  empirical_discrete_variance computes the Empirical Discrete variance.

  PDF parameter A =      6

  PDF parameter B:

     0:             1
     1:             1
     2:             3
     3:             2
     4:             1
     5:             2

  PDF parameter C:

     0:             0
     1:             1
     2:             2
     3:           4.5
     4:             6
     5:            10
  PDF mean =                               4.2
  PDF variance =                         11.31

  Sample size =       1000
  Sample mean =              4.336
  Sample variance =        11.7156
  Sample maximum =              10
  Sample minimum =               0

empirical_discrete_sample_test
  Normal end of execution.

english_letter_cdf_test
  Python version: 3.6.9
  english_letter_cdf evaluates the English Letter CDF
  english_letter_cdf_inv inverts the English Letter CDF.
  english_letter_pdf evaluates the English Letter PDF

   C              PDF             CDF    CDf_inv

  'e'         0.12702         0.29396        'e'
  'c'         0.02782         0.12441        'c'
  'w'         0.02361         0.97802        'w'
  'e'         0.12702         0.29396        'e'
  'e'         0.12702         0.29396        'e'
  'o'         0.07507         0.68311        'o'
  's'         0.06327         0.82649        's'
  'h'         0.06094         0.39733        'h'
  'f'         0.02228         0.31624        'f'
  'i'         0.06966         0.46699        'i'

english_letter_cdf_test
  Normal end of execution.

english_sentence_length_cdf_test
  Python version: 3.6.9
  english_sentence_length_cdf evaluates the English Sentence Length CDF
  english_sentence_length_cdf_inv inverts the English Sentence Length CDF.
  english_sentence_length_pdf evaluates the English Sentence Length PDF

       X            PDF           CDF            CDf_inv

            41    0.00625451      0.947468            41
            24     0.0253187      0.726295            24
            11     0.0357028      0.303294            11
            17     0.0344199      0.520808            17
             2     0.0137319     0.0218106             2
             6     0.0319642      0.128468             6
            16     0.0354923      0.486388            16
            29     0.0169393      0.825355            29
             7     0.0352418       0.16371             7
            20     0.0311022      0.618405            20

english_sentence_length_cdf_test
  Normal end of execution.

english_sentence_length_sample_test
  Python version: 3.6.9
  english_sentence_length_mean computes the English Sentence Length mean
  english_sentence_length_sample samples the English Sentence Length distribution
  english_sentence_length_variance computes the English Sentence Length variance.

  PDF mean =                           19.1147
  PDF variance =                       147.443

  Sample size =             1000
  Sample mean =             18.809
  Sample variance =        151.747
  Sample maximum =              67
  Sample minimum =               1

english_sentence_length_sample_test
  Normal end of execution.

english_word_length_cdf_test
  Python version: 3.6.9
  english_word_length_cdf evaluates the English Word Length CDF
  english_word_length_cdf_inv inverts the English Word Length CDF.
  english_word_length_pdf evaluates the English Word Length PDF

       X            PDF           CDF            CDf_inv

             2      0.169755      0.201356             2
             3      0.211926      0.413282             3
            10     0.0276608      0.965289            10
             3      0.211926      0.413282             3
             3      0.211926      0.413282             3
             8     0.0562317      0.897307             8
             2      0.169755      0.201356             2
             2      0.169755      0.201356             2
             4      0.156785      0.570067             4
             2      0.169755      0.201356             2

english_word_length_cdf_test
  Normal end of execution.

english_word_length_sample_test
  Python version: 3.6.9
  english_word_length_mean computes the English Word Length mean
  english_word_length_sample samples the English Word Length distribution
  english_word_length_variance computes the English Word Length variance.

  PDF mean =                           4.73912
  PDF variance =                       7.05635

  Sample size =             1000
  Sample mean =              4.732
  Sample variance =        7.40818
  Sample maximum =              17
  Sample minimum =               1

english_word_length_sample_test
  Normal end of execution.

erlang_cdf_test
  Python version: 3.6.9
  erlang_cdf evaluates the Erlang CDF.
  erlang_cdf_inv inverts the Erlang CDF.
  erlang_pdf evaluates the Erlang PDF.

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =      3

       X            PDF           CDF            CDf_inv

        10.5347       0.0483119        0.854338         10.5352
        5.51021         0.13332        0.392022         5.50977
        4.37774        0.131724        0.239841         4.37793
        8.60459       0.0806707        0.731474         8.60547
        11.3147       0.0382813         0.88799         11.3125
        1.63995        0.018587      0.00430353         1.64062
        8.84982       0.0760384        0.750686         8.84961
        6.16357        0.126045        0.476988         6.16406
        6.74447        0.116677        0.547585         6.74414
        5.80754        0.130551        0.431276         5.80762

erlang_cdf_test
  Normal end of execution.

erlang_sample_test
  Python version: 3.6.9
  erlang_mean computes the Erlang mean
  erlang_sample samples the Erlang distribution
  erlang_variance computes the Erlang variance.

  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =      3
  PDF mean =                  7
  PDF variance =             12

  Sample size =       1000
  Sample mean =            6.95935
  Sample variance =        11.3081
  Sample maximum =         21.6682
  Sample minimum =         1.20483

erlang_sample_test
  Normal end of execution.

exponential_cdf_test
  Python version: 3.6.9
  exponential_cdf evaluates the Exponential CDF.
  exponential_cdf_inv inverts the Exponential CDF.
  exponential_pdf evaluates the Exponential PDF.

  PDF parameter A =              1
  PDF parameter B =              2

       X            PDF           CDF            CDf_inv

        2.71025        0.212615        0.574771         2.71025
        6.01277       0.0407813        0.918437         6.01277
        4.22222        0.099833        0.800334         4.22222
        1.16493        0.460423       0.0791548         1.16493
        5.88702       0.0434278        0.913144         5.88702
         2.6945        0.214296        0.571408          2.6945
        2.92525        0.190944        0.618111         2.92525
        1.75335        0.343069        0.313861         1.75335
        2.15443        0.280729        0.438541         2.15443
        2.72136        0.211437        0.577125         2.72136

exponential_cdf_test
  Normal end of execution.

exponential_sample_test
  Python version: 3.6.9
  exponential_mean computes the Exponential mean
  exponential_sample samples the Exponential distribution
  exponential_variance computes the Exponential variance.

  PDF parameter A =              1
  PDF parameter B =             10
  PDF mean =                    11
  PDF variance =               100

  Sample size =       1000
  Sample mean =            10.7797
  Sample variance =        93.0992
  Sample maximum =         72.2107
  Sample minimum =         1.00687

exponential_sample_test
  Normal end of execution.

exponential_01_cdf_test
  Python version: 3.6.9
  exponential_01_cdf evaluates the Exponential 01 CDF.
  exponential_01_cdf_inv inverts the Exponential 01 CDF.
  exponential_01_pdf evaluates the Exponential 01 PDF.

       X            PDF           CDF            CDf_inv

       0.683945        0.504622        0.495378        0.683945
        1.28567        0.276465        0.723535         1.28567
        3.04878       0.0474167        0.952583         3.04878
        2.01583        0.133209        0.866791         2.01583
        1.01936        0.360825        0.639175         1.01936
       0.453026        0.635701        0.364299        0.453026
       0.884256        0.413021        0.586979        0.884256
        1.14479        0.318291        0.681709         1.14479
       0.564214        0.568807        0.431193        0.564214
       0.955692        0.384546        0.615454        0.955692

exponential_01_sample_test
  Normal end of execution.

exponential_01_sample_test
  Python version: 3.6.9
  exponential_01_mean computes the Exponential 01 mean
  exponential_01_sample samples the Exponential 01 distribution
  exponential_01_variance computes the Exponential 01 variance.

  PDF mean =                                 1
  PDF variance =                             1

  Sample size =       1000
  Sample mean =           0.999195
  Sample variance =       0.928826
  Sample maximum =         5.97702
  Sample minimum =     5.71488e-05

exponential_01_sample_test
  Normal end of execution.

extreme_values_cdf_test
  Python version: 3.6.9
  extreme_values_cdf evaluates the Extreme Values CDF
  extreme_values_cdf_inv inverts the Extreme Values CDF.
  extreme_values_pdf evaluates the Extreme Values PDF

  PDF parameter A =              2
  PDF parameter B =              3

       X            PDF           CDF            CDf_inv

      -0.381307       0.0807369        0.109512       -0.381307
        1.78111        0.122292        0.341062         1.78111
        6.93434       0.0530539        0.824436         6.93434
        3.44699        0.110993        0.539375         3.44699
       -1.18432       0.0535197       0.0555465        -1.18432
       0.156198       0.0970111        0.157407        0.156198
        1.32507        0.119322        0.285849         1.32507
        10.5606       0.0181374        0.943989         10.5606
         7.6189       0.0439261        0.857558          7.6189
      -0.247354       0.0850405        0.120617       -0.247354

extreme_values_cdf_test
  Normal end of execution.

extreme_values_sample_test
  Python version: 3.6.9
  extreme_values_mean computes the Extreme Values mean
  extreme_values_sample samples the Extreme Values distribution
  extreme_values_variance computes the Extreme Values variance.

  PDF parameter A =              2
  PDF parameter B =              3
  PDF mean =               3.73165
  PDF variance =           14.8044

  Sample size =       1000
  Sample mean =            3.84249
  Sample variance =        16.8278
  Sample maximum =         21.1807
  Sample minimum =        -5.15042

extreme_values_sample_test
  Normal end of execution.

f_cdf_test
  Python version: 3.6.9
  f_cdf evaluates the F CDF.
  f_pdf evaluates the F PDF.

  PDF parameter M =      1
  PDF parameter N =      1

      X        M     N        PDF         CDF

         484.173       1       1     2.98163e-05       0.0289122
         171.577       1       1     0.000140811       0.0485074
        0.766524       1       1        0.205811        0.542194
         1.59444       1       1       0.0971631        0.426415
        0.294719       1       1        0.452867         0.68337
         3046.55       1       1     1.89232e-06       0.0115326
         2.61343       1       1       0.0544911        0.352667
         1.60064       1       1       0.0967439        0.425814
          0.1262       1       1        0.795619        0.782696
        0.791081       1       1        0.199813        0.537214

f_cdf_test
  Normal end of execution.

f_sample_test
  Python version: 3.6.9
  f_mean computes the F mean
  f_sample samples the F distribution
  f_variance computes the F variance.

  PDF parameter M =            8
  PDF parameter N =            6
  PDF mean =                         1.5
  PDF variance =                   3.375

  Sample size =       1000
  Sample mean =            1.49842
  Sample variance =        2.90388
  Sample maximum =         24.7283
  Sample minimum =        0.111008

f_sample_test
  Normal end of execution.

fermi_dirac_sample_test
  Python version: 3.6.9
  fermi_dirac_sample samples the Fermi Dirac distribution.

  U =          1
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     0.600786
  Sample variance = 0.178257
  Maximum value =   2.71249
  Minimum value =   0.000355381

  U =          2
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     1.04608
  Sample variance = 0.437344
  Maximum value =   3.54897
  Minimum value =   0.000101515

  U =          4
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     2.02422
  Sample variance = 1.41821
  Maximum value =   5.25467
  Minimum value =   0.000106975

  U =          8
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     3.9926
  Sample variance = 5.44033
  Maximum value =   9.52331
  Minimum value =   0.000168473

  U =          16
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     8.00149
  Sample variance = 21.1067
  Maximum value =   17.2859
  Minimum value =   0.00068667

  U =          32
  V =          1

  SAMPLE_NUM =      10000
  Sample mean =     15.8706
  Sample variance = 85.2449
  Maximum value =   32.8182
  Minimum value =   0.00313556

  U =          1
  V =          0.25

  SAMPLE_NUM =      10000
  Sample mean =     0.510948
  Sample variance = 0.0915761
  Maximum value =   1.4043
  Minimum value =   1.63291e-05

fermi_dirac_sample_test
  Normal end of execution.

fisher_pdf_test
  Python version: 3.6.9
  fisher_pdf evaluates the Fisher PDF.

  PDF Input:
    Concentration parameter KAPPA = 0
               1             0             0

      X                         PDF

  0.600743  -0.0639933  0.796877         0.0795775
  -0.629584  -0.765092  0.135121         0.0795775
   0.37298  0.883063  0.284754         0.0795775
  0.555421  0.606622  -0.568786         0.0795775
  -0.556761   0.13853   0.81904         0.0795775
  -0.188716  -0.747668  0.636694         0.0795775
  0.961217  0.0979336  -0.257821         0.0795775
  0.453777  0.727063  0.515234         0.0795775
  -0.568319  0.0842044  -0.818488         0.0795775
  0.0887255  -0.972778  -0.214081         0.0795775

  PDF Input:
    Concentration parameter KAPPA = 0.5
               1             0             0

      X                         PDF

  -0.929927  -0.141855  -0.339282         0.0479636
  0.513035  -0.801003  0.308526         0.0986841
  0.613313  -0.409569  -0.675352          0.103758
   0.78561  0.0931131  0.611675          0.113093
  0.625291  -0.777013  0.0725397          0.104381
  -0.606462  -0.141936  -0.782341         0.0563834
  -0.0569088  0.209792  -0.976088         0.0742139
  0.170207  0.00824627  -0.985374         0.0831387
  -0.0786483  -0.993025  -0.0878408         0.0734116
  -0.0969945  -0.990921  -0.093104         0.0727413

  PDF Input:
    Concentration parameter KAPPA = 10
               1             0             0

      X                         PDF

  0.867802  0.494498  -0.0489033          0.424319
  0.934033  -0.0896427  0.345754          0.822869
  0.774618  -0.519829   -0.3602          0.167108
  0.955536  -0.184637  -0.229911           1.02028
  0.850388  -0.417128  0.320694          0.356503
  0.907488  0.300162  -0.293885          0.631023
  0.945858  -0.283638  -0.157802           0.92616
  0.941368  -0.249226  -0.227404          0.885494
  0.920404  0.361312  0.149368          0.718023
  0.858003  -0.0929899  0.505158           0.38471

fisher_pdf_test
  Normal end of execution.

fisk_cdf_test
  Python version: 3.6.9
  fisk_cdf evaluates the Fisk CDF
  fisk_cdf_inv inverts the Fisk CDF.
  fisk_pdf evaluates the Fisk PDF

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF parameter C =                          3

       X            PDF           CDF            CDf_inv

        2.23572        0.374911        0.190854         2.23572
        2.21546         0.36951        0.183311         2.21546
        1.66745        0.155299       0.0358357         1.66745
        2.17149        0.356817        0.167337         2.17149
        3.52409        0.263676        0.667788         3.52409
        5.17473       0.0641338         0.90094         5.17473
        2.44106        0.412454        0.272237         2.44106
        2.50176        0.417448         0.29744         2.50176
        2.28818        0.387518        0.210859         2.28818
        2.03492        0.309839        0.121696         2.03492

fisk_cdf_test
  Normal end of execution.

fisk_sample_test
  Python version: 3.6.9
  fisk_mean computes the Fisk mean
  fisk_sample samples the Fisk distribution
  fisk_variance computes the Fisk variance.

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF parameter C =                          3
  PDF mean =                            3.4184
  PDF variance =                       3.82494

  Sample size =       1000
  Sample mean =            3.39895
  Sample variance =        4.00405
  Sample maximum =         30.1019
  Sample minimum =         1.16187

fisk_sample_test
  Normal end of execution.

folded_normal_cdf_test
  Python version: 3.6.9
  folded_normal_cdf evaluates the Folded Normal CDF.
  folded_normal_cdf_inv inverts the Folded Normal CDF.
  folded_normal_pdf evaluates the Folded Normal PDF.

  PDF parameter A =                      2
  PDF parameter B =                      3

       X            PDF           CDF            CDf_inv

         1.1756        0.203994        0.246828         1.17563
        3.77605        0.132441        0.695988         3.77555
        9.62031      0.00535456        0.994405         9.63212
        3.31909        0.148344         0.63181         3.31851
        3.63804        0.137307        0.677374         3.63823
        4.79982       0.0962211        0.812954          4.8002
        2.90412        0.162032         0.56738         2.90372
        4.54102        0.105242        0.786889         4.54105
        2.21792        0.182123        0.449088         2.21773
        1.25287        0.202794        0.262546         1.25308

folded_normal_cdf_test
  Normal end of execution.

folded_normal_sample_test
  Python version: 3.6.9
  folded_normal_mean computes the Folded Normal mean
  folded_normal_sample samples the Folded Normal distribution
  folded_normal_variance computes the Folded Normal variance.

  PDF parameter A =                          2
  PDF parameter B =                          3
  PDF mean =                           2.90672
  PDF variance =                       4.55099

  Sample size =       1000
  Sample mean =             3.0554
  Sample variance =        4.66101
  Sample maximum =         11.5287
  Sample minimum =     0.000977054

folded_normal_sample_test
  Normal end of execution.

frechet_cdf_test
  Python version: 3.6.9
  frechet_cdf evaluates the Frechet CDF
  frechet_cdf_inv inverts the Frechet CDF.
  frechet_pdf evaluates the Frechet PDF

  PDF parameter ALPHA =         3

       X            PDF           CDF            CDf_inv

       1.33157      0.624762      0.654719       1.33157
       1.08392      0.991068      0.456003       1.08392
      0.765442      0.939916      0.107552      0.765442
      0.761767       0.92761      0.104119      0.761767
        1.1289      0.921781      0.499039        1.1289
        2.7513     0.0499015      0.953119        2.7513
      0.839578       1.11439       0.18457      0.839578
      0.767899      0.947954      0.109871      0.767899
        2.0407      0.153781       0.88899        2.0407
      0.866851       1.14449      0.215411      0.866851

frechet_cdf_test
  Normal end of execution.

frechet_sample_test
  Python version: 3.6.9
  frechet_mean computes the Frechet mean
  frechet_sample samples the Frechet distribution
  frechet_variance computes the Frechet variance.

  PDF parameter ALPHA =         3
  PDF mean =                    1.35412
  PDF variance =                0.845303

  Sample size =     1000
  Sample mean =     1.35842
  Sample variance = 0.60341
  Sample maximum =  8.56107
  Sample minimum =  0.519673

frechet_sample_test
  Normal end of execution.

gamma_cdf_test
  Python version: 3.6.9
  gamma_cdf evaluates the Gamma CDF.
  gamma_pdf evaluates the Gamma PDF.

  PDF parameter A =                          1
  PDF parameter B =                        1.5
  PDF parameter C =                          3

  X  PDF   CDF

       6.80009      0.104296      0.741711
       13.6672    0.00511122      0.990302
         6.392      0.118318      0.696307
       2.36577      0.111178     0.0645988
       8.78602     0.0500085      0.890516
       8.35964     0.0593711      0.867242
        2.1892      0.094819     0.0463925
       5.73214      0.141487      0.610575
       4.46539       0.17655       0.40668
       3.32014      0.169815      0.202979

gamma_cdf_test
  Normal end of execution.

gamma_sample_test
  Python version: 3.6.9
  gamma_mean computes the Gamma mean
  gamma_sample samples the Gamma distribution
  gamma_variance computes the Gamma variance.

  TEST NUMBER:      0

  PDF parameter A =                          1
  PDF parameter B =                          3
  PDF parameter C =                          2
  PDF mean =                                 7
  PDF variance =                            18

  Sample size =       1000
  Sample mean =            7.16087
  Sample variance =        18.7814
  Sample maximum =          36.793
  Sample minimum =         1.20752

  TEST NUMBER:      1

  PDF parameter A =                          2
  PDF parameter B =                        0.5
  PDF parameter C =                        0.5
  PDF mean =                              2.25
  PDF variance =                         0.125

  Sample size =       1000
  Sample mean =            2.26462
  Sample variance =       0.130076
  Sample maximum =         5.46348
  Sample minimum =               2

gamma_sample_test
  Normal end of execution.

gamma_inc_values_test:
  Python version: 3.6.9
  gamma_inc_values stores values of the incomplete Gamma function.

      A         X        gamma_inc(A,X)

      0.100000      0.030000          2.49030283630057
      0.100000      0.300000        0.8718369702247978
      0.100000      1.500000        0.1079213896175866
      0.500000      0.075000         1.238121685818417
      0.500000      0.750000        0.3911298052193973
      0.500000      3.500000       0.01444722098952533
      1.000000      0.100000        0.9048374180359596
      1.000000      1.000000        0.3678794411714423
      1.000000      5.000000      0.006737946999085467
      1.100000      0.100000        0.8827966752611692
      1.100000      1.000000        0.3908330082003269
      1.100000      5.000000      0.008051456628620992
      2.000000      0.150000        0.9898141728888165
      2.000000      1.500000        0.5578254003710746
      2.000000      7.000000       0.00729505572443613
      6.000000      2.500000         114.9574754165633
      6.000000     12.000000         2.440923530031405
     11.000000     16.000000         280854.6620274718
     26.000000     25.000000     8.576480283455533e+24
     41.000000     45.000000     2.085031346403364e+47

gamma_inc_values_test:
  Normal end of execution.

geometric_cdf_test
  Python version: 3.6.9
  geometric_cdf evaluates the Geometric CDF
  geometric_cdf_inv inverts the Geometric CDF.
  geometric_pdf evaluates the Geometric PDF

  PDF parameter A =           0.25

       X            PDF           CDF            CDf_inv

               2          0.1875          0.4375               3
               1            0.25            0.25               2
               1            0.25            0.25               2
               3        0.140625        0.578125               4
               4        0.105469        0.683594               5
               1            0.25            0.25               2
               3        0.140625        0.578125               4
               9       0.0250282        0.924915              10
               2          0.1875          0.4375               3
               8        0.033371        0.899887               9

geometric_cdf_test
  Normal end of execution.

geometric_sample_test
  Python version: 3.6.9
  geometric_mean computes the Geometric mean
  geometric_sample samples the Geometric distribution
  geometric_variance computes the Geometric variance.

  PDF parameter A =                       0.25
  PDF mean =                                 4
  PDF variance =                            12

  Sample size =       1000
  Sample mean =              4.055
  Sample variance =         12.146
  Sample maximum =      24
  Sample minimum =       1

geometric_sample_test
  Normal end of execution.

gompertz_cdf_test
  Python version: 3.6.9
  gompertz_cdf evaluates the Gompertz CDF
  gompertz_cdf_inv inverts the Gompertz CDF.
  gompertz_pdf evaluates the Gompertz PDF

  PDF parameter A =                    2
  PDF parameter B =                    3

       X            PDF           CDF            CDf_inv

       0.347512          1.1743        0.692357        0.347512
        0.21791         1.72284        0.506228         0.21791
       0.127809         2.19521          0.3303        0.127809
        1.31495       0.0119161        0.998403         1.31495
       0.185379         1.88449        0.447581        0.185379
       0.416053         0.94199        0.764668        0.416053
       0.178084         1.92212        0.433696        0.178084
        1.02769       0.0682291        0.988845         1.02769
        0.71307        0.309122        0.937143         0.71307
      0.0634324         2.58064        0.176789       0.0634324

gompertz_cdf_test
  Normal end of execution.

gompertz_sample_test
  Python version: 3.6.9
  gompertz_sample samples the Gompertz distribution

  PDF parameter A =                    2
  PDF parameter B =                    3

  Sample size =       1000
  Sample mean =           0.267505
  Sample variance =      0.0526379
  Sample maximum =         1.37066
  Sample minimum =     2.97328e-06

gompertz_sample_test
  Normal end of execution.

gumbel_cdf_test
  Python version: 3.6.9
  gumbel_cdf evaluates the Gumbel CDF.
  gumbel_cdf_inv inverts the Gumbel CDF.
  gumbel_pdf evaluates the Gumbel PDF.

       X            PDF           CDF            CDf_inv

       0.815052        0.284316        0.642354        0.815052
        0.67327        0.306264        0.600473         0.67327
      -0.211777        0.359121        0.290581       -0.211777
       -0.21701        0.358672        0.288703        -0.21701
      -0.800965        0.240094        0.107777       -0.800965
        0.83051        0.281862         0.64673         0.83051
       -1.00034        0.179268       0.0659263        -1.00034
      -0.388554        0.337465        0.228814       -0.388554
     0.00578346        0.367873        0.370007      0.00578346
       0.432146        0.339168        0.522508        0.432146

gumbel_cdf_test
  Normal end of execution.

gumbel_sample_test
  Python version: 3.6.9
  gumbel_mean computes the Gumbel mean
  gumbel_sample samples the Gumbel distribution
  gumbel_variance computes the Gumbel variance.

  PDF mean      =                     0.577216
  PDF variance =                       1.64493

  Sample size =       1000
  Sample mean =           0.633054
  Sample variance =        1.82666
  Sample maximum =         6.50115
  Sample minimum =        -1.80374

gumbel_sample_test
  Normal end of execution.

half_normal_cdf_test
  Python version: 3.6.9
  half_normal_cdf evaluates the Half Normal CDF.
  half_normal_cdf_inv inverts the Half Normal CDF.
  half_normal_pdf evaluates the Half Normal PDF.

  PDF parameter A =                      0
  PDF parameter B =                      2

       X            PDF           CDF            CDf_inv

        1.11843        0.341195        0.423986         1.11843
        1.06358        0.346338        0.405129         1.06358
       0.599845        0.381397        0.235764        0.599845
        1.09818        0.343115        0.417057         1.09818
       0.491143        0.387093        0.193986        0.491143
        4.75436       0.0236491        0.982554         4.75436
        1.29948        0.323027        0.484141         1.29948
       0.318428        0.393918          0.1265        0.318428
        1.80941        0.264958        0.634377         1.80941
       0.349683        0.392891        0.138796        0.349683

half_normal_cdf_test
  Normal end of execution.

half_normal_sample_test
  Python version: 3.6.9
  half_normal_mean computes the Half Normal mean
  half_normal_sample samples the Half Normal distribution
  half_normal_variance computes the Half Normal variance.

  PDF parameter A =                          0
  PDF parameter B =                         10
  PDF mean =                           7.97885
  PDF variance =                        36.338

  Sample size =       1000
  Sample mean =            7.99011
  Sample variance =        33.3258
  Sample maximum =         29.8792
  Sample minimum =       0.0033248

half_normal_sample_test
  Normal end of execution.

hypergeometric_cdf_test
  Python version: 3.6.9
  hypergeometric_cdf evaluates the Hypergeometric CDF.
  hypergeometric_pdf evaluates the Hypergeometric PDF.

  PDF argument X =                     7
  Total number of balls =            100
  Number of white balls =              7
  Number of balls taken =             10
  PDF value =                   =    7.49646e-09
  CDF value =                   =              1

hypergeometric_cdf_test
  Normal end of execution.

hypergeometric_sample_test
  Python version: 3.6.9
  hypergeometric_mean computes the Hypergeometric mean
  hypergeometric_sample samples the Hypergeometric distribution
  hypergeometric_variance computes the Hypergeometric variance.

  PDF parameter N =                 10
  PDF parameter M =                  7
  PDF parameter L =                100
  PDF mean =                               0.7
  PDF variance =                      0.591818

  Sample size =       1000
  Sample mean =              0.714
  Sample variance =       0.570204
  Sample maximum =       4
  Sample minimum =       0

hypergeometric_sample_test
  Normal end of execution.

i4_factorial_log_test
  Python version: 3.6.9
  i4_factorial_log evaluates the log(N!).

         N           lfact          elfact         fact

         0               0               1             1
         1               0               1             1
         2        0.693147               2             2
         3         1.79176               6             6
         4         3.17805              24            24
         5         4.78749             120           120
         6         6.57925             720           720
         7         8.52516            5040          5040
         8         10.6046           40320         40320
         9         12.8018          362880        362880
        10         15.1044      3.6288e+06       3628800
        11         17.5023     3.99168e+07      39916800
        12         19.9872     4.79002e+08     479001600

i4_factorial_log_test:
  Normal end of execution.

i4_is_power_of_10_test
  Python version: 3.6.9
  i4_is_power_of_10 reports whether an I4 is a power of 10.

  I     i4_is_power_of_10(I)

      97  False
      98  False
      99  False
     100  True
     101  False
     102  False
     103  False

i4_is_power_of_10_test:
  Normal end of execution.

i4mat_print_test:
  Python version: 3.6.9
  Test i4mat_print, which prints an I4MAT.

  A 5 x 6 integer matrix:

  Col:       0        1        2        3        4        5  
  Row
    0:      11       12       13       14       15       16  
    1:      21       22       23       24       25       26  
    2:      31       32       33       34       35       36  
    3:      41       42       43       44       45       46  
    4:      51       52       53       54       55       56  

i4mat_print_test:
  Normal end of execution.

i4mat_print_some_test
  Python version: 3.6.9
  i4mat_print_some prints some of an I4MAT.

  Here is I4MAT, rows 0:2, cols 3:5:

  Col:       3        4        5  
  Row
    0:      14       15       16  
    1:      24       25       26  
    2:      34       35       36  

i4mat_print_some_test:
  Normal end of execution.

i4row_max_test
  Python version: 3.6.9
  i4row_max computes maximums of an I4ROW.

  The matrix:

  Col:       0        1        2        3  
  Row
    0:       1        2        3        4  
    1:       5        6        7        8  
    2:       9       10       11       12  

  Row maximums:

     0       4
     1       8
     2      12

i4row_max_test:
  Normal end of execution.

i4row_mean_test
  Python version: 3.6.9
  i4row_mean computes row means of an I4ROW.

  The matrix:

  Col:       0        1        2        3  
  Row
    0:       1        2        3        4  
    1:       5        6        7        8  
    2:       9       10       11       12  

  The row means:

     0:           2.5
     1:           6.5
     2:          10.5

i4row_mean_test:
  Normal end of execution.

i4row_min_test
  Python version: 3.6.9
  i4row_min computes minimums of an I4ROW.

  The matrix:

  Col:       0        1        2        3  
  Row
    0:       1        2        3        4  
    1:       5        6        7        8  
    2:       9       10       11       12  

  Row minimums:

     0       1
     1       5
     2       9

i4row_min_test:
  Normal end of execution.

i4row_variance_test
  Python version: 3.6.9
  i4row_variance computes variances of an I4ROW.

  The matrix:

  Col:       0        1        2        3  
  Row
    0:       1        2        3        4  
    1:       5        6        7        8  
    2:       9       10       11       12  

  The row variances:

     0:       1.66667
     1:       1.66667
     2:       1.66667

i4row_variance_test:
  Normal end of execution.

i4vec_print_test
  Python version: 3.6.9
  i4vec_print prints an I4VEC.

  Here is an I4VEC:

     0      91
     1      92
     2      93
     3      94

i4vec_print_test:
  Normal end of execution.

i4vec_run_count_test
  Python version: 3.6.9
  i4vec_run_count counts runs in an I4VEC

 Run Count        Sequence

        13         1 0 1 0 1 0 0 0 1 1 0 1 0 1 1 1 1 1 0 1
        11         1 0 1 0 0 0 0 1 1 0 1 1 1 1 0 1 1 0 0 1
        15         0 0 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 0
        10         1 0 1 1 0 0 0 1 1 0 0 1 1 1 1 0 0 1 0 0
        14         0 1 0 0 1 0 0 1 1 1 0 1 0 0 1 0 1 0 0 1
        10         0 0 0 0 0 1 1 1 0 1 0 1 0 0 1 1 1 0 0 1
        10         1 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0
         9         1 1 0 0 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 1
        11         0 0 1 1 1 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0
        13         0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 1 0

i4vec_run_count_test:
  Normal end of execution.

i4vec_unique_count_test
  Python version: 3.6.9
  i4vec_unique_count counts unique entries in an I4VEC.

  Input vector:

     0      20
     1      14
     2       5
     3      15
     4       2
     5      13
     6      20
     7      15
     8      15
     9      19
    10      12
    11      16
    12       4
    13       9
    14       8
    15       8
    16      17
    17       6
    18       5
    19       5

  Number of unique entries is 14

i4vec_unique_count_test:
  Normal end of execution.

inverse_gaussian_cdf_test
  Python version: 3.6.9
  inverse_gaussian_cdf evaluates the Inverse Gaussian CDF.
  inverse_gaussian_pdf evaluates the Inverse Gaussian PDF.

  PDF parameter A =              5
  PDF parameter B =              2

       X            PDF           CDF

        1.40906        0.233913        0.337122
        14.7125      0.00773594        0.925595
       0.929236        0.308634          0.2073
        1.42148        0.232174        0.340017
        10.5399       0.0146752        0.880929
        0.42538        0.284205       0.0443691
        2.83419         0.11067        0.567293
         1.4339        0.230451         0.34289
        2.10057        0.157905        0.470293
        3.77341       0.0757525        0.653284

inverse_gaussian_cdf_test
  Normal end of execution.

inverse_gaussian_sample_test
  Python version: 3.6.9
  inverse_gaussian_mean computes the Inverse Gaussian mean
  inverse_gaussian_sample samples the Inverse Gaussian distribution
  inverse_gaussian_variance computes the Inverse Gaussian variance.

  PDF parameter A =                          2
  PDF parameter B =                          3
  PDF mean =                                 2
  PDF variance =                       2.66667

  Sample size =       1000
  Sample mean =            2.02382
  Sample variance =        2.60071
  Sample maximum =          11.627
  Sample minimum =         0.22052

inverse_gaussian_sample_test
  Normal end of execution.

laplace_cdf_test
  Python version: 3.6.9
  laplace_cdf evaluates the Laplace CDF
  laplace_cdf_inv inverts the Laplace CDF.
  laplace_pdf evaluates the Laplace PDF

  PDF parameter A =                          1
  PDF parameter B =                          2

       X            PDF           CDF            CDf_inv

       -1.27751       0.0800544        0.160109        -1.27751
      -0.213461        0.136283        0.272565       -0.213461
        1.99718        0.151847        0.696306         1.99718
       0.874594        0.234806        0.469611        0.874594
       -1.99472       0.0559301         0.11186        -1.99472
         0.1804        0.165946        0.331892          0.1804
        3.70599       0.0646162        0.870768         3.70599
        3.61616       0.0675847        0.864831         3.61616
        6.21578       0.0184224        0.963155         6.21578
      0.0399148        0.154689        0.309379       0.0399148

laplace_cdf_test
  Normal end of execution.

laplace_sample_test
  Python version: 3.6.9
  laplace_mean computes the Laplace mean
  laplace_sample samples the Laplace distribution
  laplace_variance computes the Laplace variance.

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF mean =                                 1
  PDF variance =                             8

  Sample size =       1000
  Sample mean =            1.16883
  Sample variance =        7.77822
  Sample maximum =         13.8301
  Sample minimum =        -10.4591

laplace_sample_test
  Normal end of execution.

levy_cdf_test
  Python version: 3.6.9
  levy_cdf evaluates the Levy CDF
  levy_cdf_inv inverts the Levy CDF.
  levy_pdf evaluates the Levy PDF

  PDF parameter A =                          1
  PDF parameter B =                          2

       X            PDF           CDF            CDf_inv

        338.766     9.06182e-05        0.938664         338.766
        1598.87     8.82761e-06        0.971778         1598.87
        26.2522      0.00427345        0.778383         26.2522
        1.97922        0.209698        0.152963         1.97922
        5.01723       0.0546294        0.480444         5.01723
        52.0259      0.00151785        0.843061         52.0259
        4.25347       0.0706999        0.433013         4.25347
          11.11       0.0158979        0.656484           11.11
        2.84191        0.131141        0.297397         2.84191
        5.35677       0.0493168        0.498066         5.35677

levy_cdf_test
  Normal end of execution.

log_normal_cdf_test
  Python version: 3.6.9
  log_normal_cdf evaluates the Log Normal CDF
  log_normal_cdf_inv inverts the Log Normal CDF.
  log_normal_pdf evaluates the Log Normal PDF

  PDF parameter A =                         10
  PDF parameter B =                       2.25

       X            PDF           CDF            CDf_inv

        65916.9     2.38887e-06        0.686934         65916.9
        72657.8     2.12004e-06          0.7021         72657.8
        7997.45     2.00332e-05        0.326256         7997.45
         735702     7.14503e-08        0.940545          735702
         494099     1.38011e-07        0.916582          494099
        4976.28     2.86356e-05        0.254262         4976.28
    1.53112e+06     1.95907e-08        0.970293     1.53112e+06
    1.31095e+06     2.59972e-08        0.965324     1.31095e+06
    1.35329e+06     2.45437e-08        0.966393     1.35329e+06
        12341.1     1.38989e-05        0.398407         12341.1

log_normal_cdf_test
  Normal end of execution.

log_normal_sample_test
  Python version: 3.6.9
  log_normal_mean computes the Log Normal mean
  log_normal_sample samples the Log Normal distribution
  log_normal_variance computes the Log Normal variance.

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF mean =                           20.0855
  PDF variance =                         21623

  Sample size =       1000
  Sample mean =            19.1937
  Sample variance =        7064.74
  Sample maximum =          1351.8
  Sample minimum =       0.0016519

log_normal_sample_test
  Normal end of execution.

log_series_cdf_test
  Python version: 3.6.9
  log_series_cdf evaluates the Log Series CDF
  log_series_cdf_inv inverts the Log Series CDF.
  log_series_pdf evaluates the Log Series PDF

  PDF parameter A =            0.25

       X            PDF           CDF            CDf_inv

               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2
               1        0.869015        0.869015               2

log_series_cdf_test
  Normal end of execution.

log_series_sample_test
  Python version: 3.6.9
  log_series_mean computes the Log Series mean
  log_series_variance computes the Log Series variance
  log_series_sample samples the Log Series distribution.

  PDF parameter A =                       0.25
  PDF mean =                           1.15869
  PDF variance =                      0.202361

  Sample size =       1000
  Sample mean =              1.145
  Sample variance =       0.179975
  Sample maximum =       6
  Sample minimum =       1

log_series_sample_test
  Normal end of execution.

log_uniform_cdf_test
  Python version: 3.6.9
  log_uniform_cdf evaluates the Log Uniform CDF
  log_uniform_cdf_inv inverts the Log Uniform CDF.
  log_uniform_pdf evaluates the Log Uniform PDF

  PDF parameter A =                          2
  PDF parameter B =                         20

       X            PDF           CDF            CDf_inv

        14.7924       0.0293593        0.869009         14.7924
        9.41255       0.0461399        0.672677         9.41255
        2.74944        0.157957        0.138215         2.74944
        5.08432       0.0854184        0.405203         5.08432
        18.4372       0.0235553        0.964665         18.4372
        6.68597       0.0649561        0.524134         6.68597
         9.5736       0.0453638        0.680045          9.5736
        2.13894        0.203041       0.0291696         2.13894
         5.3665       0.0809269        0.428661          5.3665
         16.978       0.0255798        0.928857          16.978

log_uniform_cdf_test
  Normal end of execution.

log_uniform_sample_test
  Python version: 3.6.9
  log_uniform_mean computes the Log Uniform mean
  log_uniform_sample samples the Log Uniform distribution
  log_uniform_variance computes the Log Uniform variance

  PDF parameter A =                          2
  PDF parameter B =                         20
  PDF mean =                            7.8173
  PDF variance =                       24.8801

  Sample size =       1000
  Sample mean =            7.84705
  Sample variance =         25.899
  Sample maximum =         19.9965
  Sample minimum =         2.00565

log_uniform_sample_test
  Normal end of execution.

logistic_cdf_test
  Python version: 3.6.9
  logistic_cdf evaluates the Logistic CDF
  logistic_cdf_inv inverts the Logistic CDF.
  logistic_pdf evaluates the Logistic PDF

  PDF parameter A =                          1
  PDF parameter B =                          2

       X            PDF           CDF            CDf_inv

       -1.34673       0.0902172        0.236247        -1.34673
        6.28742       0.0309859        0.933622         6.28742
        1.78904        0.120259        0.597371         1.78904
       0.901304        0.124924        0.487666        0.901304
        6.43927       0.0290011        0.938175         6.43927
        4.63639       0.0600742        0.860349         4.63639
       -1.88193       0.0773818        0.191396        -1.88193
        8.35534       0.0120252        0.975342         8.35534
        1.02669        0.124994        0.503336         1.02669
       -1.32528       0.0907272        0.238188        -1.32528

logistic_cdf_test
  Normal end of execution.

logistic_sample_test
  Python version: 3.6.9
  logistic_mean computes the Logistic mean
  logistic_sample samples the Logistic distribution
  logistic_variance computes the Logistic variance.

  PDF parameter A =                          2
  PDF parameter B =                          3
  PDF mean =                                 2
  PDF variance =                       29.6088

  Sample size =       1000
  Sample mean =            1.81463
  Sample variance =        29.8548
  Sample maximum =         35.6563
  Sample minimum =         -17.336

logistic_sample_test
  Normal end of execution.

lorentz_cdf_test
  Python version: 3.6.9
  lorentz_cdf evaluates the Lorentz CDF
  lorentz_cdf_inv inverts the Lorentz CDF.
  lorentz_pdf evaluates the Lorentz PDF

       X            PDF           CDF            CDf_inv

      -0.575656        0.239083        0.333738       -0.575656
      -0.125746        0.313355        0.460183       -0.125746
       -1.77677       0.0765734        0.163175        -1.77677
       -2.01315        0.062997        0.146751        -2.01315
      -0.754654        0.202809        0.294221       -0.754654
        3.97124       0.0189801        0.921479         3.97124
       0.999621        0.159215         0.74994        0.999621
       0.111963        0.314369        0.535491        0.111963
       -1.62855       0.0871566        0.175288        -1.62855
       0.326385        0.287666        0.600422        0.326385

lorentz_cdf_test
  Normal end of execution.

lorentz_sample_test
  Python version: 3.6.9
  lorentz_mean computes the Lorentz mean
  lorentz_variance computes the Lorentz variance
  lorentz_sample samples the Lorentz distribution.

  PDF mean =                                 0
  PDF variance =                  1.79769e+308

  Sample size =       1000
  Sample mean =           -8.40595
  Sample variance =        56690.4
  Sample maximum =         108.743
  Sample minimum =        -7484.75

lorentz_sample_test
  Normal end of execution.

maxwell_cdf_test
  Python version: 3.6.9
  maxwell_cdf evaluates the Maxwell CDF.
  maxwell_cdf_inv inverts the Maxwell CDF.
  maxwell_pdf evaluates the Maxwell PDF.

  PDF parameter A =              2

       X            PDF           CDF            CDf_inv

        2.52737        0.286699        0.529636         2.52734
        3.56731        0.258639        0.687863         3.56738
        4.46042        0.165024        0.784152         4.46094
        3.81736        0.235123        0.718127         3.81738
         5.5467       0.0655747        0.864128         5.54688
        3.38267         0.27302        0.663699         3.38281
       0.946966       0.0799535        0.185918        0.947266
        3.97994        0.218124        0.736362         3.98047
        3.93769        0.222636        0.731728          3.9375
        2.34203        0.275592        0.495483          2.3418

maxwell_cdf_test
  Normal end of execution.

maxwell_sample_test
  Python version: 3.6.9
  maxwell_mean computes the Maxwell mean
  maxwell_variance computes the Maxwell variance
  maxwell_sample samples the Maxwell distribution.

  PDF parameter A =                          2
  PDF mean =                           3.19154
  PDF mean =                           1.81408

  Sample size =       1000
  Sample mean =            3.16735
  Sample variance =        1.83048
  Sample maximum =          8.5477
  Sample minimum =        0.242292

maxwell_sample_test
  Normal end of execution.

multinomial_coef_test
  Python version: 3.6.9
  multinomial_coef1 computes multinomial coefficients using the Gamma function
  multinomial_coef2 computes multinomial coefficients directly.

  Line 10 of the BINOMIAL table:

     0    10      1      1
     1     9     10     10
     2     8     45     45
     3     7    120    120
     4     6    210    210
     5     5    252    252
     6     4    210    210
     7     3    120    120
     8     2     45     45
     9     1     10     10
    10     0      1      1

  Level 5 of the TRINOMIAL coefficients:

     0     0     5      1      1
     0     1     4      5      5
     0     2     3     10     10
     0     3     2     10     10
     0     4     1      5      5
     0     5     0      1      1

     1     0     4      5      5
     1     1     3     20     20
     1     2     2     30     30
     1     3     1     20     20
     1     4     0      5      5

     2     0     3     10     10
     2     1     2     30     30
     2     2     1     30     30
     2     3     0     10     10

     3     0     2     10     10
     3     1     1     20     20
     3     2     0     10     10

     4     0     1      5      5
     4     1     0      5      5

     5     0     0      1      1

multinomial_coef_test
  Normal end of execution.

multinomial_pdf_test
  Python version: 3.6.9
  multinomial_pdf evaluates the Multinomial PDF.

  PDF argument X:

     0       0
     1       2
     2       3
  PDF parameter A =              5
  PDF parameter B =              3

  PDF parameter C:

     0:           0.1
     1:           0.5
     2:           0.4

  PDF value =               0.16

multinomial_pdf_test
  Normal end of execution.

multinomial_sample_test
  Python version: 3.6.9
  multinomial_mean computes the Multinomial mean
  multinomial_sample samples the Multinomial distribution
  multinomial_variance computes the Multinomial variance

  PDF parameter A =                  5
  PDF parameter B =                  3

  PDF parameter C:

     0:         0.125
     1:           0.5
     2:         0.375

  PDF means and variances:

           0.625        0.546875
             2.5            1.25
           1.875         1.17188

  Sample size =   1000
  Component Min, Max, Mean, Variance:
       0       0       4           0.625         0.54492
       1       0       5           2.472          1.2825
       2       0       5           1.903          1.2068

multinomial_sample_test
  Normal end of execution.

multinoulli_pdf_test
  Python version: 3.6.9
  multinoulli_pdf evaluates the Multinoulli PDF.

   X     pdf(X)

  -1               0
   0        0.283639
   1       0.0925249
   2       0.0706549
   3        0.288182
   4        0.264999
   5               0

multinoulli_pdf_test
  Normal end of execution.

nakagami_cdf_test
  Python version: 3.6.9
  nakagami_cdf evaluates the Nakagami CDF
  nakagami_pdf evaluates the Nakagami PDF

       X            PDF           CDF            CDf_inv

         3.18257      0.586699      0.692394       3.18258
          3.2582      0.540746      0.735053        3.2582
         3.31623      0.503068      0.765346       3.31623
         3.36515      0.470346      0.789159       3.36515
         3.40825      0.441184      0.808803       3.40825
         3.44721      0.414809       0.82548       3.44721
         3.48305      0.390724      0.839911       3.48305
          3.5164       0.36858      0.852572        3.5164
         3.54772      0.348118      0.863796       3.54772
         3.57735      0.329135      0.873828       3.57735

nakagami_cdf_test
  Normal end of execution.

nakagami_sample_test
  Python version: 3.6.9
  nakagami_mean computes the Nakagami mean
  nakagami_variance computes the Nakagami variance.

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF parameter C =                          3
  PDF mean =                           2.91874
  PDF variance =                      0.318446

nakagami_sample_test
  Normal end of execution.

negative_binomial_cdf_test
  Python version: 3.6.9
  negative_binomial_cdf evaluates the Negative Binomial CDF.
  negative_binomial_cdf_inv inverts the Negative Binomial CDF.
  negative_binomial_pdf evaluates the Negative Binomial PDF.

  PDF parameter A =      2
  PDF parameter B =           0.25

       X            PDF           CDF            CDf_inv

               8       0.0778656        0.632919               8
               8       0.0778656        0.632919               8
               7       0.0889893        0.555054               7
               5        0.105469        0.367188               5
              23      0.00327031        0.988405              23
               3         0.09375         0.15625               3
               3         0.09375         0.15625               3
               7       0.0889893        0.555054               7
              16       0.0167043        0.936524              16
               8       0.0778656        0.632919               8

negative_binomial_cdf_test
  Normal end of execution.

negative_binomial_sample_test
  Python version: 3.6.9
  negative_binomial_mean computes the Negative Binomial mean
  negative_binomial_sample samples the Negative Binomial distribution
  negative_binomial_variance computes the Negative Binomial variance.

  PDF parameter A =                  2
  PDF parameter B =                       0.75
  PDF mean =                           2.66667
  PDF variance =                      0.888889

  Sample size =       1000
  Sample mean =              2.669
  Sample variance =       0.867439
  Sample maximum =       8
  Sample minimum =       2

negative_binomial_sample_test
  Normal end of execution.

normal_01_cdf_test
  Python version: 3.6.9
  normal_01_cdf evaluates the Normal 01 CDF
  normal_01_cdf_inv inverts the Normal 01 CDF.
  normal_01_pdf evaluates the Normal 01 PDF

       X            PDF           CDF            CDf_inv

       -1.93939       0.0608375       0.0262271        -1.93939
      -0.801237        0.289405        0.211497       -0.801237
       0.132326        0.395465        0.552637        0.132326
        0.55251         0.34247        0.709701         0.55251
          1.952       0.0593624        0.974531           1.952
       -2.84401      0.00699098      0.00222748        -2.84401
      -0.659817        0.320903        0.254686       -0.659817
        0.16505        0.393545        0.565548         0.16505
        -1.9624       0.0581668       0.0248581         -1.9624
        1.15172        0.205529        0.875282         1.15172

normal_01_cdf_test
  Normal end of execution.

normal_01_cdf_values_test:
  Python version: 3.6.9
  normal_01_cdf_values stores values of the unit normal CDF.

      X         normal_01_cdf(X)

      0.000000        0.5000000000000000
      0.100000        0.5398278372770290
      0.200000        0.5792597094391030
      0.300000        0.6179114221889526
      0.400000        0.6554217416103242
      0.500000        0.6914624612740131
      0.600000        0.7257468822499270
      0.700000        0.7580363477769270
      0.800000        0.7881446014166033
      0.900000        0.8159398746532405
      1.000000        0.8413447460685429
      1.500000        0.9331927987311419
      2.000000        0.9772498680518208
      2.500000        0.9937903346742240
      3.000000        0.9986501019683699
      3.500000        0.9997673709209645
      4.000000        0.9999683287581669

normal_01_cdf_values_test:
  Normal end of execution.

normal_01_sample_test
  Python version: 3.6.9
  normal_01_mean computes the Normal 01 mean
  normal_01_sample samples the Normal 01 distribution
  normal_01_variance returns the Normal 01 variance.

  PDF mean =                   0
  PDF variance =               1

  Sample size =       1000
  Sample mean =          0.0202395
  Sample variance =       0.969186
  Sample maximum =         3.08783
  Sample minimum =        -3.20867

normal_01_sample_test
  Normal end of execution.

normal_cdf_test
  Python version: 3.6.9
  normal_cdf evaluates the Normal CDF
  normal_cdf_inv inverts the Normal CDF.
  normal_pdf evaluates the Normal PDF

  PDF parameter MU =               100
  PDF parameter SIGMA =             15

       X            PDF           CDF            CDf_inv

        87.1325       0.0184088        0.195492         87.1325
        102.781       0.0261431         0.57353         102.781
        96.6655        0.025947         0.41204         96.6655
        87.6529       0.0189535        0.205214         87.6529
        97.9292       0.0263439        0.445098         97.9292
        95.1305        0.025231        0.372729         95.1305
        113.277       0.0179764        0.811951         113.277
        98.1902       0.0264033        0.451984         98.1902
        88.6562       0.0199815        0.224748         88.6562
        107.975       0.0230908         0.70252         107.975

normal_cdf_test
  Normal end of execution.

normal_sample_test
  Python version: 3.6.9
  normal_mean computes the Normal mean
  normal_sample samples the Normal distribution
  normal_variance returns the Normal variance.

  PDF parameter MU =               100
  PDF parameter SIGMA =             15
  PDF mean =                       100
  PDF variance =                   225

  Sample size =       1000
  Sample mean =            100.192
  Sample variance =        218.352
  Sample maximum =          149.35
  Sample minimum =         50.9934

normal_sample_test
  Normal end of execution.

normal_truncated_ab_cdf_test
  Python version: 3.6.9
  normal_truncated_ab_cdf evaluates the Normal Truncated AB CDF.
  normal_truncated_ab_cdf_inv inverts the Normal Truncated AB CDF.
  normal_truncated_ab_pdf evaluates the Normal Truncated AB PDF.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [50,150]

       X            PDF           CDF            CDf_inv

         97.5522       0.0166384        0.459142         97.5522
         83.9083       0.0135903         0.24845         83.9083
         96.3442       0.0165406        0.439098         96.3442
         127.019      0.00932295        0.877265         127.019
         93.4677       0.0161573        0.392021         93.4677
         83.7521       0.0135355        0.246331         83.7521
         113.623       0.0144118        0.716962         113.623
         84.0306        0.013633        0.250114         84.0306
         117.536       0.0130725        0.770802         117.536
         87.9678         0.01489        0.306345         87.9678

normal_truncated_ab_cdf_test
  Normal end of execution.

normal_truncated_ab_sample_test
  Python version: 3.6.9
  normal_truncated_ab_mean computes the Normal Truncated AB mean
  normal_truncated_ab_sample samples the Normal Truncated AB distribution
  normal_truncated_ab_variance computes the Normal Truncated AB variance.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [50,150]

  PDF mean      =               100
  PDF variance =                483.588

  Sample size =     1000
  Sample mean =     99.6594
  Sample variance = 479.644
  Sample maximum =  149.966
  Sample minimum =  50.442

normal_truncated_ab_sample_test
  Normal end of execution.

normal_truncated_a_cdf_test
  Python version: 3.6.9
  normal_truncated_a_cdf evaluates the Normal Truncated A CDF.
  normal_truncated_a_cdf_inv inverts the Normal Truncated A CDF.
  normal_truncated_a_pdf evaluates the Normal Truncated A PDF.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [50,+oo)

       X            PDF           CDF            CDf_inv
 
         140.194      0.00448403        0.944799         140.194
         107.179       0.0156697        0.603991         107.179
         95.0761       0.0160155        0.408474         95.0761
         93.4644       0.0157806        0.382843         93.4644
         122.038        0.011072         0.80658         122.038
          124.25        0.010201        0.830116          124.25
         77.9289        0.011059        0.169773         77.9289
         74.0326      0.00952108        0.129673         74.0326
          67.087      0.00686434       0.0729081          67.087
         96.6953       0.0161871        0.434554         96.6953

normal_truncated_a_cdf_test
  Normal end of execution.

normal_truncated_a_sample_test
  Python version: 3.6.9
  normal_truncated_a_mean computes the Normal Truncated A mean
  normal_truncated_a_sample samples the Normal Truncated A distribution
  normal_truncated_a_variance computes the Normal Truncated A variance.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [50,+oo]

  PDF mean      =               101.381
  PDF variance =                554.032

  Sample size =     1000
  Sample mean =     101.025
  Sample variance = 540.355
  Sample maximum =  180.031
  Sample minimum =  50.5508

normal_truncated_a_sample_test
  Normal end of execution.

normal_truncated_b_cdf_test
  Python version: 3.6.9
  normal_truncated_b_cdf evaluates the Normal Truncated B CDF.
  normal_truncated_b_cdf_inv inverts the Normal Truncated B CDF.
  normal_truncated_b_pdf evaluates the Normal Truncated B PDF.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [-oo,150]

       X            PDF           CDF            CDf_inv

         91.1391       0.0153351        0.369922         91.1391
         112.441       0.0144274        0.706709         112.441
         107.301       0.0156475        0.629182         107.301
         113.398       0.0141449        0.720379         113.398
         123.174       0.0106261        0.842189         123.174
         69.6082      0.00779922        0.114663         69.6082
         119.928       0.0118848        0.805635         119.928
         90.2129       0.0151246        0.355814         90.2129
         62.8116      0.00540092       0.0700296         62.8116
         116.095       0.0132727        0.757381         116.095

normal_truncated_b_cdf_test
  Normal end of execution.

normal_truncated_b_sample_test
  Python version: 3.6.9
  normal_truncated_b_mean computes the Normal Truncated B mean
  normal_truncated_b_sample samples the Normal Truncated B distribution
  normal_truncated_b_variance computes the Normal Truncated B variance.

  The "parent" normal distribution has
    mean =               100
    standard deviation = 25
  The parent distribution is truncated to
  the interval [-oo,150]

  PDF mean      =               98.6188
  PDF variance =                554.032

  Sample size =     1000
  Sample mean =     98.3858
  Sample variance = 515.051
  Sample maximum =  149.388
  Sample minimum =  13.9709

normal_truncated_b_sample_test
  Normal end of execution.

owen_values_test:
  Python version: 3.6.9
  owen_values stores values of the OWEN function.

      H         A          T

      0.062500      0.250000      0.038912
      6.500000      0.437500      0.000000
      7.000000      0.968750      0.000000
      4.781250      0.062500      0.000000
      2.000000      0.500000      0.008625
      1.000000      0.999997      0.066742
      1.000000      0.500000      0.043065
      1.000000      1.000000      0.066742
      1.000000      2.000000      0.078468
      1.000000      3.000000      0.079300
      0.500000      0.500000      0.064489
      0.500000      1.000000      0.106671
      0.500000      2.000000      0.141581
      0.500000      3.000000      0.151084
      0.250000      0.500000      0.071347
      0.250000      1.000000      0.120129
      0.250000      2.000000      0.166613
      0.250000      3.000000      0.184750
      0.125000      0.500000      0.073173
      0.125000      1.000000      0.123763
      0.125000      2.000000      0.173744
      0.125000      3.000000      0.195119
      0.007812      0.500000      0.073789
      0.007812      1.000000      0.124995
      0.007812      2.000000      0.176198
      0.007812      3.000000      0.198777
      0.007812     10.000000      0.234089
      0.007812    100.000000      0.247946

owen_values_test:
  Normal end of execution.

pareto_cdf_test
  Python version: 3.6.9
  pareto_cdf evaluates the Pareto CDF
  pareto_cdf_inv inverts the Pareto CDF.
  pareto_pdf evaluates the Pareto PDF

  PDF parameter A =                        0.5
  PDF parameter B =                          5

       X            PDF           CDF            CDf_inv

       0.643974         2.19083        0.717832        0.643974
       0.765045        0.779285        0.880762        0.765045
       0.713439         1.18489        0.830931        0.713439
       0.657388         1.93593        0.745468        0.657388
         0.7618         0.79942          0.8782          0.7618
       0.644356         2.18306        0.718667        0.644356
       0.502391         9.71788       0.0235661        0.502391
       0.618392         2.79408        0.654433        0.618392
       0.617853         2.80872        0.652925        0.617853
       0.705769         1.26429        0.821541        0.705769

pareto_cdf_test
  Normal end of execution.

pareto_sample_test
  Python version: 3.6.9
  pareto_mean computes the Pareto mean
  pareto_sample samples the Pareto distribution
  pareto_variance computes the Pareto variance.

  PDF parameter A =                        0.5
  PDF parameter B =                          5
  PDF mean =                             0.625
  PDF variance =                     0.0260417

  Sample size =       1000
  Sample mean =           0.619695
  Sample variance =      0.0198291
  Sample maximum =         1.90338
  Sample minimum =        0.500289

pareto_sample_test
  Normal end of execution.

pearson_05_pdf_test
  Python version: 3.6.9
  pearson_05_pdf evaluates the Pearson 05 PDF.

  PDF argument X =               5
  PDF parameter A =              1
  PDF parameter B =              2
  PDF parameter C =              3
  PDF value =            0.0758163

pearson_05_pdf_test
  Normal end of execution.

planck_pdf_test
  Python version: 3.6.9
  planck_pdf evaluates the Planck PDF.

  PDF parameter A = 2
  PDF parameter B = 3

       X            PDF

        2.7041       0.21922
        1.7624      0.409364
      0.595859      0.227347
       0.20664     0.0424799
       1.52466      0.434424
       1.79241      0.404832
      0.633885      0.245814
       3.70707     0.0756916
        1.0064      0.387316
       3.24909      0.127476

planck_pdf_test
  Normal end of execution.

planck_sample_test
  Python version: 3.6.9
  planck_mean returns the mean of the Planck distribution.
  planck_sample samples the Planck distribution.
  planck_variance returns the variance of the Planck distribution.


  PDF parameter A =              2
  PDF parameter B =              3

  PDF mean =            3.83223
  PDF variance =        4.11319

  Sample size =       1000
  Sample mean =            1.95125
  Sample variance =        1.10389
  Sample maximum =         6.85112
  Sample minimum =       0.0913896

planck_sample_test
  Normal end of execution.

poisson_cdf_test
  Python version: 3.6.9
  poisson_cdf evaluates the Poisson CDF,
  poisson_cdf_inv inverts the Poisson CDF.
  poisson_pdf evaluates the Poisson PDF.

  PDF parameter A =              10

       X            PDF           CDF            CDf_inv

              10         0.12511         0.58304              10
              10         0.12511         0.58304              10
              15       0.0347181         0.95126              15
               7       0.0900792        0.220221               7
              13       0.0729079        0.864464              13
               7       0.0900792        0.220221               7
              16       0.0216988        0.972958              16
              12       0.0947803        0.791556              12
               5       0.0378333        0.067086               5
              15       0.0347181         0.95126              15

poisson_cdf_test
  Normal end of execution.

poisson_sample_test
  Python version: 3.6.9
  poisson_mean computes the Poisson mean
  poisson_sample samples the Poisson distribution
  poisson_variance computes the Poisson variance.

  PDF parameter A =                         10
  PDF mean =                                10
  PDF variance =                            10

  Sample size =       1000
  Sample mean =             10.084
  Sample variance =        10.0229
  Sample maximum =      21
  Sample minimum =       2

poisson_sample_test
  Normal end of execution.

power_cdf_test
  Python version: 3.6.9
  power_cdf evaluates the Power CDF
  power_cdf_inv inverts the Power CDF.
  power_pdf evaluates the Power PDF

  PDF parameter A =                    2
  PDF parameter B =                    3

       X            PDF           CDF            CDf_inv

        2.24473         0.49883         0.55987         2.24473
        1.90713        0.423806        0.404125         1.90713
        2.77906        0.617568        0.858129         2.77906
        1.56663         0.34814        0.272704         1.56663
        2.66853        0.593006        0.791227         2.66853
         2.6847        0.596601        0.800848          2.6847
        2.74477        0.609949        0.837084         2.74477
        2.62972        0.584383        0.768384         2.62972
        2.13985        0.475522        0.508773         2.13985
        2.14837        0.477416        0.512834         2.14837

power_cdf_test
  Normal end of execution.

power_sample_test
  Python version: 3.6.9
  power_mean computes the Power mean
  power_sample samples the Power distribution
  power_variance computes the Power variance.

  PDF parameter A =                          2
  PDF parameter B =                          3
  PDF mean =                                 2
  PDF variance =                           0.5

  Sample size =       1000
  Sample mean =            2.02016
  Sample variance =       0.487097
  Sample maximum =         2.99876
  Sample minimum =        0.101401

power_sample_test
  Normal end of execution.

psi_values_test:
  Python version: 3.6.9
  psi_values stores values of the PSI function.

      X         PSI(X)

      0.100000      -10.4237549404110794
      0.200000       -5.2890398965921879
      0.300000       -3.5025242222001332
      0.400000       -2.5613845445851160
      0.500000       -1.9635100260214231
      0.600000       -1.5406192138931900
      0.700000       -1.2200235536979349
      0.800000       -0.9650085667061385
      0.900000       -0.7549269499470515
      1.000000       -0.5772156649015329
      1.100000       -0.4237549404110768
      1.200000       -0.2890398965921883
      1.300000       -0.1691908888667997
      1.400000       -0.0613845445851161
      1.500000        0.0364899739785765
      1.600000        0.1260474527734763
      1.700000        0.2085478748734940
      1.800000        0.2849914332938615
      1.900000        0.3561841611640597
      2.000000        0.4227843350984671

psi_values_test:
  Normal end of execution.

quasigeometric_cdf_test
  Python version: 3.6.9
  quasigeometric_cdf evaluates the Quasigeometric CDF
  quasigeometric_cdf_inv inverts the Quasigeometric CDF.
  quasigeometric_pdf evaluates the Quasigeometric PDF

  PDF parameter A =         0.4825
  PDF parameter B =         0.5893

       X            PDF           CDF            CDf_inv

               2        0.125248        0.820285               3
               0          0.4825          0.4825               1
               6       0.0151049        0.978327               7
               2        0.125248        0.820285               3
              11      0.00107349         0.99846              11
               1        0.212537        0.695037               2
               0          0.4825          0.4825               1
               1        0.212537        0.695037               2
               0          0.4825          0.4825               1
               0          0.4825          0.4825               1

quasigeometric_cdf_test
  Normal end of execution.

quasigeometric_sample_test
  quasigeometric_mean computes the Quasigeometric mean
  quasigeometric_sample samples the Quasigeometric distribution
  quasigeometric_variance computes the Quasigeometric variance.

  PDF parameter A =         0.4825
  PDF parameter B =         0.5893

  PDF parameter A =                     0.4825
  PDF mean =                           1.26004
  PDF variance =                       3.28832

  Sample size =       1000
  Sample mean =              1.307
  Sample variance =        3.52675
  Sample maximum =      13
  Sample minimum =       0

quasigeometric_sample_test
  Normal end of execution.

r8_beta_test:
  Python version: 3.6.9
  r8_beta evaluates the BETA function.

      X         Y         BETA(X,Y)         r8_beta(X,Y)
                          tabulated         computed.

           0.2             1                         5                         5
           0.4             1                       2.5                       2.5
           0.6             1         1.666666666666667         1.666666666666667
           0.8             1                      1.25                      1.25
             1           0.2                         5                         5
             1           0.4                       2.5                       2.5
             1             1                         1                         1
             2             2        0.1666666666666667        0.1666666666666667
             3             3       0.03333333333333333       0.03333333333333333
             4             4      0.007142857142857143      0.007142857142857143
             5             5      0.001587301587301587      0.001587301587301587
             6             2       0.02380952380952381       0.02380952380952381
             6             3      0.005952380952380952      0.005952380952380952
             6             4      0.001984126984126984      0.001984126984126984
             6             5     0.0007936507936507937     0.0007936507936507937
             6             6     0.0003607503607503608     0.0003607503607503608
             7             7     8.325008325008325e-05     8.325008325008325e-05

r8_beta_test:
  Normal end of execution.

r8_csc_test
  Python version: 3.6.9
  r8_csc computes the cosecant of an angle.

  ANGLE    r8_csc(ANGLE)

      0.00    Undefined
     15.00         1.46037
     30.00        -1.00194
     45.00         1.29876
     60.00        -8.05172
     75.00        -1.69796
     90.00          1.0177
    105.00        -1.18588
    120.00         4.05727
    135.00         2.06607
    150.00        -1.05049
    165.00         1.10683
    180.00    Undefined
    195.00        -2.69119
    210.00         1.10311
    225.00        -1.05294
    240.00         2.09321
    255.00         3.94632
    270.00        -1.18053
    285.00          1.0191
    300.00        -1.71484
    315.00        -7.61642
    330.00         1.29113
    345.00        -1.00241
    360.00    Undefined

r8_csc_test
  Normal end of execution.

r8_erf_test:
  Python version: 3.6.9
  r8_erf evaluates the error function.

      X            ERF(X)    r8_erf(X)

             0                         0                         0
           0.1        0.1124629160182849        0.1124629160182849
           0.2        0.2227025892104785        0.2227025892104785
           0.3        0.3286267594591274        0.3286267594591273
           0.4        0.4283923550466685        0.4283923550466684
           0.5        0.5204998778130465        0.5204998778130465
           0.6        0.6038560908479259        0.6038560908479259
           0.7        0.6778011938374185        0.6778011938374184
           0.8        0.7421009647076605        0.7421009647076605
           0.9        0.7969082124228321        0.7969082124228322
             1        0.8427007929497149        0.8427007929497148
           1.1        0.8802050695740817        0.8802050695740817
           1.2        0.9103139782296354        0.9103139782296354
           1.3        0.9340079449406524        0.9340079449406524
           1.4        0.9522851197626488        0.9522851197626487
           1.5        0.9661051464753106        0.9661051464753108
           1.6         0.976348383344644         0.976348383344644
           1.7        0.9837904585907746        0.9837904585907746
           1.8        0.9890905016357306        0.9890905016357308
           1.9        0.9927904292352575        0.9927904292352574
             2        0.9953222650189527        0.9953222650189527

r8_erf_test
  Normal end of execution.

r8_gamma_inc_test:
  Python version: 3.6.9
  r8_gamma_inc evaluates the normalized incomplete Gamma
  function P(A,X).

         A         X         Exact F  r8_gamma_inc(A,X)

       0.1      0.03          2.4903        0.738235
       0.1       0.3        0.871837        0.908358
       0.1       1.5        0.107921        0.988656
       0.5     0.075         1.23812        0.301465
       0.5      0.75         0.39113        0.779329
       0.5       3.5       0.0144472        0.991849
         1       0.1        0.904837       0.0951626
         1         1        0.367879        0.632121
         1         5      0.00673795        0.993262
       1.1       0.1        0.882797       0.0720597
       1.1         1        0.390833        0.589181
       1.1         5      0.00805146        0.991537
         2      0.15        0.989814       0.0101858
         2       1.5        0.557825        0.442175
         2         7      0.00729506        0.992705
         6       2.5         114.957        0.042021
         6        12         2.44092        0.979659
        11        16          280855        0.922604
        26        25     8.57648e+24        0.447079
        41        45     2.08503e+47        0.744455

r8_gamma_inc_test
  Normal end of execution.

r8_zeta_test
  Python version: 3.6.9
  r8_zeta estimates the Zeta function.

       P     r8_zeta(P)

       1    1.79769e+308
       2         1.64493
       3         1.20206
       4         1.08232
       5         1.03693
       6         1.01734
       7         1.00835
       8         1.00408
       9         1.00201
      10         1.00099
      11         1.00049
      12         1.00025
      13         1.00012
      14         1.00006
      15         1.00003
      16         1.00002
      17         1.00001
      18               1
      19               1
      20               1
      21               1
      22               1
      23               1
      24               1
      25               1

       3         1.20206
   3.125         1.17905
    3.25         1.15915
   3.375         1.14185
     3.5         1.12673
   3.625         1.11347
    3.75         1.10179
   3.875         1.09147
       4         1.08232

r8_zeta_test
  Normal end of execution.

r8poly_print_test
  Python version: 3.6.9
  r8poly_print prints an R8POLY.

  The R8POLY:

  p(x) =   9 * x^5
         + 0.78 * x^4
         + 56 * x^2
         - 3.4 * x
         + 12

r8poly_print_test:
  Normal end of execution.

r8poly_value_horner_test
  Python version: 3.6.9
  r8poly_value_horner evaluates a polynomial at a point
  using Horners method.

  The polynomial coefficients:

  p(x) =   1 * x^4
         - 10 * x^3
         + 35 * x^2
         - 50 * x
         + 24

   I    X    P(X)

   0    0.0000              24
   1    0.3333         10.8642
   2    0.6667         3.45679
   3    1.0000               0
   4    1.3333       -0.987654
   5    1.6667       -0.691358
   6    2.0000               0
   7    2.3333        0.493827
   8    2.6667        0.493827
   9    3.0000               0
  10    3.3333       -0.691358
  11    3.6667       -0.987654
  12    4.0000               0
  13    4.3333         3.45679
  14    4.6667         10.8642
  15    5.0000              24

r8poly_value_horner_test:
  Normal end of execution.

r8row_max_test
  Python version: 3.6.9
  r8row_max computes maximums of an R8ROW.

  The matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             2             3             4  
      1 :           5             6             7             8  
      2 :           9            10            11            12  

  Row maximums:

     0:             4
     1:             8
     2:            12

r8row_max_test:
  Normal end of execution.

r8row_mean_test
  Python version: 3.6.9
  r8row_mean computes row means of an R8ROW.

  The matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             2             3             4  
      1 :           5             6             7             8  
      2 :           9            10            11            12  

  The row means:

     0:           2.5
     1:           6.5
     2:          10.5

r8row_mean_test:
  Normal end of execution.

r8row_min_test
  Python version: 3.6.9
  r8row_min computes minimums of an R8ROW.

  The matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             2             3             4  
      1 :           5             6             7             8  
      2 :           9            10            11            12  

  Row minimums:

     0:             1
     1:             5
     2:             9

r8row_min_test:
  Normal end of execution.

r8row_variance_test
  Python version: 3.6.9
  r8row_variance computes variances of an R8ROW.

  The matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             2             3             4  
      1 :           5             6             7             8  
      2 :           9            10            11            12  

  The row variances:

     0:       1.66667
     1:       1.66667
     2:       1.66667

r8row_variance_test:
  Normal end of execution.

r8vec_dot_product_test:
  Python version: 3.6.9
  r8vec_dot_product computes the dot product of two R8VEC's.

  V1 and V2:

       0:      0.0596956      0.485868
       1:       0.701606      0.838835
       2:       0.317686      0.861408
       3:       0.809901      0.581036
       4:       0.174314      0.753956
       5:       0.428125      0.978454
       6:       0.513866      0.804851
       7:       0.291499      0.335972
       8:       0.932295      0.657618
       9:       0.420556      0.311879

  V1 dot V2 = 3.16788

r8vec_dot_product_test:
  Normal end of execution.

r8vec_transpose_print_test
  Python version: 3.6.9
  r8vec_transpose_print() prints an R8VEC "tranposed",
  that is, placing multiple entries on a line.
  The vector X:               1           2.1           3.2           4.3           5.4
                            6.5           7.6           8.7           9.8          10.9
                             11

r8vec_transpose_print_test
  Normal end of execution.

r8vec2_print_test
  Python version: 3.6.9
  r8vec2_print() prints a pair of R8VEC's.

  Print a pair of R8VEC's:

       0:              0             0
       1:            0.2          0.04
       2:            0.4          0.16
       3:            0.6          0.36
       4:            0.8          0.64
       5:              1             1

r8vec2_print_test:
  Normal end of execution.

rayleigh_cdf_test
  Python version: 3.6.9
  rayleigh_cdf evaluates the Rayleigh CDF
  rayleigh_cdf_inv inverts the Rayleigh CDF.
  rayleigh_pdf evaluates the Rayleigh PDF

  PDF parameter A =                          2

       X            PDF           CDF            CDf_inv

        2.75403        0.266785        0.612517         2.75403
        2.92499        0.250963        0.656801         2.92499
       0.169866       0.0423136       0.0036003        0.169866
        3.51476        0.187587        0.786515         3.51476
         1.7611        0.298782        0.321373          1.7611
        4.76172       0.0699527        0.941238         4.76172
        4.16258        0.119308        0.885352         4.16258
       0.877219        0.199193       0.0917078        0.877219
       0.526169        0.127068       0.0340147        0.526169
        2.77427        0.265012          0.6179         2.77427

rayleigh_cdf_test
  Normal end of execution.

rayleigh_sample_test
  Python version: 3.6.9
  rayleigh_mean computes the Rayleigh mean
  rayleigh_sample samples the Rayleigh distribution
  rayleigh_variance computes the Rayleigh variance.

  PDF parameter A =                          2
  PDF mean =                           2.50663
  PDF variance =                       1.71681

  Sample size =       1000
  Sample mean =            2.50812
  Sample variance =        1.72893
  Sample maximum =         6.63519
  Sample minimum =       0.0684439

rayleigh_sample_test
  Normal end of execution.

reciprocal_cdf_test
  Python version: 3.6.9
  reciprocal_cdf evaluates the Reciprocal CDF.
  reciprocal_cdf_inv inverts the Reciprocal CDF.
  reciprocal_pdf evaluates the Reciprocal PDF.

  PDF parameter A =                      1
  PDF parameter B =                      3

       X            PDF           CDF            CDf_inv

        1.96179        0.463984        0.613371         1.96179
        1.48347        0.613587        0.358985         1.48347
        1.32559        0.686666        0.256559         1.32559
        1.97754        0.460289         0.62065         1.97754
        1.23325        0.738079        0.190838         1.23325
        2.50943        0.362728         0.83747         2.50943
        2.17208        0.419064        0.706058         2.17208
        2.20901        0.412057        0.721405         2.20901
        2.51587        0.361799        0.839805         2.51587
        1.83377        0.496375        0.551946         1.83377

reciprocal_cdf_test
  Normal end of execution.

reciprocal_sample_test
  Python version: 3.6.9
  reciprocal_mean computes the Reciprocal mean
  reciprocal_sample samples the Reciprocal distribution
  reciprocal_variance computes the Reciprocal variance.

  PDF parameter A =                    1
  PDF parameter B =                    3
  PDF mean =                     1.82048
  PDF variance =                0.326815

  Sample size =       1000
  Sample mean =            1.82628
  Sample variance =       0.332797
  Sample maximum =         2.99699
  Sample minimum =         1.00027

reciprocal_sample_test
  Normal end of execution.

sech_cdf_test
  Python version: 3.6.9
  sech_cdf evaluates the Sech CDF.
  sech_cdf_inv inverts the Sech CDF.
  sech_pdf evaluates the Sech PDF.

  PDF parameter A =                      3
  PDF parameter B =                      2

       X            PDF           CDF            CDf_inv

        1.82238        0.135059        0.322553         1.82238
        4.57922         0.11982        0.728677         4.57922
        3.50348        0.154242        0.579298         3.50348
        4.33764        0.129171        0.698593         4.33764
       0.709551       0.0919625        0.196096        0.709551
        1.78719        0.133792        0.317822         1.78719
        7.59998        0.031596        0.936385         7.59998
       0.476437       0.0834395         0.17566        0.476437
        5.24749       0.0935817        0.799919         5.24749
        14.8397     0.000854857         0.99829         14.8397

sech_cdf_test
  Normal end of execution.

sech_sample_test
  Python version: 3.6.9
  sech_mean computes the Sech mean
  sech_sample samples the Sech distribution
  sech_variance computes the Sech variance.

  PDF parameter A =                          3
  PDF parameter B =                          2
  PDF mean =                                 3
  PDF variance =                        9.8696

  Sample size =       1000
  Sample mean =            3.08278
  Sample variance =        9.09735
  Sample maximum =         15.9749
  Sample minimum =        -11.6382

sech_sample_test
  Normal end of execution.

semicircular_cdf_test
  Python version: 3.6.9
  semicircular_cdf evaluates the Semicircular CDF.
  semicircular_cdf_inv inverts the Semicircular CDF.
  semicircular_pdf evaluates the Semicircular PDF.

  PDF parameter A =                      3
  PDF parameter B =                      2

       X            PDF           CDF            CDf_inv

        2.61582        0.312382        0.378467         2.61572
        4.25383        0.247992        0.871152         4.25391
        4.35534        0.234074        0.895636         4.35547
        2.10167        0.284394        0.223983         2.10156
        3.32794        0.314002        0.603915         3.32812
        1.40107        0.191212       0.0522482         1.40137
        2.49364        0.307939        0.340558         2.49365
        4.38784        0.229199        0.903165          4.3877
        1.63121        0.232083        0.101229         1.63086
        3.25511         0.31571        0.580983         3.25488

semicircular_cdf_test
  Normal end of execution.

semicircular_sample_test
  Python version: 3.6.9
  semicircular_mean computes the Semicircular mean
  semicircular_sample samples the Semicircular distribution
  semicircular_variance computes the Semicircular variance.

  PDF parameter A =                          3
  PDF parameter B =                          2
  PDF mean =                                 3
  PDF variance =                             1

  Sample size =       1000
  Sample mean =            2.94933
  Sample variance =       0.975703
  Sample maximum =         4.94629
  Sample minimum =         1.01816

semicircular_sample_test
  Normal end of execution.

sin_power_int_test
  Python version: 3.6.9
  sin_power_int returns values of
  the integral of SIN(X)^N from A to B.

      A         B          N      Exact           Computed

  10.000000  20.000000       0    1.000000e+01    1.000000e+01
  0.000000  1.000000       1    4.596977e-01    4.596977e-01
  0.000000  1.000000       2    2.726756e-01    2.726756e-01
  0.000000  1.000000       3    1.789406e-01    1.789406e-01
  0.000000  1.000000       4    1.240256e-01    1.240256e-01
  0.000000  1.000000       5    8.897440e-02    8.897440e-02
  0.000000  2.000000       5    9.039312e-01    9.039312e-01
  1.000000  2.000000       5    8.149568e-01    8.149568e-01
  0.000000  1.000000      10    2.188752e-02    2.188752e-02
  0.000000  1.000000      11    1.702344e-02    1.702344e-02

sin_power_int_test
  Normal end of execution.

sin_power_int_values_test:
  Python version: 3.6.9
  sin_power_int_values stores values of the cosine power integral.

        A             B            N           F

     10.000000     20.000000       0                        10
      0.000000      1.000000       1        0.4596976941318603
      0.000000      1.000000       2        0.2726756432935796
      0.000000      1.000000       3        0.1789405625488581
      0.000000      1.000000       4        0.1240255653152068
      0.000000      1.000000       5       0.08897439645157594
      0.000000      2.000000       5        0.9039312384814995
      1.000000      2.000000       5        0.8149568420299235
      0.000000      1.000000      10       0.02188752242172985
      0.000000      1.000000      11       0.01702343937406933

sin_power_int_values_test:
  Normal end of execution.

stirling2_test:
  Python version: 3.6.9
  stirling2 returns Stirling numbers of the second kind.

  stirling2 matrix:

  Col:       0        1        2        3        4        5        6        7  
  Row
    0:       1        0        0        0        0        0        0        0  
    1:       1        1        0        0        0        0        0        0  
    2:       1        3        1        0        0        0        0        0  
    3:       1        7        6        1        0        0        0        0  
    4:       1       15       25       10        1        0        0        0  
    5:       1       31       90       65       15        1        0        0  
    6:       1       63      301      350      140       21        1        0  
    7:       1      127      966     1701     1050      266       28        1  

stirling2_test:
  Normal end of execution.

student_cdf_test
  Python version: 3.6.9
  student_cdf evaluates the Student CDF.
  student_pdf evaluates the Student PDF.

  PDF argument X =             2.447
  PDF parameter A =              0.5
  PDF parameter B =                2
  PDF parameter C =                6
  PDF value =                0.14754
  CDF value =               0.816049

student_cdf_test
  Normal end of execution.

student_sample_test
  Python version: 3.6.9
  student_mean computes the Student mean
  student_sample samples the Student distribution
  student_variance computes the Student variance.

  PDF parameter A =                        0.5
  PDF parameter B =                          2
  PDF parameter C =                          6
  PDF mean =                               0.5
  PDF variance =                             6

  Sample size =       1000
  Sample mean =            0.53814
  Sample variance =          8.496
  Sample maximum =          17.237
  Sample minimum =        -75.9131

student_sample_test
  Normal end of execution.

student_noncentral_cdf_test
  Python version: 3.6.9
  student_noncentral_cdf evaluates the Student Noncentral CDF

  PDF argument X =                         0.5
  PDF parameter IDF =               10
  PDF parameter B =                          1
  CDF value =                          0.30528

student_noncentral_cdf_test
  Normal end of execution.

tfn_test
  Python version: 3.6.9
  tfn evaluates Owen's T function.

      H             A           T(H,A)       Exact

          0.0625            0.25       0.0389119       0.0389119
             6.5          0.4375     2.00058e-11     2.00058e-11
               7         0.96875     6.39906e-13     6.39906e-13
         4.78125          0.0625      1.0633e-07      1.0633e-07
               2             0.5      0.00862508      0.00862508
               1        0.999997       0.0667418       0.0667418
               1             0.5       0.0430647       0.0430647
               1               1       0.0667419       0.0667419
               1               2       0.0784682       0.0784682
               1               3       0.0792995       0.0792995
             0.5             0.5       0.0644886       0.0644886
             0.5               1        0.106671        0.106671
             0.5               2        0.141581        0.141581
             0.5               3        0.151084        0.151084
            0.25             0.5       0.0713466       0.0713466
            0.25               1        0.120129        0.120129
            0.25               2        0.166613        0.166613
            0.25               3         0.18475         0.18475
           0.125             0.5       0.0731727       0.0731727
           0.125               1        0.123763        0.123763
           0.125               2        0.173744        0.173744
           0.125               3        0.195119        0.195119
       0.0078125             0.5       0.0737894       0.0737894
       0.0078125               1        0.124995        0.124995
       0.0078125               2        0.176198        0.176198
       0.0078125               3        0.198777        0.198777
       0.0078125              10        0.234074        0.234089
       0.0078125             100        0.233737        0.247946

tfn_test
  Normal end of execution.

triangle_cdf_test
  Python version: 3.6.9
  triangle_cdf evaluates the Triangle CDF
  triangle_cdf_inv inverts the Triangle CDF.
  triangle_pdf evaluates the Triangle PDF

  PDF parameter A =                   1
  PDF parameter B =                   3
  PDF parameter C =                  10

       X            PDF           CDF            CDf_inv

        5.57247        0.140557         0.68884         5.57247
        3.53565        0.205218          0.3367         3.53565
        5.47753         0.14357        0.675353         5.47753
        4.77037         0.16602        0.565888         4.77037
        7.12689       0.0912097        0.868972         7.12689
        4.17815        0.184821        0.462001         4.17815
        1.81473        0.090526       0.0368773         1.81473
        1.69993       0.0777702       0.0272169         1.69993
        7.42261       0.0818219        0.894556         7.42261
        7.05181       0.0935932        0.862035         7.05181

triangle_cdf_test
  Normal end of execution.

triangle_sample_test
  Python version: 3.6.9
  triangle_mean returns the Triangle mean
  triangle_sample samples the Triangle distribution
  triangle_variance returns the Triangle variance

  PDF parameter A =                          1
  PDF parameter B =                          3
  PDF parameter C =                         10

  PDF parameter MEAN =                 4.66667
  PDF parameter VARIANCE =             3.72222

  Sample size =       1000
  Sample mean =            4.64587
  Sample variance =        3.60951
  Sample maximum =         9.70521
  Sample minimum =         1.15826

triangle_sample_test
  Normal end of execution.

triangular_cdf_test
  Python version: 3.6.9
  triangular_cdf evaluates the Triangular CDF
  triangular_cdf_inv inverts the Triangular CDF.
  triangular_pdf evaluates the Triangular PDF

  PDF parameter A =                   1
  PDF parameter B =                  10

       X            PDF           CDF            CDf_inv

        4.20494        0.158269        0.253621         4.20494
        4.39259        0.167535         0.28419         4.39259
        7.14226        0.141123        0.798354         7.14226
        3.47574        0.122259         0.15134         3.47574
        3.54784        0.125819        0.160283         3.54784
        5.30831        0.212756         0.45831         5.30831
        8.35567       0.0812013        0.933239         8.35567
        5.04592        0.199799        0.404185         5.04592
        7.61246        0.117903         0.85925         7.61246
        4.52904        0.174273        0.307509         4.52904

triangular_cdf_test
  Normal end of execution.

triangular_sample_test
  Python version: 3.6.9
  triangular_mean computes the Triangular mean
  triangular_sample samples the Triangular distribution
  triangular_variance computes the Triangular variance.

  PDF parameter A =                          1
  PDF parameter B =                         10
  PDF mean =                               5.5
  PDF variance =                         3.375

  Sample size =       1000
  Sample mean =            5.40519
  Sample variance =        3.23912
  Sample maximum =         9.73286
  Sample minimum =         1.06855

triangular_sample_test
  Normal end of execution.

trigamma_test:
  Python version: 3.6.9
  trigamma evaluates the trigamma function.

      X               FX               FX
                      Tabulated        Computed

             1         1.644934066848226         1.644934065473016
           1.1         1.433299150792759          1.43329914968199
           1.2         1.267377205423779         1.267377204522996
           1.3         1.134253434996619         1.134253434263296
           1.4         1.025356590529597         1.025356589930374
           1.5        0.9348022005446793        0.9348022000532704
           1.6        0.8584318931245799        0.8584318927201864
           1.7        0.7932328301639984         0.793232829830095
           1.8        0.7369741375017002        0.7369741372251055
           1.9        0.6879720582426356        0.6879720580127948
             2        0.6449340668482264        0.6449340654730159

trigamma_test
  Normal end of execution.

trigamma_values_test:
  Python version: 3.6.9
  trigamma_values stores values of the trigamma function.

      X         trigamma(X)

      1.000000        1.6449340668482260
      1.100000        1.4332991507927590
      1.200000        1.2673772054237791
      1.300000        1.1342534349966189
      1.400000        1.0253565905295969
      1.500000        0.9348022005446793
      1.600000        0.8584318931245799
      1.700000        0.7932328301639984
      1.800000        0.7369741375017002
      1.900000        0.6879720582426356
      2.000000        0.6449340668482264

trigamma_values_test:
  Normal end of execution.

uniform_01_cdf_test
  Python version: 3.6.9
  uniform_01_cdf evaluates the Uniform 01 CDF
  uniform_01_cdf_inv inverts the Uniform 01 CDF.
  uniform_01_pdf evaluates the Uniform 01 PDF

       X            PDF           CDF            CDf_inv

       0.980558               1        0.980558        0.980558
       0.724138               1        0.724138        0.724138
      0.0190284               1       0.0190284       0.0190284
       0.144339               1        0.144339        0.144339
       0.415833               1        0.415833        0.415833
       0.179284               1        0.179284        0.179284
       0.718309               1        0.718309        0.718309
       0.732592               1        0.732592        0.732592
       0.976242               1        0.976242        0.976242
       0.517377               1        0.517377        0.517377

uniform_01_cdf_test
  Normal end of execution.

uniform_01_sample_test
  Python version: 3.6.9
  uniform_01_mean computes the Uniform 01 mean
  uniform_01_sample samples the Uniform 01 distribution
  uniform_01_variance computes the Uniform 01 variance.

  PDF mean =                       0.5
  PDF variance =             0.0833333

  Sample size =       1000
  Sample mean =           0.487928
  Sample variance =      0.0821952
  Sample maximum =        0.999274
  Sample minimum =     0.000221806

uniform_01_sample_test
  Normal end of execution.

uniform_01_order_sample_test
  Python version: 3.6.9
  uniform_order_sample samples the Uniform 01 Order distribution.

  Ordered sample:

     0:     0.0499313
     1:      0.120632
     2:      0.278323
     3:      0.345461
     4:      0.421443
     5:      0.453921
     6:      0.645472
     7:      0.683685
     8:      0.769824
     9:      0.901097

uniform_01_order_sample_test
  Normal end of execution.

uniform_cdf_test
  Python version: 3.6.9
  uniform_cdf evaluates the Uniform CDF
  uniform_cdf_inv inverts the Uniform CDF.
  uniform_pdf evaluates the Uniform PDF

  PDF parameter A =                   1
  PDF parameter B =                  10

       X            PDF           CDF            CDf_inv

        4.29897        0.111111        0.366552         4.29897
        1.13183        0.111111       0.0146483         1.13183
        7.60643        0.111111        0.734048         7.60643
        8.47157        0.111111        0.830174         8.47157
        2.73519        0.111111        0.192799         2.73519
        2.82553        0.111111        0.202837         2.82553
        7.42767        0.111111        0.714186         7.42767
        7.45324        0.111111        0.717027         7.45324
        4.47884        0.111111        0.386538         4.47884
        9.51663        0.111111        0.946292         9.51663

uniform_cdf_test
  Normal end of execution.

uniform_sample_test
  Python version: 3.6.9
  uniform_mean computes the Uniform mean
  uniform_sample samples the Uniform distribution
  uniform_variance computes the Uniform variance.

  PDF parameter A =                  1
  PDF parameter B =                 10
  PDF mean =                       5.5
  PDF variance =                  6.75

  Sample size =       1000
  Sample mean =            5.44568
  Sample variance =        7.07127
  Sample maximum =         9.98553
  Sample minimum =         1.00176

uniform_sample_test
  Normal end of execution.

uniform_discrete_cdf_test
  Python version: 3.6.9
  uniform_discrete_cdf evaluates the Uniform Discrete CDF
  uniform_discrete_cdf_inv inverts the Uniform Discrete CDF.
  uniform_discrete_pdf evaluates the Uniform Discrete PDF

  PDF parameter A =                  1
  PDF parameter B =                  6

       X            PDF           CDF            CDf_inv

               5        0.166667        0.833333               6
               5        0.166667        0.833333               6
               3        0.166667             0.5               4
               2        0.166667        0.333333               3
               4        0.166667        0.666667               5
               3        0.166667             0.5               4
               3        0.166667             0.5               4
               5        0.166667        0.833333               6
               5        0.166667        0.833333               6
               4        0.166667        0.666667               5

uniform_discrete_cdf_test
  Normal end of execution.

uniform_discrete_sample_test
  Python version: 3.6.9
  uniform_discrete_mean computes the Uniform Discrete mean
  uniform_discrete_sample samples the Uniform Discrete distribution
  uniform_discrete_variance computes the Uniform Discrete variance.

  PDF parameter A =                  1
  PDF parameter B =                  6
  PDF mean =                               3.5
  PDF variance =                       2.91667

  Sample size =       1000
  Sample mean =              3.596
  Sample variance =        2.91878
  Sample maximum =       6
  Sample minimum =       1

uniform_discrete_sample_test
  Normal end of execution.

uniform_nsphere_sample_test
  Python version: 3.6.9
  uniform_nsphere_sample samples the Uniform Nsphere distribution.

  Dimension N of sphere =            3

  Points on the sphere:

       -0.605433     -0.642189     -0.470153
       -0.709769     -0.121315      0.693909
       -0.230619      0.542392     -0.807852
        0.698536      0.506894       0.50508
       -0.545142     -0.398564      0.737541
         0.27441      0.616327      0.738133
         0.59099      0.802597     0.0810502
         0.78099     -0.363899     -0.507575
       -0.723626     -0.437877     -0.533507
       -0.293984     -0.551835      0.780418

uniform_nsphere_sample_test
  Normal end of execution.

von_mises_cdf_test
  Python version: 3.6.9
  von_mises_cdf evaluates the Von Mises CDF.
  von_mises_cdf_inv inverts the Von Mises CDF.
  von_mises_pdf evaluates the Von Mises PDF.

  PDF parameter A =                   1
  PDF parameter B =                   2

       X            PDF           CDF            CDf_inv

        2.05815        0.186205        0.900968         2.05845
        1.12467        0.507939        0.563985         1.12464
       0.373594        0.352893        0.213944        0.373369
        1.05277        0.514451        0.527197         1.05292
       0.846297        0.503864        0.421326        0.846218
       0.133949        0.255077         0.14122        0.134068
         1.6988        0.322826        0.810516         1.69873
       0.889627        0.509645         0.44329        0.889553
        1.33562        0.461415        0.666888         1.33556
       0.490304        0.400082         0.25791        0.490335

von_mises_cdf_test
  Normal end of execution.

von_mises_sample_test
  Python version: 3.6.9
  von_mises_mean computes the Von Mises mean
  von_mises_sample samples the Von Mises distribution.
  von_mises_circular_variance computes the Von Mises circular variance

  PDF parameter A =                          1
  PDF parameter B =                          2
  PDF mean =                           1
  PDF circular variance =       0.302225

  Sample size =                1000
  Sample mean =                    0.962114
  Sample circular variance =       0.311479
  Sample maximum =                  4.10587
  Sample minimum =                 -2.14061

von_mises_sample_test
  Normal end of execution.

weibull_cdf_test
  Python version: 3.6.9
  weibull_cdf evaluates the Weibull CDF
  weibull_cdf_inv inverts the Weibull CDF.
  weibull_pdf evaluates the Weibull PDF

  PDF parameter A =                          2
  PDF parameter B =                          3
  PDF parameter C =                          4

       X            PDF           CDF            CDf_inv

        4.19408        0.391812        0.248815         4.19408
        5.12091        0.465333        0.690011         5.12091
        5.03739        0.483863        0.650342         5.03739
        5.05081        0.481225        0.656814         5.05081
        4.46085        0.467956        0.364122         4.46085
        4.92526        0.500567        0.595056         4.92526
        4.50312        0.477016        0.384098         4.50312
        5.78435         0.21275        0.920509         5.78435
         5.7214         0.23844        0.906312          5.7214
        4.92967        0.500095        0.597262         4.92967

weibull_cdf_test
  Normal end of execution.

weibull_sample_test
  Python version: 3.6.9
  weibull_mean computes the Weibull mean
  weibull_sample samples the Weibull distribution
  weibull_variance computes the Weibull variance.

  PDF parameter A =                    2
  PDF parameter B =                    3
  PDF parameter C =                    4
  PDF mean =                     4.71921
  PDF variance =                0.581953

  Sample size =       1000
  Sample mean =            4.66348
  Sample variance =       0.569144
  Sample maximum =         6.74074
  Sample minimum =         2.37805

weibull_sample_test
  Normal end of execution.

weibull_discrete_cdf_test
  Python version: 3.6.9
  weibull_discrete_cdf evaluates the Weibull Discrete CDF
  weibull_discrete_cdf_inv inverts the Weibull Discrete CDF.
  weibull_discrete_pdf evaluates the Weibull Discrete PDF

  PDF parameter A =                        0.5
  PDF parameter B =                        1.5

       X            PDF           CDF            CDf_inv

               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               2        0.113508        0.972723               3
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1
               1        0.359214        0.859214               1

weibull_discrete_cdf_test
  Normal end of execution.

weibull_discrete_sample_test
  Python version: 3.6.9
  weibull_discrete_sample samples the Weibull Discrete distribution

  PDF parameter A =                0.5
  PDF parameter B =                1.5

  Sample size =       1000
  Sample mean =               1.17
  Sample variance =         0.2071
  Sample maximum =       4
  Sample minimum =       1

weibull_discrete_sample_test
  Normal end of execution.

zipf_cdf_test
  Python version: 3.6.9
  zipf_pdf evaluates the Zipf PDF.
  zipf_cdf evaluates the Zipf CDF.
  zipf_cdf_inv inverts the Zipf CDF.

  PDF parameter A =              2

       X          PDF(X)          CDF(X)  CDf_inv(CDF)

       1        0.607927        0.607927       1
       2        0.151982        0.759909       2
       3       0.0675475        0.827456       3
       4       0.0379954        0.865452       4
       5       0.0243171        0.889769       5
       6       0.0168869        0.906656       6
       7       0.0124067        0.919062       7
       8      0.00949886        0.928561       8
       9      0.00750527        0.936067       9
      10      0.00607927        0.942146      10
      11      0.00502419         0.94717      11
      12      0.00422172        0.951392      12
      13       0.0035972        0.954989      13
      14      0.00310167        0.958091      14
      15       0.0027019        0.960792      15
      16      0.00237472        0.963167      16
      17      0.00210355        0.965271      17
      18      0.00187632        0.967147      18
      19      0.00168401        0.968831      19
      20      0.00151982        0.970351      20

zipf_cdf_test
  Normal end of execution.

zipf_sample_test
  Python version: 3.6.9
  zipf_mean returns the mean of the Zipf distribution.
  zipf_sample samples the Zipf distribution.
  zipf_variance returns the variance of the Zipf distribution.

  PDF parameter A =                          4
  PDF mean =                           1.11063
  PDF variance =                      0.286326

  Sample size =       1000
  Sample mean =              1.119
  Sample variance =       0.200839
  Sample maximum =       7
  Sample minimum =       1

zipf_sample_test
  Normal end of execution.

prob_test:
  Normal end of execution.
Tue Oct 19 17:05:41 2021
