Tue Oct 19 11:25:03 2021

c8lib_test():
  Python version: 3.6.9
  Test c8lib().

c8_aBS_test
  c8_aBS computes the absolute value of a C8.

       C1=c8_uniform_01          R2=c8_aBS(C1)             R3=ABS(C1)
     ---------------------     ---------------------     ---------------------

  (    0.160271,   -0.978605)      0.991642                0.991642
  (    0.909838,   -0.347461)      0.973927                0.973927
  (    0.341996,   -0.152378)      0.374407                0.374407
  (   -0.303430,   -0.297796)      0.425150                0.425150
  (    0.314944,   -0.561685)      0.643956                0.643956
  (    0.230375,    0.089401)      0.247113                0.247113
  (    0.180169,    0.034319)      0.183409                0.183409
  (   -0.683052,    0.264713)      0.732552                0.732552
  (    0.435391,    0.590067)      0.733311                0.733311
  (    0.518870,   -0.653451)      0.834400                0.834400

c8_aBS_test:
  Normal end of execution.

c8_acos_test
  c8_acos computes the inverse cosine of a C8.

       C1=c8_uniform_01          C2=c8_acos(C1)             C3=c8_cos(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.732728,    0.650564)  (    2.181877,   -0.728220)  (   -0.732728,    0.650564)
  (   -0.358579,   -0.718258)  (    1.861779,    0.692969)  (   -0.358579,   -0.718258)
  (   -0.191201,    0.606162)  (    1.734437,   -0.581108)  (   -0.191201,    0.606162)
  (   -0.325177,   -0.636541)  (    1.845467,    0.620701)  (   -0.325177,   -0.636541)
  (    0.106002,   -0.873915)  (    1.491005,    0.791451)  (    0.106002,   -0.873915)
  (    0.028301,    0.409456)  (    1.544604,   -0.398931)  (    0.028301,    0.409456)
  (    0.603888,   -0.614842)  (    1.055086,    0.658197)  (    0.603888,   -0.614842)
  (   -0.127187,   -0.676519)  (    1.676151,    0.636445)  (   -0.127187,   -0.676519)
  (   -0.475386,    0.114590)  (    2.061700,   -0.129572)  (   -0.475386,    0.114590)
  (    0.175467,    0.169593)  (    1.397001,   -0.171347)  (    0.175467,    0.169593)

c8_acos_test:
  Normal end of execution.

c8_acosh_test
  c8_acosh computes the inverse hyperbolic cosine of a C8.

       C1=c8_uniform_01          C2=c8_acosh(C1)             C3=c8_cosh(C2)
     ---------------------     ---------------------     ---------------------

  (    0.508758,   -0.731819)  (   -0.730811,    1.161750)  (    0.508758,   -0.731819)
  (   -0.186579,   -0.279394)  (   -0.280320,    1.751255)  (   -0.186579,   -0.279394)
  (    0.402492,   -0.024853)  (   -0.027144,    1.156721)  (    0.402492,   -0.024853)
  (   -0.565445,   -0.118698)  (   -0.142753,    2.164859)  (   -0.565445,   -0.118698)
  (    0.129712,    0.744862)  (    0.692274,    1.466785)  (    0.129712,    0.744862)
  (    0.432951,    0.433686)  (    0.455427,    1.168394)  (    0.432951,    0.433686)
  (   -0.536995,   -0.196270)  (   -0.228334,    2.121508)  (   -0.536995,   -0.196270)
  (    0.374616,    0.921769)  (    0.850990,    1.296798)  (    0.374616,    0.921769)
  (    0.612057,    0.157862)  (    0.196154,    0.926710)  (    0.612057,    0.157862)
  (   -0.577341,   -0.284604)  (   -0.333652,    2.149132)  (   -0.577341,   -0.284604)

c8_acosh_test:
  Normal end of execution.

c8_add_test
  c8_add adds two C8s.

       C1=c8_uniform_01          C2=c8_uniform_01          C3=c8_add(C1,C2)
     ---------------------     ---------------------     ---------------------

  (    0.327363,    0.365338)  (    0.261642,    0.825351)  (    0.589005,    1.190688)
  (    0.069697,   -0.062407)  (    0.091180,    0.705588)  (    0.160877,    0.643181)
  (   -0.481964,   -0.249663)  (    0.020314,    0.058360)  (   -0.461649,   -0.191303)
  (    0.734544,    0.085383)  (    0.497815,    0.000145)  (    1.232359,    0.085528)
  (   -0.089842,   -0.856353)  (   -0.643811,    0.386517)  (   -0.733652,   -0.469837)
  (    0.516389,   -0.520584)  (   -0.072923,    0.941324)  (    0.443466,    0.420740)
  (    0.546919,   -0.696996)  (    0.506655,   -0.437394)  (    1.053574,   -1.134390)
  (   -0.551944,    0.208550)  (   -0.633393,    0.053077)  (   -1.185337,    0.261627)
  (    0.498973,   -0.506991)  (   -0.584239,   -0.527419)  (   -0.085266,   -1.034411)
  (    0.656170,    0.400436)  (    0.200415,    0.482550)  (    0.856584,    0.882986)

c8_add_test:
  Normal end of execution.

c8_arg_test
  c8_arg computes the argument of a C8.

       C1=c8_uniform_01          R2=c8_arg(C1)             R3=NP.ANGLE(C1)
     ---------------------     ---------------------     ---------------------

  (    0.404601,    0.022847)      0.056407                0.056407
  (    0.473291,    0.745866)      1.005357                1.005357
  (   -0.702307,   -0.559136)     -2.469208               -2.469208
  (    0.314734,    0.447737)      0.958097                0.958097
  (    0.278366,    0.577725)      1.121789                1.121789
  (   -0.213592,   -0.592225)     -1.916935               -1.916935
  (   -0.094647,    0.268644)      1.909533                1.909533
  (    0.089785,    0.518790)      1.399428                1.399428
  (   -0.370068,   -0.308518)     -2.446651               -2.446651
  (   -0.710823,    0.518259)      2.511604                2.511604

c8_arg_test:
  Normal end of execution.

c8_asin_test
  c8_asin computes the inverse sine of a C8.

       C1=c8_uniform_01          C2=c8_asin(C1)             C3=c8_sin(C2)
     ---------------------     ---------------------     ---------------------

  (    0.095380,    0.849720)  (    0.072667,    0.772737)  (    0.095380,    0.849720)
  (   -0.028513,   -0.752323)  (   -0.022785,   -0.695161)  (   -0.028513,   -0.752323)
  (   -0.295774,    0.571620)  (   -0.257453,    0.561180)  (   -0.295774,    0.571620)
  (   -0.430171,    0.233422)  (   -0.429763,    0.254030)  (   -0.430171,    0.233422)
  (    0.277437,   -0.080785)  (    0.280111,   -0.083963)  (    0.277437,   -0.080785)
  (    0.333861,    0.851161)  (    0.253432,    0.793361)  (    0.333861,    0.851161)
  (    0.409216,   -0.592882)  (    0.353238,   -0.595983)  (    0.409216,   -0.592882)
  (    0.197591,    0.530667)  (    0.174832,    0.515715)  (    0.197591,    0.530667)
  (   -0.706392,    0.157179)  (   -0.761892,    0.215565)  (   -0.706392,    0.157179)
  (    0.438982,    0.382933)  (    0.416877,    0.407433)  (    0.438982,    0.382933)

c8_asin_test:
  Normal end of execution.

c8_asinh_test
  c8_asinh computes the inverse sine of a C8.

       C1=c8_uniform_01          C2=c8_asinh(C1)            C3=sinh(C2)
     ---------------------     ---------------------     ---------------------

  (    0.623560,    0.468564)  (    0.633381,    0.398550)  (    0.623560,    0.468564)
  (   -0.621720,   -0.096502)  (   -0.589138,   -0.081969)  (   -0.621720,   -0.096502)
  (    0.181732,    0.432397)  (    0.199334,    0.437798)  (    0.181732,    0.432397)
  (   -0.508606,    0.190640)  (   -0.495535,    0.170232)  (   -0.508606,    0.190640)
  (   -0.234126,   -0.899657)  (   -0.407960,   -0.978488)  (   -0.234126,   -0.899657)
  (    0.060202,   -0.006087)  (    0.060166,   -0.006076)  (    0.060202,   -0.006087)
  (   -0.354146,    0.078118)  (   -0.348040,    0.073681)  (   -0.354146,    0.078118)
  (    0.705901,    0.473491)  (    0.702725,    0.386136)  (    0.705901,    0.473491)
  (    0.098842,    0.949604)  (    0.250455,    1.169563)  (    0.098842,    0.949604)
  (    0.543826,    0.308640)  (    0.538233,    0.272107)  (    0.543826,    0.308640)

c8_asinh_test:
  Normal end of execution.

c8_atan_test
  c8_atan computes the inverse tangent of a C8.

       C1=c8_uniform_01          C2=c8_atan(C1)             C3=c8_tan(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.510779,   -0.375663)  (   -0.520604,   -0.299185)  (   -0.510779,   -0.375663)
  (    0.251976,   -0.309179)  (    0.269948,   -0.297505)  (    0.251976,   -0.309179)
  (   -0.106531,   -0.807970)  (   -0.282673,   -1.054942)  (   -0.106531,   -0.807970)
  (   -0.099843,   -0.066834)  (   -0.099952,   -0.066268)  (   -0.099843,   -0.066834)
  (   -0.918045,   -0.231449)  (   -0.757209,   -0.124563)  (   -0.918045,   -0.231449)
  (    0.413936,    0.613150)  (    0.535196,    0.539118)  (    0.413936,    0.613150)
  (    0.213099,   -0.245793)  (    0.222393,   -0.238939)  (    0.213099,   -0.245793)
  (    0.182027,   -0.127704)  (    0.182879,   -0.124179)  (    0.182027,   -0.127704)
  (   -0.031735,    0.272300)  (   -0.034260,    0.279027)  (   -0.031735,    0.272300)
  (    0.406020,   -0.691941)  (    0.578626,   -0.613942)  (    0.406020,   -0.691941)

c8_atan_test:
  Normal end of execution.

c8_atanh_test
  c8_atanh computes the inverse hyperbolic tangent of a C8.

       C1=c8_uniform_01          C2=c8_atanh(C1)             C3=c8_tanh(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.514600,    0.461548)  (   -0.430159,    0.528004)  (   -0.514600,    0.461548)
  (   -0.674682,   -0.356899)  (   -0.632871,   -0.520815)  (   -0.674682,   -0.356899)
  (   -0.800985,    0.294140)  (   -0.818367,    0.568921)  (   -0.800985,    0.294140)
  (   -0.820897,    0.343443)  (   -0.782632,    0.638262)  (   -0.820897,    0.343443)
  (   -0.400474,   -0.126826)  (   -0.415310,   -0.149392)  (   -0.400474,   -0.126826)
  (   -0.047832,   -0.533170)  (   -0.037247,   -0.490570)  (   -0.047832,   -0.533170)
  (   -0.810120,    0.257477)  (   -0.871546,    0.538331)  (   -0.810120,    0.257477)
  (    0.717003,   -0.448901)  (    0.603637,   -0.632014)  (    0.717003,   -0.448901)
  (    0.457266,    0.626800)  (    0.324413,    0.631678)  (    0.457266,    0.626800)
  (    0.259708,   -0.771402)  (    0.161618,   -0.677719)  (    0.259708,   -0.771402)

c8_atanh_test:
  Normal end of execution.

c8_conj_test
  c8_conj computes the conjugate of a C8.

       C1=c8_uniform_01          C2=c8_conj(C1)             C3=c8_conj(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.499480,    0.713160)  (   -0.499480,   -0.713160)  (   -0.499480,    0.713160)
  (   -0.252712,    0.326405)  (   -0.252712,   -0.326405)  (   -0.252712,    0.326405)
  (    0.224739,    0.323860)  (    0.224739,   -0.323860)  (    0.224739,    0.323860)
  (   -0.801744,    0.414243)  (   -0.801744,   -0.414243)  (   -0.801744,    0.414243)
  (    0.768304,    0.101501)  (    0.768304,   -0.101501)  (    0.768304,    0.101501)
  (    0.389795,    0.609444)  (    0.389795,   -0.609444)  (    0.389795,    0.609444)
  (    0.728614,   -0.146081)  (    0.728614,    0.146081)  (    0.728614,   -0.146081)
  (   -0.068287,    0.850049)  (   -0.068287,   -0.850049)  (   -0.068287,    0.850049)
  (    0.201790,    0.320529)  (    0.201790,   -0.320529)  (    0.201790,    0.320529)
  (   -0.017013,   -0.473664)  (   -0.017013,    0.473664)  (   -0.017013,   -0.473664)

c8_conj_test:
  Normal end of execution.

c8_cos_test
  c8_cos computes the cosine of a C8.

       C1=c8_uniform_01          C2=c8_cos(C1)             C3=c8_acos(C2)
     ---------------------     ---------------------     ---------------------

  (    0.012724,   -0.253834)  (    1.032306,    0.003265)  (    0.012724,   -0.253834)
  (    0.049640,   -0.838449)  (    1.370888,    0.046653)  (    0.049640,   -0.838449)
  (    0.246728,   -0.672755)  (    1.197566,    0.176986)  (    0.246728,   -0.672755)
  (    0.482961,   -0.776336)  (    1.166181,    0.397856)  (    0.482961,   -0.776336)
  (    0.196320,    0.084229)  (    0.984272,   -0.016449)  (    0.196320,    0.084229)
  (   -0.474450,   -0.713669)  (    1.125856,   -0.354429)  (    0.474450,    0.713669)
  (    0.360180,    0.054366)  (    0.937217,   -0.019170)  (    0.360180,    0.054366)
  (    0.400567,   -0.524816)  (    1.050592,    0.214171)  (    0.400567,   -0.524816)
  (   -0.415856,    0.445944)  (    1.007246,    0.186180)  (    0.415856,   -0.445944)
  (    0.526432,    0.042669)  (    0.865393,   -0.021446)  (    0.526432,    0.042669)

c8_cos_test:
  Normal end of execution.

c8_cosh_test
  c8_cosh computes the cosine of a C8.

       C1=c8_uniform_01          C2=c8_cosh(C1)             C3=c8_acosh(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.575690,   -0.465165)  (    1.045986,    0.272740)  (    0.575690,    0.465165)
  (    0.665536,   -0.447776)  (    1.108526,   -0.309900)  (   -0.665536,    0.447776)
  (   -0.538087,    0.836891)  (    0.769100,   -0.419127)  (   -0.538087,    0.836891)
  (    0.503590,   -0.645070)  (    0.902539,   -0.315747)  (   -0.503590,    0.645070)
  (   -0.203985,   -0.683353)  (    0.791650,    0.129690)  (    0.203985,    0.683353)
  (    0.678711,   -0.219269)  (    1.209630,   -0.159229)  (   -0.678711,    0.219269)
  (    0.472870,    0.334058)  (    1.052325,    0.160887)  (    0.472870,    0.334058)
  (   -0.688183,    0.130258)  (    1.235734,   -0.096613)  (   -0.688183,    0.130258)
  (    0.403204,    0.031439)  (    1.081859,    0.013021)  (    0.403204,    0.031439)
  (   -0.335226,    0.297291)  (    1.010362,   -0.100048)  (   -0.335226,    0.297291)

c8_cosh_test:
  Normal end of execution.

c8_cube_root_test
  c8_cube_root computes the cube root of a C8.

       C1=c8_uniform_01          C2=c8_cube_root(C1)             C3=C2*C2*C2
     ---------------------     ---------------------     ---------------------

  (    0.796850,    0.525839)  (    0.966117,    0.190249)  (    0.796850,    0.525839)
  (    0.037328,   -0.211866)  (    0.535445,   -0.268941)  (    0.037328,   -0.211866)
  (    0.434790,   -0.873014)  (    0.924737,   -0.358219)  (    0.434790,   -0.873014)
  (    0.854395,    0.189635)  (    0.954000,    0.069578)  (    0.854395,    0.189635)
  (   -0.170222,   -0.500143)  (    0.651810,   -0.478194)  (   -0.170222,   -0.500143)
  (   -0.678884,   -0.398789)  (    0.595319,   -0.705874)  (   -0.678884,   -0.398789)
  (   -0.321674,    0.496712)  (    0.633857,    0.550533)  (   -0.321674,    0.496712)
  (   -0.004680,    0.820852)  (    0.809985,    0.469700)  (   -0.004680,    0.820852)
  (   -0.536894,    0.727675)  (    0.717054,    0.648824)  (   -0.536894,    0.727675)
  (    0.473364,    0.533559)  (    0.858263,    0.248380)  (    0.473364,    0.533559)

c8_cube_root_test:
  Normal end of execution.

c8_div_test
  c8_div divides two C8s.

       C1=c8_uniform_01          C2=c8_uniform_01          C3=c8_div(C1,C2)      C4=C1/C2
     ---------------------     ---------------------     ---------------------     ---------------------

  (    0.683842,    0.678798)  (    0.555527,    0.761402)  (    1.009443,   -0.161636)  (    1.009443,   -0.161636)
  (    0.323817,   -0.760350)  (   -0.871892,   -0.028092)  (   -0.342942,    0.883119)  (   -0.342942,    0.883119)
  (    0.316883,   -0.905411)  (    0.570606,    0.576820)  (   -0.518665,   -1.062441)  (   -0.518665,   -1.062441)
  (    0.755819,    0.610855)  (   -0.646634,   -0.351268)  (   -1.298763,   -0.239149)  (   -1.298763,   -0.239149)
  (    0.116186,    0.600845)  (   -0.286586,    0.851958)  (    0.592350,   -0.335633)  (    0.592350,   -0.335633)
  (   -0.591745,    0.474590)  (   -0.061912,    0.405228)  (    1.362470,    1.252116)  (    1.362470,    1.252116)
  (   -0.877307,   -0.409658)  (    0.246244,    0.696619)  (   -0.918473,    0.934713)  (   -0.918473,    0.934713)
  (   -0.280935,   -0.469503)  (    0.013359,   -0.043182)  (    8.086082,   -9.007319)  (    8.086082,   -9.007319)
  (   -0.613342,   -0.294729)  (    0.716274,   -0.627848)  (   -0.280274,   -0.657148)  (   -0.280274,   -0.657148)
  (   -0.849133,   -0.017507)  (   -0.564947,   -0.756218)  (    0.553240,   -0.709559)  (    0.553240,   -0.709559)

c8_div_test:
  Normal end of execution.

c8_div_r8_test
  c8_div_r8 divides a C8 by an R8.

       C1=c8_uniform_01          R2=R8_uniform_01          C3=c8_div_r8(C1,RC2)      C4=C1/R2
     ---------------------     ---------------------     ---------------------     ---------------------

  (    0.894577,    0.314597)       0.561673               (    1.592702,    0.560107)  (    1.592702,    0.560107)
  (   -0.339875,   -0.462720)       0.337749               (   -1.006294,   -1.370011)  (   -1.006294,   -1.370011)
  (   -0.574706,   -0.539221)       0.523244               (   -1.098353,   -1.030536)  (   -1.098353,   -1.030536)
  (    0.041729,   -0.461581)       0.250407               (    0.166645,   -1.843322)  (    0.166645,   -1.843322)
  (   -0.763644,    0.604628)       0.206395               (   -3.699921,    2.929472)  (   -3.699921,    2.929472)
  (   -0.659430,   -0.310219)       0.861744               (   -0.765227,   -0.359989)  (   -0.765227,   -0.359989)
  (    0.342251,   -0.248290)       0.064375               (    5.316519,   -3.856935)  (    5.316519,   -3.856935)
  (    0.586288,    0.016535)       0.932367               (    0.628817,    0.017735)  (    0.628817,    0.017735)
  (   -0.690354,   -0.004554)       0.184779               (   -3.736110,   -0.024647)  (   -3.736110,   -0.024647)
  (    0.584351,   -0.743048)       0.872399               (    0.669820,   -0.851729)  (    0.669820,   -0.851729)

c8_div_r8_test:
  Normal end of execution.

c8_exp_test
  c8_exp computes the exponential of a C8.

       C1=c8_uniform_01          C2=c8_exp(C1)             C3=c8_log(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.311330,    0.261324)  (    0.707604,    0.189241)  (   -0.311330,    0.261324)
  (    0.167592,    0.487345)  (    1.044792,    0.553722)  (    0.167592,    0.487345)
  (   -0.249713,   -0.839178)  (    0.520446,   -0.579667)  (   -0.249713,   -0.839178)
  (   -0.379111,   -0.884781)  (    0.433583,   -0.529627)  (   -0.379111,   -0.884781)
  (    0.104201,    0.218648)  (    1.083401,    0.240731)  (    0.104201,    0.218648)
  (    0.829083,   -0.326790)  (    2.169960,   -0.735491)  (    0.829083,   -0.326790)
  (    0.334461,    0.517957)  (    1.213922,    0.691757)  (    0.334461,    0.517957)
  (    0.588232,    0.602499)  (    1.483719,    1.020520)  (    0.588232,    0.602499)
  (    0.075585,    0.175962)  (    1.061861,    0.188799)  (    0.075585,    0.175962)
  (    0.534726,   -0.148187)  (    1.688272,   -0.252027)  (    0.534726,   -0.148187)

c8_exp_test:
  Normal end of execution.

c8_i_test
  Python version: 3.6.9
  c8_i returns the value of the imaginary unit.

  C1=c8_i ( ) = (0,1)

  C2= C1 * C1 = (-1,0)

c8_i_test:
  Normal end of execution.

c8_imag_test
  c8_imag computes the imaginary part of a C8.

       C1=c8_uniform_01          R2=c8_imag(C1)         R3=C1.Imag
     ---------------------     ---------------------  ------------

  (   -0.506003,   -0.482571)     -0.482571               -0.482571
  (   -0.379545,   -0.351225)     -0.351225               -0.351225
  (    0.553919,    0.349152)      0.349152                0.349152
  (    0.233836,    0.850009)      0.850009                0.850009
  (    0.177922,    0.271955)      0.271955                0.271955
  (    0.068834,   -0.128741)     -0.128741               -0.128741
  (    0.380598,   -0.471362)     -0.471362               -0.471362
  (    0.577132,    0.374733)      0.374733                0.374733
  (   -0.490689,    0.715625)      0.715625                0.715625
  (    0.323591,    0.915209)      0.915209                0.915209

c8_imag_test:
  Normal end of execution.

c8_inv_test
  c8_inv computes the inverse of a C8.

       C1=c8_uniform_01          C2=c8_inv(C1)             C3=c8_inv(C2)
     ---------------------     ---------------------     ---------------------

  (    0.350439,   -0.752285)  (    0.508811,    1.092263)  (    0.350439,   -0.752285)
  (   -0.416229,   -0.611473)  (   -0.760729,    1.117569)  (   -0.416229,   -0.611473)
  (   -0.360111,    0.176127)  (   -2.240879,   -1.095996)  (   -0.360111,    0.176127)
  (   -0.248240,    0.619111)  (   -0.557941,   -1.391506)  (   -0.248240,    0.619111)
  (   -0.510106,    0.195178)  (   -1.710030,   -0.654295)  (   -0.510106,    0.195178)
  (   -0.652417,    0.454210)  (   -1.032379,   -0.718738)  (   -0.652417,    0.454210)
  (   -0.370695,    0.894901)  (   -0.395087,   -0.953785)  (   -0.370695,    0.894901)
  (    0.430239,    0.201182)  (    1.907258,   -0.891844)  (    0.430239,    0.201182)
  (   -0.007642,   -0.089852)  (   -0.939755,   11.049524)  (   -0.007642,   -0.089852)
  (    0.384508,   -0.443812)  (    1.115113,    1.287100)  (    0.384508,   -0.443812)

c8_inv_test:
  Normal end of execution.

c8_le_l1_test
  c8_le_l1 evalues (C1 <= C2) using the L1 norm.

       C1=c8_uniform_01          C2=c8_uniform_01          L3=c8_le_l1(C1,C2)
     ---------------------     ---------------------     ---------------------

  (   -0.472724,    0.287535)  (   -0.200415,    0.911024)  True
  (    0.078531,   -0.099291)  (   -0.838038,    0.427027)  True
  (    0.452251,    0.581175)  (    0.619079,    0.716716)  True
  (    0.016096,   -0.178769)  (   -0.078815,    0.752543)  True
  (    0.061394,   -0.810709)  (   -0.668502,    0.277714)  True
  (   -0.088718,   -0.129829)  (   -0.074855,   -0.980605)  True
  (   -0.254193,   -0.940138)  (    0.142217,   -0.896553)  False
  (    0.286987,   -0.449363)  (    0.108197,   -0.531207)  False
  (    0.168756,   -0.596584)  (    0.493436,   -0.858503)  True
  (   -0.031855,   -0.469846)  (    0.416221,   -0.015579)  False

c8_le_l1_test:
  Normal end of execution.

c8_le_l2_test
  c8_le_l2 evalues (C1 <= C2) using the L2 norm.

       C1=c8_uniform_01          C2=c8_uniform_01          L3=c8_le_l2(C1,C2)
     ---------------------     ---------------------     ---------------------

  (   -0.507632,   -0.257819)  (    0.318124,    0.291537)  False
  (    0.322488,    0.357221)  (   -0.467565,    0.609312)  True
  (    0.564591,    0.455449)  (   -0.393227,   -0.534886)  False
  (   -0.025698,    0.958703)  (   -0.298259,   -0.618780)  False
  (    0.537533,    0.182951)  (    0.490553,   -0.075233)  False
  (    0.032008,    0.432175)  (    0.781982,   -0.555982)  True
  (    0.082340,    0.117183)  (    0.817593,   -0.153468)  True
  (   -0.275879,    0.662236)  (   -0.865523,   -0.020793)  True
  (   -0.773204,   -0.085386)  (    0.111173,    0.465125)  False
  (   -0.140566,   -0.360690)  (   -0.334052,   -0.779306)  True

c8_le_l2_test:
  Normal end of execution.

c8_le_li_test
  c8_le_li evalues (C1 <= C2) using the Loo norm.

       C1=c8_uniform_01          C2=c8_uniform_01          L3=c8_le_li(C1,C2)
     ---------------------     ---------------------     ---------------------

  (    0.197944,    0.580831)  (    0.079159,   -0.516624)  False
  (    0.864998,    0.212358)  (   -0.659921,   -0.330495)  False
  (    0.467032,    0.204547)  (    0.071828,    0.458833)  False
  (   -0.301092,    0.186409)  (    0.430632,    0.049939)  True
  (    0.571856,    0.669517)  (   -0.124157,   -0.791640)  True
  (    0.574253,   -0.107765)  (   -0.013951,   -0.705602)  True
  (    0.323218,   -0.761475)  (   -0.358142,   -0.083284)  False
  (   -0.240503,    0.535480)  (    0.586370,    0.429967)  True
  (    0.501967,    0.750973)  (   -0.192188,   -0.145448)  False
  (    0.513814,   -0.292628)  (    0.288916,   -0.755148)  True

c8_le_li_test:
  Normal end of execution.

c8_log_test
  c8_log computes the logarithm of a C8.

       C1=c8_uniform_01          C2=c8_log(C1)             C3=c8_exp(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.637176,    0.423488)  (   -0.267785,    2.555000)  (   -0.637176,    0.423488)
  (   -0.548919,    0.249041)  (   -0.506217,    2.715671)  (   -0.548919,    0.249041)
  (    0.207715,   -0.535384)  (   -0.554663,   -1.200700)  (    0.207715,   -0.535384)
  (    0.666951,   -0.172291)  (   -0.372738,   -0.252799)  (    0.666951,   -0.172291)
  (    0.464942,    0.611030)  (   -0.264215,    0.920346)  (    0.464942,    0.611030)
  (    0.048411,   -0.400991)  (   -0.906582,   -1.450650)  (    0.048411,   -0.400991)
  (   -0.647067,    0.200461)  (   -0.389483,    2.841170)  (   -0.647067,    0.200461)
  (    0.375259,    0.625922)  (   -0.314994,    1.030723)  (    0.375259,    0.625922)
  (   -0.318546,   -0.687665)  (   -0.277254,   -2.004596)  (   -0.318546,   -0.687665)
  (   -0.308293,   -0.139685)  (   -1.083344,   -2.716170)  (   -0.308293,   -0.139685)

c8_log_test:
  Normal end of execution.

c8_mag_test
  c8_mag computes the magnitude of a C8.

       C1=c8_uniform_01          R2=c8_mag(C1)             R3=NP.ABSOLUTE(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.112925,   -0.139593)      0.179550                0.179550
  (    0.040057,    0.955649)      0.956488                0.956488
  (   -0.030545,   -0.921128)      0.921635                0.921635
  (   -0.010435,   -0.674775)      0.674856                0.674856
  (   -0.539897,   -0.131533)      0.555688                0.555688
  (    0.291624,    0.658482)      0.720169                0.720169
  (   -0.479189,   -0.377401)      0.609962                0.609962
  (    0.709840,    0.274688)      0.761135                0.761135
  (    0.303364,   -0.354712)      0.466744                0.466744
  (    0.166293,   -0.970245)      0.984393                0.984393

c8_mag_test:
  Normal end of execution.

c8_mul_test
  c8_mul multiplies two C8s.

       C1=c8_uniform_01          C2=c8_uniform_01          C3=c8_mul(C1,C2)      C4=C1*C2
     ---------------------     ---------------------     ---------------------     ---------------------

  (    0.354736,   -0.597100)  (    0.572866,   -0.023950)  (    0.188916,   -0.350554)  (    0.188916,   -0.350554)
  (    0.933687,   -0.238507)  (    0.884504,    0.081172)  (    0.845210,   -0.135171)  (    0.845210,   -0.135171)
  (   -0.183298,    0.638714)  (   -0.006879,    0.367313)  (   -0.233347,   -0.071721)  (   -0.233347,   -0.071721)
  (   -0.451366,   -0.723234)  (    0.053682,    0.232409)  (    0.143856,   -0.143726)  (    0.143856,   -0.143726)
  (   -0.310709,    0.191816)  (   -0.553461,    0.292848)  (    0.115792,   -0.197153)  (    0.115792,   -0.197153)
  (    0.300283,   -0.793970)  (    0.295552,   -0.768287)  (   -0.521247,   -0.465363)  (   -0.521247,   -0.465363)
  (   -0.142880,    0.545667)  (    0.044400,   -0.781288)  (    0.419979,    0.135858)  (    0.419979,    0.135858)
  (   -0.490250,    0.298924)  (   -0.148284,   -0.127819)  (    0.110904,    0.018337)  (    0.110904,    0.018337)
  (    0.809587,    0.201322)  (   -0.527026,   -0.576897)  (   -0.310531,   -0.573151)  (   -0.310531,   -0.573151)
  (    0.408842,   -0.730429)  (    0.260502,   -0.699796)  (   -0.404647,   -0.476384)  (   -0.404647,   -0.476384)

c8_mul_test:
  Normal end of execution.

c8_nint_test
  c8_nint computes the nearest integer to a C8.

       C1=10*c8_uniform_01     C2=c8_nint(C1)
     ---------------------     ---------------------

  (   -4.138230,    0.307708)  (   -4.000000,    0.000000)
  (   -9.364909,   -2.297218)  (   -9.000000,   -2.000000)
  (    7.451346,    5.235330)  (    7.000000,    5.000000)
  (    2.442659,    4.980994)  (    2.000000,    5.000000)
  (   -5.218677,   -1.042262)  (   -5.000000,   -1.000000)
  (   -3.756988,    8.474396)  (   -4.000000,    8.000000)
  (    4.167465,    2.092722)  (    4.000000,    2.000000)
  (    1.084483,    7.667857)  (    1.000000,    8.000000)
  (    4.567513,    5.393087)  (    5.000000,    5.000000)
  (    6.895438,    1.544868)  (    7.000000,    2.000000)

c8_nint_test:
  Normal end of execution.

c8_norm_l1_test
  c8_norm_l1 computes the L1 norm of a C8.

       C1=c8_uniform_01          R2=c8_norm_l1(C1)
     ---------------------     ---------------------

  (   -0.657509,   -0.253988)      0.911497
  (   -0.157292,    0.305805)      0.463097
  (    0.073162,   -0.722031)      0.795192
  (    0.684677,   -0.686414)      1.371091
  (    0.681039,    0.567401)      1.248440
  (    0.077816,    0.062932)      0.140748
  (    0.346789,   -0.256777)      0.603566
  (   -0.791360,   -0.163721)      0.955081
  (   -0.093357,    0.205121)      0.298478
  (    0.333678,    0.044401)      0.378079

c8_norm_l1_test:
  Normal end of execution.

c8_norm_l2_test
  c8_norm_l2 computes the L2 norm of a C8.

       C1=c8_uniform_01          R2=c8_norm_l21(C1)
     ---------------------     ---------------------

  (   -0.576506,    0.480565)      0.750535
  (    0.101070,    0.544858)      0.554153
  (    0.040299,    0.628940)      0.630229
  (   -0.400703,   -0.459168)      0.609424
  (   -0.257306,   -0.123958)      0.285608
  (   -0.917134,   -0.048582)      0.918419
  (    0.404729,   -0.657371)      0.771973
  (   -0.165698,   -0.368268)      0.403828
  (   -0.726865,   -0.605447)      0.945991
  (    0.948309,    0.252342)      0.981308

c8_norm_l2_test:
  Normal end of execution.

c8_norm_li_test
  c8_norm_l1 computes the Loo norm of a C8.

       C1=c8_uniform_01          R2=c8_norm_li(C1)
     ---------------------     ---------------------

  (    0.519583,   -0.736632)      0.736632
  (    0.077260,   -0.241371)      0.241371
  (    0.641971,    0.623192)      0.641971
  (    0.265123,   -0.806349)      0.806349
  (    0.044544,    0.397979)      0.397979
  (   -0.030399,   -0.965631)      0.965631
  (   -0.914416,    0.305969)      0.914416
  (    0.611965,    0.612325)      0.612325
  (   -0.301831,   -0.083823)      0.301831
  (   -0.110655,    0.847264)      0.847264

c8_norm_l1_test:
  Normal end of execution.

c8_normal_01_test
  Python version: 3.6.9
  c8_normal_01 computes pseudonormal complex values.

       1  ( -0.682402, -0.510457 )
       2  ( -0.829655, 2.212323 )
       3  ( 0.474916, -0.074232 )
       4  ( -1.677121, -1.452622 )
       5  ( -0.241212, -2.166944 )
       6  ( -0.596474, -0.605207 )
       7  ( -0.533740, -1.960627 )
       8  ( 1.461864, 0.634776 )
       9  ( 1.411351, 0.505070 )
      10  ( 1.057247, 0.121643 )

c8_normal_01_test:
  Normal end of execution.

c8_one_test
  Python version: 3.6.9
  c8_one returns the value of one as a C8

  C1=c8_one ( ) = (1,0)

  C2= C1 + C1 = (2,0)

c8_one_test:
  Normal end of execution.

c8_print_test
  c8_print prints a C8.

  zero:  ( 0, 0 )
  One:  ( 1, 0 )
  Pi:  ( 3.14159, 0 )
  i:  ( 0, 1 )
  1+2i:  ( 1, 2 )
 -12.34 + 56.78i:  ( -12.34, 56.78 )
  1E-3 + 2E-6i  ( 0.001, 2e-06 )
  3E8 - 4.5E9i:  ( 3e+08, -4.5e+09 )

c8_print_test:
  Normal end of execution.

c8_real_test
  c8_real computes the real part of a C8.

       C1=c8_uniform_01          R2=c8_real(C1)         R3=C1.real
     ---------------------     ---------------------  ------------

  (    0.512004,    0.104051)      0.512004                0.512004
  (    0.013606,    0.288734)      0.013606                0.013606
  (   -0.524861,   -0.365534)     -0.524861               -0.524861
  (    0.011755,    0.626762)      0.011755                0.011755
  (   -0.769302,    0.403005)     -0.769302               -0.769302
  (    0.132892,   -0.263941)      0.132892                0.132892
  (    0.703093,    0.298046)      0.703093                0.703093
  (    0.741792,    0.248901)      0.741792                0.741792
  (   -0.345606,   -0.211002)     -0.345606               -0.345606
  (   -0.468916,   -0.570707)     -0.468916               -0.468916

c8_real_test:
  Normal end of execution.

c8_sin_test
  c8_sin computes the sine of a C8.

       C1=c8_uniform_01          C2=c8_sin(C1)             C3=c8_asin(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.290629,    0.395004)  (   -0.309202,    0.388358)  (   -0.290629,    0.395004)
  (    0.138083,    0.871728)  (    0.193340,    0.977016)  (    0.138083,    0.871728)
  (    0.904043,   -0.152505)  (    0.794990,   -0.094681)  (    0.904043,   -0.152505)
  (   -0.422408,   -0.189480)  (   -0.417339,   -0.173862)  (   -0.422408,   -0.189480)
  (    0.476652,   -0.681596)  (    0.569572,   -0.653617)  (    0.476652,   -0.681596)
  (   -0.953228,   -0.230919)  (   -0.837123,   -0.134906)  (   -0.953228,   -0.230919)
  (    0.644634,   -0.314887)  (    0.630944,   -0.255875)  (    0.644634,   -0.314887)
  (    0.280710,   -0.544820)  (    0.319181,   -0.549780)  (    0.280710,   -0.544820)
  (   -0.815044,    0.448790)  (   -0.802284,    0.318233)  (   -0.815044,    0.448790)
  (    0.272073,    0.033331)  (    0.268878,    0.032111)  (    0.272073,    0.033331)

c8_sin_test:
  Normal end of execution.

c8_sinh_test
  c8_sinh computes the hyperbolic sine of a C8.

       C1=c8_uniform_01          C2=c8_sinh(C1)             C3=c8_asinh(C2)
     ---------------------     ---------------------     ---------------------

  (    0.024218,    0.063536)  (    0.024172,    0.063512)  (    0.024218,    0.063536)
  (   -0.060533,    0.803358)  (   -0.042053,    0.721010)  (   -0.060533,    0.803358)
  (   -0.737025,    0.389613)  (   -0.745213,    0.487749)  (   -0.737025,    0.389613)
  (    0.296737,   -0.722494)  (    0.225881,   -0.690584)  (    0.296737,   -0.722494)
  (   -0.115644,    0.859337)  (   -0.075677,    0.762480)  (   -0.115644,    0.859337)
  (   -0.081406,   -0.791416)  (   -0.057278,   -0.713708)  (   -0.081406,   -0.791416)
  (   -0.591181,   -0.076810)  (   -0.624378,   -0.090539)  (   -0.591181,   -0.076810)
  (    0.831118,    0.253164)  (    0.900512,    0.342071)  (    0.831118,    0.253164)
  (   -0.136413,    0.219393)  (   -0.133557,    0.219666)  (   -0.136413,    0.219393)
  (    0.053801,   -0.200500)  (    0.052749,   -0.199448)  (    0.053801,   -0.200500)

c8_sinh_test:
  Normal end of execution.

c8_sqrt_test
  c8_sqrt computes the square root of a C8.

       C1=c8_uniform_01          C2=c8_sqrt(C1)             C3=C2*C2
     ---------------------     ---------------------     ---------------------

  (    0.561784,   -0.311587)  (    0.775948,   -0.200778)  (    0.561784,   -0.311587)
  (    0.359085,   -0.014835)  (    0.599364,   -0.012376)  (    0.359085,   -0.014835)
  (   -0.239775,   -0.516235)  (    0.405849,   -0.635994)  (   -0.239775,   -0.516235)
  (    0.628917,    0.645174)  (    0.874617,    0.368832)  (    0.628917,    0.645174)
  (   -0.408723,   -0.286234)  (    0.212439,   -0.673686)  (   -0.408723,   -0.286234)
  (   -0.643355,    0.125558)  (    0.077902,    0.805868)  (   -0.643355,    0.125558)
  (   -0.889491,    0.308160)  (    0.161040,    0.956778)  (   -0.889491,    0.308160)
  (    0.313754,    0.066359)  (    0.563226,    0.058909)  (    0.313754,    0.066359)
  (    0.229358,    0.057668)  (    0.482625,    0.059744)  (    0.229358,    0.057668)
  (   -0.261243,   -0.362059)  (    0.304324,   -0.594858)  (   -0.261243,   -0.362059)

c8_sqrt_test:
  Normal end of execution.

c8_tan_test
  c8_tan computes the tangent of a C8.

       C1=c8_uniform_01          C2=c8_tan(C1)             C3=c8_atan(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.214170,   -0.851506)  (   -0.110883,   -0.708541)  (   -0.214170,   -0.851506)
  (   -0.431672,    0.745602)  (   -0.254727,    0.706737)  (   -0.431672,    0.745602)
  (    0.067167,   -0.977134)  (    0.029171,   -0.753298)  (    0.067167,   -0.977134)
  (    0.158656,    0.763982)  (    0.092779,    0.652968)  (    0.158656,    0.763982)
  (   -0.768134,   -0.296046)  (   -0.822562,   -0.516301)  (   -0.768134,   -0.296046)
  (    0.297696,    0.508013)  (    0.234654,    0.502117)  (    0.297696,    0.508013)
  (   -0.110450,   -0.926192)  (   -0.051657,   -0.732989)  (   -0.110450,   -0.926192)
  (   -0.499345,    0.174517)  (   -0.524514,    0.222194)  (   -0.499345,    0.174517)
  (    0.596500,    0.753142)  (    0.339882,    0.784034)  (    0.596500,    0.753142)
  (    0.538406,   -0.360772)  (    0.504284,   -0.450074)  (    0.538406,   -0.360772)

c8_tan_test:
  Normal end of execution.

c8_tanh_test
  c8_tanh computes the hyperbolic tangent of a C8.

       C1=c8_uniform_01          C2=c8_tanh(C1)             C3=c8_atanh(C2)
     ---------------------     ---------------------     ---------------------

  (    0.191992,    0.718229)  (    0.325584,    0.819972)  (    0.191992,    0.718229)
  (   -0.383608,    0.624809)  (   -0.519924,    0.584018)  (   -0.383608,    0.624809)
  (   -0.811529,   -0.168887)  (   -0.681025,   -0.092659)  (   -0.811529,   -0.168887)
  (    0.955279,    0.183857)  (    0.753476,    0.081969)  (    0.955279,    0.183857)
  (    0.586619,   -0.710792)  (    0.761392,   -0.515163)  (    0.586619,   -0.710792)
  (   -0.190557,    0.098422)  (   -0.190053,    0.095208)  (   -0.190557,    0.098422)
  (    0.488421,   -0.806297)  (    0.772998,   -0.677607)  (    0.488421,   -0.806297)
  (   -0.563454,   -0.421131)  (   -0.582507,   -0.314720)  (   -0.563454,   -0.421131)
  (    0.497111,   -0.317036)  (    0.498009,   -0.252966)  (    0.497111,   -0.317036)
  (   -0.288891,    0.513255)  (   -0.361349,    0.506386)  (   -0.288891,    0.513255)

c8_tanh_test:
  Normal end of execution.

c8_to_cartesian_test
  c8_to_cartesian computes the cartesian form of a C8.

       C1=c8_uniform_01       (X2,Y2)=c8_to_cartesian(C1)    C3=cartesian_to_c8(X2,Y2)
     ---------------------     ---------------------     ---------------------

  (    0.249003,    0.205910)  (    0.249003,    0.205910)  (    0.249003,    0.205910)
  (    0.266224,    0.180828)  (    0.266224,    0.180828)  (    0.266224,    0.180828)
  (    0.640032,    0.115959)  (    0.640032,    0.115959)  (    0.640032,    0.115959)
  (   -0.523489,   -0.165996)  (   -0.523489,   -0.165996)  (   -0.523489,   -0.165996)
  (   -0.288050,    0.839896)  (   -0.288050,    0.839896)  (   -0.288050,    0.839896)
  (   -0.340788,    0.289186)  (   -0.340788,    0.289186)  (   -0.340788,    0.289186)
  (   -0.846288,    0.415640)  (   -0.846288,    0.415640)  (   -0.846288,    0.415640)
  (    0.632506,    0.248278)  (    0.632506,    0.248278)  (    0.632506,    0.248278)
  (   -0.201430,   -0.486042)  (   -0.201430,   -0.486042)  (   -0.201430,   -0.486042)
  (   -0.367748,   -0.100095)  (   -0.367748,   -0.100095)  (   -0.367748,   -0.100095)

c8_to_cartesian_test:
  Normal end of execution.

c8_to_polar_test
  c8_to_polar computes the polar form of a C8.

       C1=c8_uniform_01       (R2,T2)=c8_to_polar(C1)    C3=polar_to_c8(R2,T2)
     ---------------------     ---------------------     ---------------------

  (    0.114234,    0.485901)  (    0.499148,    1.339892)  (    0.114234,    0.485901)
  (    0.317362,   -0.450155)  (    0.550779,   -0.956719)  (    0.317362,   -0.450155)
  (   -0.112745,   -0.292200)  (    0.313196,   -1.939044)  (   -0.112745,   -0.292200)
  (   -0.696766,   -0.293161)  (    0.755927,   -2.743331)  (   -0.696766,   -0.293161)
  (    0.133191,    0.214766)  (    0.252714,    1.015679)  (    0.133191,    0.214766)
  (   -0.194983,   -0.430324)  (    0.472438,   -1.996231)  (   -0.194983,   -0.430324)
  (    0.193245,    0.212501)  (    0.287229,    0.832820)  (    0.193245,    0.212501)
  (   -0.024711,   -0.001214)  (    0.024740,   -3.092500)  (   -0.024711,   -0.001214)
  (    0.186144,   -0.130133)  (    0.227121,   -0.610120)  (    0.186144,   -0.130133)
  (   -0.227420,   -0.048666)  (    0.232568,   -2.930778)  (   -0.227420,   -0.048666)

c8_to_polar_test:
  Normal end of execution.

c8_uniform_01_test
  Python version: 3.6.9
  c8_uniform_01 computes pseudorandom complex values
  in the unit circle.

       0  ( 0.129613, 0.315713 )
       1  ( 0.713007, -0.43811 )
       2  ( -0.463676, -0.674846 )
       3  ( 0.883684, 0.223018 )
       4  ( 0.521175, -0.246095 )
       5  ( -0.235536, 0.619148 )
       6  ( 0.101983, -0.579046 )
       7  ( -0.564007, -0.746588 )
       8  ( -0.545227, -0.0732156 )
       9  ( 0.0284165, 0.133664 )

c8_uniform_01_test:
  Normal end of execution.

c8_zero_test
  Python version: 3.6.9
  c8_zero returns the value of zero as a C8

  C1=c8_zero ( ) = (0,0)

c8_zero_test:
  Normal end of execution.

c8mat_identity_test
  c8mat_identity returns the complex identity matrix.

  identity matrix:

  Col:              0                           1                           2                           3              
  Row
      0 :           1             0i            0             0i            0             0i            0             0i 
      1 :           0             0i            1             0i            0             0i            0             0i 
      2 :           0             0i            0             0i            1             0i            0             0i 
      3 :           0             0i            0             0i            0             0i            1             0i 

c8mat_identity_test:
  Normal end of execution.

c8mat_indicator_test
  c8mat_indicator returns the complex indicator matrix.

  indicator matrix:

  Col:              0                           1                           2              
  Row
      0 :           1            -1i            1            -2i            1            -3i 
      1 :           2            -1i            2            -2i            2            -3i 
      2 :           3            -1i            3            -2i            3            -3i 
      3 :           4            -1i            4            -2i            4            -3i 
      4 :           5            -1i            5            -2i            5            -3i 

c8mat_indicator_test:
  Normal end of execution.

c8mat_norm_fro_test
  c8mat_norm_fro computes the Frobenius norm of a C8MAT.

  The indicator matrix:

  Col:              0                           1                           2                           3              
  Row
      0 :           1            -1i            1            -2i            1            -3i            1            -4i 
      1 :           2            -1i            2            -2i            2            -3i            2            -4i 
      2 :           3            -1i            3            -2i            3            -3i            3            -4i 
      3 :           4            -1i            4            -2i            4            -3i            4            -4i 
      4 :           5            -1i            5            -2i            5            -3i            5            -4i 

  Frobenius norm = 19.2354

c8mat_norm_fro_test:
  Normal end of execution.

c8mat_norm_l1_test
  c8mat_norm_l1 computes the L1 norm of a C8MAT.

  The indicator matrix:

  Col:              0                           1                           2                           3              
  Row
      0 :           1            -1i            1            -2i            1            -3i            1            -4i 
      1 :           2            -1i            2            -2i            2            -3i            2            -4i 
      2 :           3            -1i            3            -2i            3            -3i            3            -4i 
      3 :           4            -1i            4            -2i            4            -3i            4            -4i 
      4 :           5            -1i            5            -2i            5            -3i            5            -4i 

  L1 norm = 25.6552

c8mat_norm_l1_test:
  Normal end of execution.

c8mat_norm_li_test
  c8mat_norm_li computes the Loo norm of a C8MAT.

  The indicator matrix:

  Col:              0                           1                           2                           3              
  Row
      0 :           1            -1i            1            -2i            1            -3i            1            -4i 
      1 :           2            -1i            2            -2i            2            -3i            2            -4i 
      2 :           3            -1i            3            -2i            3            -3i            3            -4i 
      3 :           4            -1i            4            -2i            4            -3i            4            -4i 
      4 :           5            -1i            5            -2i            5            -3i            5            -4i 

  Loo norm = 22.7183

c8mat_norm_li_test:
  Normal end of execution.

c8mat_print_test
  Python version: 3.6.9
  c8mat_print prints an C8MAT.

  Here is a C8MAT:

  Col:              0                           1                           2              
  Row
      0 :          10             1i           10             2i           10             3i 
      1 :          20             1i           20             2i           20             3i 
      2 :          30             1i           30             2i           30             3i 
      3 :          40             1i           40             2i           40             3i 

c8mat_print_test:
  Normal end of execution.

c8mat_print_some_test
  Python version: 3.6.9
  c8mat_print_some prints some of an C8MAT.

  Here is a C8MAT:

  Col:              3                           4                           5              
  Row
      0 :          10             4i           10             5i           10             6i 
      1 :          20             4i           20             5i           20             6i 
      2 :          30             4i           30             5i           30             6i 

c8mat_print_some_test:
  Normal end of execution. 

c8mat_uniform_01_test
  c8mat_uniform_01 computes a random C8MAT.

  0 <= X <= 1

  Random C8MAT:

  Col:              0                           1                           2              
  Row
      0 :   -0.483492      0.834921i    -0.895721     -0.112783i    -0.388169      0.392121i 
      1 :   0.0730083     -0.438224i     -0.22315     0.0279931i     0.265849     -0.687891i 
      2 :   -0.335989     -0.767826i     0.755068     -0.139108i    0.0421604    -0.0843947i 
      3 :    0.576571      0.317256i     0.951733      0.207936i    -0.221196     0.0480261i 
      4 :     0.50877      0.629986i    -0.690617       0.11912i      -0.2119      0.594045i 

c8mat_uniform_01_test:
  Normal end of execution.

c8vec_indicator_test
  c8vec_indicator returns the indicator vector.

  The indicator vector:

     0             1            -1
     1             2            -2
     2             3            -3
     3             4            -4
     4             5            -5
     5             6            -6
     6             7            -7
     7             8            -8
     8             9            -9
     9            10           -10

c8vec_indicator_test:
  Normal end of execution.

c8vec_nint_test
  c8vec_nint rounds a C8VEC.

  The initial vector:

     0       1.04794     -0.485688
     1       1.61316      -1.56249
     2       1.63859      -4.66616
     3       4.19445      -3.79722
     4      0.126553    -0.0818703

  The rounded vector:

     0             1             0
     1             2            -2
     2             2            -5
     3             4            -4
     4             0             0

c8vec_nint_test:
  Normal end of execution.

c8vec_norm_l1_test
  c8vec_norm_l1 computes the L1 norm of a C8VEC.

  The indicator vector:

     0             1            -1
     1             2            -2
     2             3            -3
     3             4            -4
     4             5            -5

  L1 norm = 21.2132

c8vec_norm_l1_test:
  Normal end of execution.

c8vec_norm_l2_test
  c8vec_norm_l2 computes the L2 norm of a C8VEC.

  The indicator vector:

     0             1            -1
     1             2            -2
     2             3            -3
     3             4            -4
     4             5            -5

  L2 norm = 10.4881

c8vec_norm_l2_test:
  Normal end of execution.

c8vec_norm_li_test
  c8vec_norm_li computes the Loo norm of a C8VEC.

  The indicator vector:

     0             1            -1
     1             2            -2
     2             3            -3
     3             4            -4
     4             5            -5

  Loo norm = 7.07107

c8vec_norm_l1_test:
  Normal end of execution.

c8vec_print_test
  Python version: 3.6.9
  c8vec_print prints an C8VEC.

  Here is a C8VEC:

     0             1             2
     1             3             4
     2             5             6
     3             7             8

c8vec_print_test:
  Normal end of execution.

c8vec_print_part_test
  c8vec_print_part prints part of a C8VEC.

  Part of the C8VEC:

       0               1              -1
       1               2              -2
       2               3              -3
       3               4              -4
       4               5              -5
       5               6              -6
       6               7              -7
       7               8              -8
  ......  ..............  ..............
      99             100            -100

c8vec_print_part_test:
  Normal end of execution.

c8vec_sort_a_l1_test
  c8vec_sort_a_l1 sorts a C8VEC by L1 norm.

  The unsorted vector:

     0     -0.833795      0.249785
     1     -0.588051        0.7429
     2      0.530774     0.0497039
     3     -0.943054   -0.00559395
     4      0.710792    -0.0255611
     5       0.22812     -0.662684
     6      0.386951      0.392378
     7      0.608083     -0.576975
     8      0.260793        0.7033
     9      0.213579      0.913217

   I                  A(I)                   ||A(I)||

   0  (      0.530774,     0.0497039)        0.580478
   1  (      0.710792,    -0.0255611)        0.736354
   2  (      0.386951,      0.392378)        0.779329
   3  (       0.22812,     -0.662684)        0.890804
   4  (     -0.943054,   -0.00559395)        0.948648
   5  (      0.260793,        0.7033)        0.964092
   6  (     -0.833795,      0.249785)         1.08358
   7  (      0.213579,      0.913217)          1.1268
   8  (      0.608083,     -0.576975)         1.18506
   9  (     -0.588051,        0.7429)         1.33095

c8vec_sort_a_l1_test:
  Normal end of execution.

c8vec_sort_a_l2_test
  c8vec_sort_a_l2 sorts a C8VEC by L2 norm.

  The unsorted vector:

     0     -0.320004      0.896929
     1      0.231791    -0.0769796
     2        -0.953     -0.278079
     3      0.140878      0.898315
     4     -0.286859      0.102531
     5      0.453384      0.617656
     6     -0.493794     -0.251602
     7      0.359375      0.668336
     8      0.482063       0.36071
     9     -0.306938      0.531983

   I                  A(I)                   ||A(I)||

   0  (      0.231791,    -0.0769796)         0.24424
   1  (     -0.286859,      0.102531)        0.304632
   2  (     -0.493794,     -0.251602)        0.554199
   3  (      0.482063,       0.36071)        0.602077
   4  (     -0.306938,      0.531983)         0.61418
   5  (      0.359375,      0.668336)         0.75883
   6  (      0.453384,      0.617656)        0.766196
   7  (      0.140878,      0.898315)        0.909294
   8  (     -0.320004,      0.896929)        0.952304
   9  (        -0.953,     -0.278079)        0.992742

c8vec_sort_a_l2_test:
  Normal end of execution.

c8vec_sort_a_li_test
  c8vec_sort_a_li sorts a C8VEC by Loo norm.

  The unsorted vector:

     0    -0.0211162     -0.599172
     1     -0.193859     -0.937657
     2     -0.583124      0.488345
     3      0.217474      0.435304
     4     -0.241154    -0.0101562
     5    0.00221703      -0.52531
     6     -0.523077    -0.0575791
     7     -0.280089      0.362271
     8      0.498471     -0.178688
     9      0.103231     -0.789026

   I                  A(I)                   ||A(I)||

   0  (     -0.241154,    -0.0101562)        0.241154
   1  (     -0.280089,      0.362271)        0.362271
   2  (      0.217474,      0.435304)        0.435304
   3  (      0.498471,     -0.178688)        0.498471
   4  (     -0.523077,    -0.0575791)        0.523077
   5  (    0.00221703,      -0.52531)         0.52531
   6  (     -0.583124,      0.488345)        0.583124
   7  (    -0.0211162,     -0.599172)        0.599172
   8  (      0.103231,     -0.789026)        0.789026
   9  (     -0.193859,     -0.937657)        0.937657

c8vec_sort_a_li_test:
  Normal end of execution.

c8vec_spiral_test
  c8vec_spiral returns N points on a spiral
  which includes M complete turns.

  The spiral points:

     0             5             0
     1       4.18579       2.41667
     2       2.33333       4.04145
     3   2.75546e-16           4.5
     4      -2.16667       3.75278
     5      -3.60844       2.08333
     6            -4   4.89859e-16
     7      -3.31976      -1.91667
     8      -1.83333      -3.17543
     9   -6.4294e-16          -3.5
    10       1.66667      -2.88675
    11       2.74241      -1.58333
    12             3  -7.34788e-16

c8vec_spiral_test:
  Normal end of execution.

c8vec_uniform_01_test
  Python version: 3.6.9
  c8vec_uniform_01 computes pseudorandom complex values
  in the unit circle.

       0  ( -0.826744, -0.268764 )
       1  ( -0.281860, 0.712861 )
       2  ( 0.305897, -0.776455 )
       3  ( -0.014843, 0.334851 )
       4  ( -0.746333, -0.569522 )
       5  ( 0.540804, -0.071206 )
       6  ( -0.420679, -0.485242 )
       7  ( 0.642413, 0.215656 )
       8  ( -0.236869, 0.119145 )
       9  ( 0.895822, 0.140587 )

c8vec_uniform_01_test:
  Normal end of execution.

c8vec_unity_test
  c8vec_unity returns the N roots of unity.

  The N roots of unity:

     0             1             0
     1      0.866025           0.5
     2           0.5      0.866025
     3   6.12323e-17             1
     4          -0.5      0.866025
     5     -0.866025           0.5
     6            -1   1.22465e-16
     7     -0.866025          -0.5
     8          -0.5     -0.866025
     9  -1.83697e-16            -1
    10           0.5     -0.866025
    11      0.866025          -0.5

c8vec_unity_test:
  Normal end of execution.

cartesian_to_c8_test
  cartesian_to_c8 computes the cartesian form of a C8.

     X1,Y1=r8_uniform_01       C2=cartesian_to_c8(X1,Y1)    X3,Y3=c8_to_cartesian(C2)
     ---------------------     ---------------------     ---------------------

  (    0.048613,    0.850824)  (    0.048613,    0.850824)  (    0.048613,    0.850824)
  (    0.991940,    0.436626)  (    0.991940,    0.436626)  (    0.991940,    0.436626)
  (    0.781744,    0.372005)  (    0.781744,    0.372005)  (    0.781744,    0.372005)
  (    0.251762,    0.815065)  (    0.251762,    0.815065)  (    0.251762,    0.815065)
  (    0.253587,    0.698435)  (    0.253587,    0.698435)  (    0.253587,    0.698435)
  (    0.635742,    0.448555)  (    0.635742,    0.448555)  (    0.635742,    0.448555)
  (    0.327616,    0.557259)  (    0.327616,    0.557259)  (    0.327616,    0.557259)
  (    0.581396,    0.897734)  (    0.581396,    0.897734)  (    0.581396,    0.897734)
  (    0.070389,    0.397162)  (    0.070389,    0.397162)  (    0.070389,    0.397162)
  (    0.802939,    0.362638)  (    0.802939,    0.362638)  (    0.802939,    0.362638)

cartesian_to_c8_test:
  Normal end of execution.

polar_to_c8_test
  polar_to_c8 computes the polar form of a C8.

     R1,T1=R8_uniform_01       C2=polar_to_c8(R1,T1)    R3,T3=c8_to_polar(C2)
     ---------------------     ---------------------     ---------------------

  (    0.184960,    0.992764)  (    0.101058,    0.154911)  (    0.184960,    0.992764)
  (    0.700845,    2.960730)  (   -0.689413,    0.126066)  (    0.700845,    2.960730)
  (    0.975015,    2.113750)  (   -0.503758,    0.834794)  (    0.975015,    2.113750)
  (    0.819155,    5.593444)  (    0.631905,   -0.521259)  (    0.819155,   -0.689742)
  (    0.808336,    3.318411)  (   -0.795733,   -0.142185)  (    0.808336,   -2.964774)
  (    0.864875,    1.507634)  (    0.054591,    0.863151)  (    0.864875,    1.507634)
  (    0.476266,    1.157044)  (    0.191482,    0.436078)  (    0.476266,    1.157044)
  (    0.458552,    5.908157)  (    0.426681,   -0.167967)  (    0.458552,   -0.375029)
  (    0.901523,    4.940729)  (    0.204070,   -0.878123)  (    0.901523,   -1.342456)
  (    0.802640,    3.036104)  (   -0.798178,    0.084513)  (    0.802640,    3.036104)

polar_to_c8_test:
  Normal end of execution.

c8lib_test():
  Normal end of execution.
Tue Oct 19 11:25:04 2021
