Tue Oct 19 17:32:27 2021

walsh_test():
  Python version: 3.6.9
  Test walsh().

ffwt_test():
  Python version: 3.6.9
  ffwt() computes a fast Walsh transform.

     I        X(I)   Y=FFWT(X)/N  Z=FFWT(Y)/N

     0    0.667829    0.438243    0.667829
     1    0.422119    0.065436    0.422119
     2    0.783955   -0.010256    0.783955
     3    0.143208    0.010854    0.143208
     4    0.562929    0.092399    0.562929
     5    0.145287    0.002436    0.145287
     6    0.800585   -0.028726    0.800585
     7    0.503525   -0.025412    0.503525
     8    0.001478   -0.096679    0.001478
     9    0.972908    0.062372    0.972908
    10    0.453074    0.047786    0.453074
    11    0.148206   -0.112238    0.148206
    12    0.420234   -0.069479    0.420234
    13    0.109864    0.090948    0.109864
    14    0.591586    0.103179    0.591586
    15    0.285107    0.096965    0.285107

     I        X(I)   Y=FFWT(X)/N  Z=FFWT(Y)/N

     0    1.000000    8.500000    1.000000
     1    2.000000   -4.000000    2.000000
     2    3.000000    0.000000    3.000000
     3    4.000000   -2.000000    4.000000
     4    5.000000    0.000000    5.000000
     5    6.000000    0.000000    6.000000
     6    7.000000    0.000000    7.000000
     7    8.000000   -1.000000    8.000000
     8    9.000000    0.000000    9.000000
     9   10.000000    0.000000   10.000000
    10   11.000000    0.000000   11.000000
    11   12.000000    0.000000   12.000000
    12   13.000000    0.000000   13.000000
    13   14.000000    0.000000   14.000000
    14   15.000000    0.000000   15.000000
    15   16.000000   -0.500000   16.000000

fwt_test():
  Python version: 3.6.9
  fwt() computes a fast Walsh transform.

     I        X(I)    Y=FWT(X)/N   Z=FWT(Y)/N

     0    0.369605    0.413033    0.369605
     1    0.192338    0.019260    0.192338
     2    0.483234    0.080360    0.483234
     3    0.961172   -0.011067    0.961172
     4    0.270545   -0.032737    0.270545
     5    0.247808   -0.025659    0.247808
     6    0.614531   -0.069438    0.614531
     7    0.319116   -0.092782    0.319116
     8    0.446444    0.080111    0.446444
     9    0.097402   -0.032295    0.097402
    10    0.566112    0.128901    0.566112
    11    0.099425   -0.012916    0.099425
    12    0.619719    0.038166    0.619719
    13    0.318150   -0.115519    0.318150
    14    0.143806   -0.024031    0.143806
    15    0.859123    0.026216    0.859123

     I        X(I)    Y=FWT(X)/N   Z=FWT(Y)/N

     0    1.000000    8.500000    1.000000
     1    2.000000   -4.000000    2.000000
     2    3.000000    0.000000    3.000000
     3    4.000000   -2.000000    4.000000
     4    5.000000    0.000000    5.000000
     5    6.000000    0.000000    6.000000
     6    7.000000    0.000000    7.000000
     7    8.000000   -1.000000    8.000000
     8    9.000000    0.000000    9.000000
     9   10.000000    0.000000   10.000000
    10   11.000000    0.000000   11.000000
    11   12.000000    0.000000   12.000000
    12   13.000000    0.000000   13.000000
    13   14.000000    0.000000   14.000000
    14   15.000000    0.000000   15.000000
    15   16.000000   -0.500000   16.000000

haar_test()
  Python version: 3.6.9
  haar() computes a Haar transform.
  hnorm() normalizes the transformed data.
  haar_inverse() computes an inverse Haar transform.

     I        X(I)    Y=HAAR(X)  Z=HNORM(Y)  W=haar_inverse(Z)

     0    0.257065    7.444854    0.465303    0.257065
     1    0.003436   -1.695206   -0.105950    0.003436
     2    0.127840   -1.707269   -0.213409    0.127840
     3    0.195437    1.385764    0.173221    0.195437
     4    0.740696   -0.062776   -0.015694    0.740696
     5    0.565200    0.320746    0.080186    0.565200
     6    0.631216    0.510926    0.127731    0.631216
     7    0.353935   -1.294481   -0.323620    0.353935
     8    0.889193    0.253628    0.126814    0.889193
     9    0.855218   -0.067597   -0.033798    0.855218
    10    0.306457    0.175497    0.087748    0.306457
    11    0.927029    0.277281    0.138641    0.927029
    12    0.059062    0.033975    0.016987    0.059062
    13    0.089764   -0.620573   -0.310286    0.089764
    14    0.634424   -0.030702   -0.015351    0.634424
    15    0.808883   -0.174459   -0.087229    0.808883

     I        X(I)    Y=HAAR(X)  Z=HNORM(Y)  W=haar_inverse(Z)

     0    1.000000  136.000000    8.500000    1.000000
     1    2.000000  -64.000000   -4.000000    2.000000
     2    3.000000  -16.000000   -2.000000    3.000000
     3    4.000000  -16.000000   -2.000000    4.000000
     4    5.000000   -4.000000   -1.000000    5.000000
     5    6.000000   -4.000000   -1.000000    6.000000
     6    7.000000   -4.000000   -1.000000    7.000000
     7    8.000000   -4.000000   -1.000000    8.000000
     8    9.000000   -1.000000   -0.500000    9.000000
     9   10.000000   -1.000000   -0.500000   10.000000
    10   11.000000   -1.000000   -0.500000   11.000000
    11   12.000000   -1.000000   -0.500000   12.000000
    12   13.000000   -1.000000   -0.500000   13.000000
    13   14.000000   -1.000000   -0.500000   14.000000
    14   15.000000   -1.000000   -0.500000   15.000000
    15   16.000000   -1.000000   -0.500000   16.000000

walsh_transform_test():
  Python version: 3.6.9
  walsh_transform() computes a fast Walsh transform.

     I        X(I)    Y=FWT(X)/N   Z=FWT(Y)/N

     0    0.489534    0.523180    0.489534
     1    0.151262   -0.137299    0.151262
     2    0.137054   -0.072816    0.137054
     3    0.499333    0.006231    0.499333
     4    0.647690   -0.014681    0.647690
     5    0.022021    0.074038    0.022021
     6    0.930191   -0.149792    0.930191
     7    0.209962    0.091538    0.209962
     8    0.825560   -0.005583    0.825560
     9    0.958711    0.081332    0.958711
    10    0.988847    0.123364    0.988847
    11    0.184984   -0.023975    0.184984
    12    0.946443   -0.037334    0.946443
    13    0.876518   -0.133904    0.876518
    14    0.165498    0.047064    0.165498
    15    0.337268    0.118172    0.337268

     I        X(I)    Y=FWT(X)/N   Z=FWT(Y)/N

     0    1.000000    8.500000    1.000000
     1    2.000000   -4.000000    2.000000
     2    3.000000    0.000000    3.000000
     3    4.000000   -2.000000    4.000000
     4    5.000000    0.000000    5.000000
     5    6.000000   -0.000000    6.000000
     6    7.000000    0.000000    7.000000
     7    8.000000   -1.000000    8.000000
     8    9.000000    0.000000    9.000000
     9   10.000000   -0.000000   10.000000
    10   11.000000    0.000000   11.000000
    11   12.000000   -0.000000   12.000000
    12   13.000000    0.000000   13.000000
    13   14.000000   -0.000000   14.000000
    14   15.000000    0.000000   15.000000
    15   16.000000   -0.500000   16.000000

walsh_test()
  Normal end of execution.
Tue Oct 19 17:32:27 2021
