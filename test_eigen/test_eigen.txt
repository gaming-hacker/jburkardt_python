Tue Oct 19 17:23:23 2021

test_eigen_test():
  Python version: 3.6.9
  Test test_eigen().

r8vec_house_column_test
  Python version: 3.6.9
  r8vec_house_column returns the compact form of
  a Householder matrix that "packs" a column
  of a matrix.

  Matrix A:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
     4.33856  
     1.20535  
      1.8877  
     1.32896  

      1 :
     2.69631  
     4.75622  
     4.38123  
     4.53689  

      2 :
     0.17385  
    0.136787  
     1.30788  
   0.0314573  

      3 :
     1.55001  
     4.40085  
     2.27952  
     1.20969  


  Working on column K = 0

  Householder matrix H:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
   -0.812317  
   -0.504836  
  -0.0325502  
   -0.290212  

      1 :
   -0.504836  
    0.859374  
 -0.00906713  
  -0.0808408  

      2 :
  -0.0325502  
 -0.00906713  
    0.999415  
 -0.00521236  

      3 :
   -0.290212  
  -0.0808408  
 -0.00521236  
    0.953528  


  Product H*A:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
    -5.34097  
    -4.66186  
    -4.44933  
    -3.72201  

      1 :
-3.08578e-16  
     3.12186  
       2.616  
      3.1299  

      2 :
-5.56332e-17  
   0.0314089  
     1.19406  
  -0.0592608  

      3 :
-4.97907e-16  
     3.46131  
     1.26475  
    0.400867  


  Working on column K = 1

  Householder matrix H:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
           1  
           0  
           0  
           0  

      1 :
           0  
   -0.669741  
 -0.00673823  
   -0.742564  

      2 :
           0  
 -0.00673823  
    0.999973  
 -0.00299661  

      3 :
           0  
   -0.742564  
 -0.00299661  
    0.669768  


  Product H*A:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
    -5.34097  
    -4.66186  
    -4.44933  
    -3.72201  

      1 :
  5.7677e-16  
     -4.6613  
    -2.69925  
    -2.39349  

      2 :
-5.20604e-17  
-4.03433e-18  
     1.17261  
  -0.0815505  

      3 :
-1.04176e-16  
 1.60373e-16  
    -1.09903  
    -2.05549  


  Working on column K = 2

  Householder matrix H:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
           1  
           0  
           0  
           0  

      1 :
           0  
           1  
           0  
           0  

      2 :
           0  
           0  
   -0.729629  
    0.683843  

      3 :
           0  
           0  
    0.683843  
    0.729629  


  Product H*A:

  Col: 
      0       
      1       
      2       
      3       

  Row
      0 :
    -5.34097  
    -4.66186  
    -4.44933  
    -3.72201  

      1 :
  5.7677e-16  
     -4.6613  
    -2.69925  
    -2.39349  

      2 :
-3.32556e-17  
 1.12614e-16  
    -1.60714  
    -1.34613  

      3 :
-1.11611e-16  
 1.14254e-16  
-1.47233e-17  
    -1.55551  


r8vec_house_column_test
  Normal end of execution.

r8mat_house_axh_test
  Python version: 3.6.9
  r8mat_house_axh multiplies a matrix A times a
  compact Householder matrix.

  Matrix A:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
    -2.23627  
      2.2334  
     3.56582  
     3.60012  
    -3.15125  

      1 :
     3.04599  
    -1.78553  
    -4.43695  
    -2.25083  
     3.06558  

      2 :
   -0.166366  
   -0.576084  
    -1.96073  
    -4.53082  
    -1.24725  

      3 :
     2.39166  
     2.91615  
     1.76121  
     4.30676  
     1.91514  

      4 :
     3.76479  
    -1.16177  
     4.15486  
    -2.62225  
    -3.17509  


  Compact vector V so column 3 of H*A is packed:

     0:             0
     1:             0
     2:     -0.836212
     3:       0.21403
     4:      0.504917

  Householder matrix H:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
           1  
           0  
           0  
           0  
           0  

      1 :
           0  
           1  
           0  
           0  
           0  

      2 :
           0  
           0  
     -0.3985  
    0.357949  
    0.844435  

      3 :
           0  
           0  
    0.357949  
    0.908382  
   -0.216135  

      4 :
           0  
           0  
    0.844435  
   -0.216135  
    0.490118  


  Indirect product A*H:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
    -2.23627  
      2.2334  
    -2.79335  
     5.22776  
    0.688509  

      1 :
     3.04599  
    -1.78553  
     3.55112  
     -4.2954  
    -1.75774  

      2 :
   -0.166366  
   -0.576084  
    -1.89367  
    -4.54798  
    -1.28774  

      3 :
     2.39166  
     2.91615  
     2.45697  
     4.12868  
     1.49503  

      4 :
     3.76479  
    -1.16177  
     -5.2755  
   -0.208533  
      2.5191  


  Direct product A*H:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
    -2.23627  
      2.2334  
    -2.79335  
     5.22776  
    0.688509  

      1 :
     3.04599  
    -1.78553  
     3.55112  
     -4.2954  
    -1.75774  

      2 :
   -0.166366  
   -0.576084  
    -1.89367  
    -4.54798  
    -1.28774  

      3 :
     2.39166  
     2.91615  
     2.45697  
     4.12868  
     1.49503  

      4 :
     3.76479  
    -1.16177  
     -5.2755  
   -0.208533  
      2.5191  


  H*A should pack column 3:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
    -2.23627  
      2.2334  
     3.56582  
     3.60012  
    -3.15125  

      1 :
     3.04599  
    -1.78553  
    -4.43695  
    -2.25083  
     3.06558  

      2 :
     4.10151  
    0.292361  
     4.92028  
     1.13281  
     -1.4986  

      3 :
     1.29929  
     2.69387  
 9.08327e-17  
     2.85714  
     1.97948  

      4 :
     1.18778  
    -1.68615  
-4.63692e-16  
    -6.04203  
    -3.02332  


r8mat_house_axh_test
  Normal end of execution.

r8mat_orth_uniform_test
  R8SYMM_orth_uniform generates a random orthogopnal matrix.

  The matrix Q:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
   -0.454893  
   -0.642263  
    0.539463  
   0.0965502  
   -0.283245  

      1 :
   -0.280861  
   -0.425647  
   -0.666938  
    0.452717  
    0.300305  

      2 :
   -0.763409  
    0.411871  
   -0.269744  
   -0.274633  
   -0.315252  

      3 :
   -0.342085  
    0.119054  
    0.332543  
   -0.176069  
    0.852771  

      4 :
   -0.119895  
    0.471711  
    0.284299  
    0.824198  
  -0.0546445  


  The matrix Q'Q:

  Col: 
      0       
      1       
      2       
      3       
      4       

  Row
      0 :
           1  
 3.08759e-17  
-1.74229e-16  
 4.15515e-17  
 8.37075e-17  

      1 :
 3.08759e-17  
           1  
-1.24905e-16  
-6.50549e-18  
-6.33896e-17  

      2 :
-1.74229e-16  
-1.24905e-16  
           1  
 8.05462e-17  
 3.29765e-17  

      3 :
 4.15515e-17  
-6.50549e-18  
 8.05462e-17  
           1  
 1.06411e-17  

      4 :
 8.37075e-17  
-6.33896e-17  
 3.29765e-17  
 1.06411e-17  
           1  


r8nsymm_gen_test
  r8nsymm_gen makes an arbitrary size nonsymmetric matrix
  with known eigenvalues and eigenvectors.

  LAMBDA_MIN = -0.848402
  LAMBDA_MAX = 3.06963

  Lambda bins:

   Index     Lower Limit   Count     Upper Limit

       0                       0       -0.848402
       1       -0.848402       2       -0.456599
       2       -0.456599       4      -0.0647959
       3      -0.0647959       9        0.327007
       4        0.327007       6         0.71881
       5         0.71881       8         1.11061
       6         1.11061       7         1.50242
       7         1.50242       5         1.89422
       8         1.89422       4         2.28602
       9         2.28602       4         2.67782
      10         2.67782       0         3.06963
      11         3.06963       1

  LAMBDA versus column norms of A*QR:

       0:       0.177928      0.177928
       1:     -0.0439728     0.0439728
       2:        1.78289       1.78289
       3:      0.0686414     0.0686414
       4:       0.280524      0.280524
       5:        1.26889       1.26889
       6:        2.01353       2.01353
       7:        2.16281       2.16281
       8:       0.348516      0.348516
       9:        2.60694       2.60694
      10:       0.880664      0.880664
      11:      -0.157923      0.157923
      12:        1.70875       1.70875
      13:        1.34212       1.34212
      14:       0.417336      0.417336
      15:       0.815997      0.815997
      16:       0.198404      0.198404
      17:       0.263284      0.263284
      18:        3.06963       3.06963
      19:        2.58291       2.58291
      20:        1.33977       1.33977
      21:        1.83775       1.83775
      22:        1.56114       1.56114
      23:      -0.487204      0.487204
      24:        2.55784       2.55784
      25:         2.4928        2.4928
      26:        2.13144       2.13144
      27:        1.17993       1.17993
      28:      -0.270688      0.270688
      29:       0.556319      0.556319
      30:        1.91277       1.91277
      31:       -0.27228       0.27228
      32:       0.683738      0.683738
      33:       -0.37517       0.37517
      34:       0.938042      0.938042
      35:      -0.848402      0.848402
      36:       0.572027      0.572027
      37:       0.204155      0.204155
      38:        1.22144       1.22144
      39:       0.755068      0.755068
      40:      0.0722288     0.0722288
      41:       0.785426      0.785426
      42:        1.14169       1.14169
      43:        1.75406       1.75406
      44:      0.0418194     0.0418194
      45:        1.30734       1.30734
      46:       0.752872      0.752872
      47:        1.00555       1.00555
      48:        1.01711       1.01711
      49:       0.393513      0.393513

r8symm_gen_test
  r8symm_gen makes an arbitrary size symmetric matrix
  with known eigenvalues and eigenvectors.

  LAMBDA_MIN = -1.42187
  LAMBDA_MAX = 2.93512

  Lambda bins:

   Index     Lower Limit   Count     Upper Limit

       0                       0        -1.42187
       1        -1.42187       4        -0.98617
       2        -0.98617      10        -0.55047
       3        -0.55047       8       -0.114771
       4       -0.114771      14        0.320928
       5        0.320928      14        0.756627
       6        0.756627      19         1.19233
       7         1.19233      14         1.62803
       8         1.62803       7         2.06373
       9         2.06373       5         2.49942
      10         2.49942       4         2.93512
      11         2.93512       1

  LAMBDA versus column norms of A*Q:

       0:       0.867262      0.867262
       1:        2.54762       2.54762
       2:        2.36121       2.36121
       3:      -0.671757      0.671757
       4:       0.503377      0.503377
       5:      0.0486749     0.0486749
       6:       0.637477      0.637477
       7:       0.699188      0.699188
       8:       0.790888      0.790888
       9:       -1.14409       1.14409
      10:        1.47819       1.47819
      11:        1.03799       1.03799
      12:       0.162271      0.162271
      13:      -0.848617      0.848617
      14:       0.365323      0.365323
      15:      -0.683712      0.683712
      16:         1.3856        1.3856
      17:        2.46415       2.46415
      18:         1.8231        1.8231
      19:        1.67695       1.67695
      20:         1.0004        1.0004
      21:        2.37078       2.37078
      22:       -1.31089       1.31089
      23:        1.14362       1.14362
      24:       0.160519      0.160519
      25:        1.73332       1.73332
      26:      -0.977069      0.977069
      27:      -0.377962      0.377962
      28:      -0.889413      0.889413
      29:         1.1663        1.1663
      30:        1.93827       1.93827
      31:       0.717485      0.717485
      32:       -1.42187       1.42187
      33:       0.776851      0.776851
      34:       0.668733      0.668733
      35:        2.23539       2.23539
      36:        1.24611       1.24611
      37:        1.54335       1.54335
      38:        2.81311       2.81311
      39:      -0.110891      0.110891
      40:        1.31648       1.31648
      41:        2.48001       2.48001
      42:        0.97592       0.97592
      43:        1.26189       1.26189
      44:      0.0228965     0.0228965
      45:     -0.0963232     0.0963232
      46:       0.033005      0.033005
      47:        1.38846       1.38846
      48:       0.980767      0.980767
      49:        0.80125       0.80125
      50:        2.93512       2.93512
      51:     -0.0425581     0.0425581
      52:        1.27957       1.27957
      53:       0.861079      0.861079
      54:        0.72522       0.72522
      55:      -0.158005      0.158005
      56:      -0.234549      0.234549
      57:        -0.9457        0.9457
      58:      -0.136454      0.136454
      59:      -0.807813      0.807813
      60:      -0.529822      0.529822
      61:        1.72206       1.72206
      62:       0.674644      0.674644
      63:       0.488001      0.488001
      64:        1.72197       1.72197
      65:       0.876411      0.876411
      66:        1.31967       1.31967
      67:        1.17808       1.17808
      68:        1.62797       1.62797
      69:       0.241092      0.241092
      70:        1.98698       1.98698
      71:       0.781058      0.781058
      72:      -0.416198      0.416198
      73:        1.09037       1.09037
      74:      -0.557887      0.557887
      75:        1.38237       1.38237
      76:       0.228687      0.228687
      77:       0.459454      0.459454
      78:     0.00686125    0.00686125
      79:      0.0857799     0.0857799
      80:       0.340645      0.340645
      81:        1.13766       1.13766
      82:         2.6391        2.6391
      83:      -0.155555      0.155555
      84:        2.52379       2.52379
      85:       -0.90331       0.90331
      86:       0.643454      0.643454
      87:      -0.238504      0.238504
      88:       0.317428      0.317428
      89:       0.770662      0.770662
      90:       -1.00712       1.00712
      91:      -0.773101      0.773101
      92:       0.916898      0.916898
      93:        1.62458       1.62458
      94:        1.09295       1.09295
      95:       0.450808      0.450808
      96:        1.60897       1.60897
      97:       0.144896      0.144896
      98:        1.25987       1.25987
      99:       0.385138      0.385138

test_eigen_test():
  Normal end of execution.
Tue Oct 19 17:24:59 2021
